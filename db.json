{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1487787476635},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1487787476635},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1487787476635},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1487787476635},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1487787476635},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1487787476635},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1487787476635},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1487787476639},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1487787476639},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1487787476639},{"_id":"themes/next/gulpfile.coffee","hash":"b00e93c5c8667a4fbed71046dc93ce6784bf6257","modified":1487787476639},{"_id":"themes/next/package.json","hash":"a042faed34835a52505643aa2d841cd2dcf5dff6","modified":1487787476639},{"_id":"source/_posts/Github-Hexo搭建个人博客.md","hash":"4540561f583fb25b5522b321b3a4ec0178a972bb","modified":1487787476631},{"_id":"source/_posts/React-Native笔记-一.md","hash":"a81554d40ede2c20b785073bdc6b4768ff13a381","modified":1487907435052},{"_id":"source/_posts/React-Native笔记-三.md","hash":"de7b9d64d2d060c0ae791b8c813da704654c9597","modified":1487907499932},{"_id":"source/_posts/React-Native笔记-二.md","hash":"2e48d99fa6efc0be297716cda05f17517b44ed4a","modified":1487907468012},{"_id":"themes/next/_config.yml","hash":"6576f34441ed131e07b8968ddc4d10027fcfb333","modified":1487787476639},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1487787476639},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1487787476635},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1487787476635},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1487787476639},{"_id":"themes/next/languages/default.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1487787476639},{"_id":"themes/next/languages/en.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1487787476639},{"_id":"themes/next/languages/fr-FR.yml","hash":"e98f1558347752a20019b71f0b1f9c8be1b34f42","modified":1487787476639},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1487787476639},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1487787476639},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1487787476639},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1487787476639},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1487787476639},{"_id":"themes/next/languages/zh-Hans.yml","hash":"40d01dc46d57f71c2ef635c45b295d4355456e90","modified":1487787476639},{"_id":"themes/next/languages/ru.yml","hash":"5022885d8955e1b91d8841048db272bf99c59a76","modified":1487787476639},{"_id":"themes/next/languages/zh-hk.yml","hash":"19c23d21f262e24c06ee6ddfd51d2a6585304f88","modified":1487787476639},{"_id":"themes/next/languages/zh-tw.yml","hash":"68407799271c78ecc07f03d238257dd8c65ad42d","modified":1487787476639},{"_id":"themes/next/layout/_layout.swig","hash":"2c0c3547a5b470024326a33ae2779d5ee0252266","modified":1487787476639},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1487787476639},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1487787476639},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1487787476639},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1487787476639},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1487787476639},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1487787476639},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1487787476639},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1487787476647},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1487787476647},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1487787476647},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487787476643},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1487787476639},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1487787476639},{"_id":"themes/next/scripts/tags/exturl.js","hash":"79378f3a1cd90518b07808ed09156a3ab55ffa31","modified":1487787476639},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1487787476639},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1487787476639},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1487787476639},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1487787476639},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1487787476639},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1487787476639},{"_id":"themes/next/layout/_macro/post.swig","hash":"6243bc0778f87186ba78bb6022f40d719565fd19","modified":1487787476639},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1487787476639},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b57650032ed47b8bd357ec4dcc02d872fdd0e3e1","modified":1487787476639},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1487787476639},{"_id":"themes/next/layout/_partials/comments.swig","hash":"970aa668680896262b1056bb5787fc9ec8754495","modified":1487787476639},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1487787476639},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1487787476639},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1487787476639},{"_id":"themes/next/layout/_partials/header.swig","hash":"665fee16093356d710f5c257b5e0d8e7416ab797","modified":1487787476639},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1487787476639},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1487787476639},{"_id":"themes/next/layout/_partials/search.swig","hash":"7b61e96508df70152b809ea5354236ab7f0d54f4","modified":1487787476639},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1487787476639},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1487787476639},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1487787476639},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1487787476639},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1487787476643},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1487787476643},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1487787476643},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1487787476643},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1487787476643},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1487787476643},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1487787476643},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1487787476643},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1487787476643},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1487787476643},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1487787476643},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1487787476643},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1487787476643},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487787476639},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487787476639},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1487787476643},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1487787476643},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487787476639},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487787476639},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487787476639},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487787476643},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487787476643},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1487787476639},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1487787476639},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1487787476639},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1487787476639},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"741f09b2ba4e440011c15f5d288b109b82c87f1b","modified":1487787476639},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1487787476639},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1487787476639},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1487787476639},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1487787476639},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1487787476639},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1487787476639},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1487787476639},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1487787476639},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"e46900412e28f529c26e25e6bada342006435a32","modified":1487787476639},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"a279e1881208aff2f669fe235e9661ab825bc540","modified":1487787476639},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1487787476639},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"ceb39c100c99900294ddee8b1ff81fcaf43873b5","modified":1487787476639},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1487787476639},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1487787476639},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1487787476639},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1487787476639},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1487787476639},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1487787476639},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1487787476643},{"_id":"themes/next/source/css/_variables/base.styl","hash":"3c8dcf93db666ac6f9f8955b5d36a9419430862a","modified":1487787476643},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1487787476643},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1487787476643},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1487787476643},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1487787476643},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1487787476647},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1487787476647},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1487787476647},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1487787476647},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1487787476647},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1487787476643},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1487787476647},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1487787476643},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1487787476643},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1487787476647},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1487787476647},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1487787476647},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1487787476647},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1487787476643},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"54ca0acff29a414e2c1b7c1790db22f0c775604c","modified":1487787476643},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1487787476643},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1487787476643},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1487787476643},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1487787476643},{"_id":"themes/next/source/js/src/post-details.js","hash":"661806a916fa46566accb3222da1fb790decb725","modified":1487787476643},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1487787476643},{"_id":"themes/next/source/js/src/utils.js","hash":"86834fb60aad185634f8513b152d472a53d9ca08","modified":1487787476643},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1487787476647},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1487787476647},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1487787476647},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1487787476647},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1487787476647},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1487787476647},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1487787476639},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1487787476639},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1487787476639},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1487787476639},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1487787476639},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1487787476639},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1487787476639},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1487787476639},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1487787476639},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1487787476639},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1487787476639},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1487787476639},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1487787476639},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1487787476639},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1487787476639},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1487787476647},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1487787476647},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"26d18060b9a13cc3c3feb90c3ed48aed711095a1","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1487787476639},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1487787476643},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1487787476643},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1487787476643},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1487787476643},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1487787476643},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1487787476639},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1487787476639},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1487787476639},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1487787476639},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1487787476639},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1487787476639},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1487787476639},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1487787476639},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1487787476639},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1487787476639},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1487787476639},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1487787476639},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1487787476639},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1487787476639},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f15537cee1a9ef4fa1e72a1670ebce4097db8115","modified":1487787476643},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"7e18f08c2c82f71e83860f232d43d8b89865ac2e","modified":1487787476643},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1487787476643},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1487787476643},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1487787476643},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1487787476643},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1487787476643},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1487787476643},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1487787476643},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1487787476643},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1487787476643},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1487787476643},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1487787476643},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1487787476643},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1487787476647},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1487787476647},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1487787476647},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1487787476643},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1487787476647},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1487787476647},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1487787476643},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1487787476647},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1487787476647},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1487787476647},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1487787476647},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1487787476647},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1487787476647},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"b8e754c93aa2f3d762f7ffc93bc0e526a729e879","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8fe1e55bc290e6aaf07cc644fe27b62107a272a8","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1487787476639},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1487787476643},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1487787476639},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1487787476643},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1487787476643},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1487787476643},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1487787476643},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1487787476643},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1487787476643},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1487787476647},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1487787476643},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1487787476639},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1487787476639},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1487787476647},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1487787476643},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1487787476647},{"_id":"public/archives/index.html","hash":"2bf154ab055a04fbfb016337b44b68b63a5d1876","modified":1487907542761},{"_id":"public/archives/2017/index.html","hash":"fcb818f08bedd91e3cf62b51cd10fad8829c93d9","modified":1487907542763},{"_id":"public/archives/2017/02/index.html","hash":"09fc4f3b8d43c9865c45d09235c7b9172debffff","modified":1487907542763},{"_id":"public/tags/hexo/index.html","hash":"da6d22d4b45cd129b42ed10fdbf6e1f31bdcf21e","modified":1487907542763},{"_id":"public/2017/02/23/Github-Hexo搭建个人博客/index.html","hash":"55be69114ca9d7b0d9baf2fb7c5570693eebbbf1","modified":1487907542763},{"_id":"public/index.html","hash":"3835b6cc2365749437147e3d0296da87624bcba3","modified":1487907542763},{"_id":"public/tags/React-Native/index.html","hash":"2e9bfaba0d9058725fa496c32953d4995fdc7727","modified":1487907542765},{"_id":"public/2017/02/24/React-Native笔记-三/index.html","hash":"0fa0c1d49d26a242138d66c01a3287b60e3bc1f5","modified":1487907542765},{"_id":"public/2017/02/24/React-Native笔记-二/index.html","hash":"9a0772c6f1483507958b56b969606cd8104707d5","modified":1487907542765},{"_id":"public/2017/02/24/React-Native笔记-一/index.html","hash":"00fd380dd3f10945b7aaf12fc64dbe6cd5733728","modified":1487907542765}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Github+Hexo搭建个人博客","date":"2017-02-22T16:52:12.000Z","_content":"\n# Ubuntu上结合Github用Hexo搭建博客\n\n### [](#u7B80_u4ECB \"简介\")简介\n在搭建博客的过程中会涉及到下面这些东西：\n\n1.  Hexo\n2.  Git\n3.  Github Pages\n4.  Npm\n5.  Nodejs\n\n**[Hexo](https://github.com/hexojs/hexo)**\n\n```\n一款基于Node.js的简单、快速、强大的静态博客框架\n\n```\n\n<!--more-->\n\n**Hexo搭建博客和github有什么关系**\n\n那Hexo就是一个博客框架，关Github什么事情呢，这还被你说对了，还真不怎么和github相关，用hexo弄一个博客出来很简单。当然你也可以选择用wordpress来结合hexo，只是这里选择用github pages服务，那又说到了一个东西:**github pages**。\n\n**[Github Pages](https://pages.github.com/)**\n\n上面是网址，可以自己进去看看，简单的说就是github提供的一种用来展示托管在自己github仓库上的静态网页。github pages也有自己的一套框架，只用github pages也可以搭建自己的博客。\n\n**[Npm](https://www.npmjs.com/)**\n\n一个NodeJs包管理和分发工具，全称为Node Package Manager。和Ruby的gem，Python的pypi类似。通过npm能快速的部署hexo框架，毕竟hexo基于nodejs。\n\n**[Node.js](https://nodejs.org/en/)**\n\nNode是一个Javascript运行环境(runtime)。实际上它是对Google V8引擎进行了封装。V8引 擎执行Javascript的速度非常快，性能非常好。Node对一些特殊用例进行了优化，提供了替代的API，使得V8在非浏览器环境下运行得更好。\n\n### [](#u5B89_u88C5 \"安装\")安装\n\n#### [](#1-__u5B89_u88C5Node-js \"1\\. 安装Node.js\")1\\. 安装Node.js\n\n在Ubuntu下面部署很容易的= =,在终端输入：\n\n```\nsudo apt-get install --yes nodejs\n\n```\n\nNodejs的部署工作就完成了。其他的Linux发行版可以参照下面的教程[Installing Node.js via package manager](https://github.com/nodejs/node-v0.x-archive/wiki/Installing-Node.js-via-package-manager)\n\n也可以在Node的官网上直接[下载](https://nodejs.org/en/download/)安装。\n\n安装好之后，在终端输入nodejs即可进入到nodejs的交互模式中。\n\n**Note**\n需要注意一个问题就是，在hexo中的nodejs文件在运行时使用的是`node xxx/js`这样的形式，而在Ubuntu下面直接运行`node xxx.js`会失败，报错为`/usr/bin/env: node: No such file or directory`，网上有些说是和node的版本有关，实际上是因为NodeJs在Ubuntu上默认安装之后，需要`nodejs xxx.js`这样用，解决方法为创建如下软链接，保证可以运行`node xxx.js`:\n\n```\nln -s /usr/bin/nodejs /usr/bin/node\n\n```\n\n#### [](#2-__u5B89_u88C5npm \"2\\. 安装npm\")2\\. 安装npm\n\n在终端输入：\n\n```\nsudo apt-get install npm\n\n```\n\n#### [](#3-__u5B89_u88C5hexo \"3\\. 安装hexo\")3\\. 安装hexo\n\n终端输入：\n\n```\nnpm install hexo-cli -g\n\n```\n\n在这里可能会报错，由于没有root权限导致无法安装hexo，`sudo su`root一下再安装一次就好了。\n\n到这里就完成了对Hexo的初步安装了，直接在终端输入`hexo`会出现相关的信息。\n\n#### [](#4-__u5B89_u88C5git \"4\\. 安装git\")4\\. 安装git\n\n首先安装git\n\n```\nsudo apt-get update\nsudo apt-get install git\n\n```\n\n设置用户信息\n\n```\n$ git config --global user.name \"Xiaojuanmao\"//用户名\n$ git config --global user.email  \"daque@hustunique.com\"//填写自己的邮箱\n\n```\n\n检查SSH keys\n\n```\n$ cd ~/. ssh\n\n```\n\n如果提示No such file or directory 说明你是第一次使用git。按照如下步骤处理SSH Keys，如果存在SSH Keys，则直接跳过下面分割线内的部分。\n\n* * *\n\n**配置SSH Keys**\n\n*   生成新的SSH Keys\n\n    ```\n    $ ssh-keygen -t rsa -C \"邮件地址@youremail.com\"\n\n    ```\n\n    会出现下面的提示：\n\n    ```\n    Generating public/private rsa key pair.\n    Enter file in which to save the key\n    (/Users/your_user_directory/.ssh/id_rsa):\n\n    ```\n\n    直接回车，存储在默认的目录下面。系统会提示输入密码，密码的作用是在向仓库提交代码的时候用到，可以防止其他人向自己的仓库提交代码。输入密码后，相关的会生成.ssh文件。\n\n*   添加新的SSH Keys到GitHub\n\n    通过下面的命令进入目录，该目录下存放着刚才生成的密钥文件\n\n    ```\n    $ cd ~/. ssh\n\n    ```\n\n    登陆github系统。点击右上角的 Account Settings—->SSH Public keys —-> add another public keys。打开刚才目录下面的`id_rsa.pub`文件，将文件内容复制到key文本框中就可以了。\n\n*   测试SSH\n    可以输入下面的命令，测试SSH是否设置成功\n\n    ```\n    ssh -T git@github.com\n\n    ```\n\n    如果出现下面的信息，则说明设置成功\n\n    ```\n    Hi XXX! You've successfully authenticated, but GitHub does not provide shell access.\n\n    ```\n\n    **Note**\n    也可能会报出错误：`Agent admitted failure to sign using the key.Permission denied (publickey).`这是由于没有将新建的ssh密钥加入，下面的命令可以解决：\n\n    ```\n    ssh-add   ~/.ssh/id_rsa\n\n    ```\n\n* * *\n\n### [](#u4F7F_u7528 \"使用\")使用\n\n#### [](#1-__u4F7F_u7528github_u521B_u5EFA_u535A_u5BA2_u4ED3_u5E93 \"1\\. 使用github创建博客仓库\")1\\. 使用github创建博客仓库\n在github上创建一个仓库，**仓库的名字和用户名必须对应**，如我的帐户名为`Xiaojuanmao`,则创建的仓库名称为`Xiaojuanmao.github.io`。这样存放在github上的远程仓库就准备好了，下面来用hexo来初始化本地的仓库内容。\n\n#### [](#2-_Hexo_u521D_u59CB_u5316 \"2\\. Hexo初始化\")2\\. Hexo初始化\n\n在主文件夹下创建一个hexo文件夹，进入文件夹，在终端输入如下的命令\n\n```\nhexo init\n\n```\n\n会给出这样的反馈：`INFO Copying data to ~/hexo INFO You are almost done! Don't forget to run 'npm install' before you start blogging with Hexo!`\n接着按照上面的提示，输入命令\n\n```\nnpm install\n\n```\n\n会自动在目录下面安装node_modules。接着在命令行中启动本地的服务器，可以用来预览个人博客的样子：\n\n```\nhexo server\n\n```\n\n反馈信息会提示已经在挂在了本地的服务器：`INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.`\n\n在浏览器中打开`http://0.0.0.0\"4000/`可以看到网页的整个框架已经生成了。有个默认的主题，如果觉得这个主题不好看，hexo还有好多主题可供更换。\n\n#### [](#3-__u6DFB_u52A0_u6587_u7AE0 \"3\\. 添加文章\")3\\. 添加文章\n\n打开命令行，进入到hexo的目录下，利用如下的命令，可以新建一个.md格式的文件。\n\n```\nhexo new \"My New Post\"\n反馈信息：INFO  Created: ~/hexo/source/_posts/My-New-Post.md\n\n```\n\n刷新刚才的`localhost:4000`，就能看到一篇新的博客出现了，用起来还是炒鸡方便的。创建之后再去编辑这个.md文件，写自己想写的内容就可以了。\n\n#### [](#4-__u751F_u6210_u9759_u6001_u7F51_u9875 \"4\\. 生成静态网页\")4\\. 生成静态网页\n\n下面的命令生成静态的网页，在将本地的内容部署到github上面去之前，一定要先执行这个步骤。\n\n```\nhexo generate\n   或者 hexo g\n\n```\n\n执行完之后，会在./public的目录下生成一系列的.html,.css文件。\n\n#### [](#5-__u90E8_u7F72_u5230Github \"5\\. 部署到Github\")5\\. 部署到Github\n\n在和github完成对接之前，需要去配置hexo自己的配置文件`_config.yml`。关于这个文件里面的一些内容，需要进行一些修改：\n\n```\n# Hexo Configuration\n## Docs: http://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: Xiaojuanmao's Blog # 网站的标题\nsubtitle: Life began in 1990 # 网站的副标题\ndescription: Coding Life # 显示在网页最下面的描述，类似于tag\nauthor: Xiaoxiaoda\nemail: daque@hustunique.com\nlanguage: zh_CN\ntimezone:\n\n# Deployment\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: git #这里不要写github了，hexo3.0之后用git代替了github\n  repository: git@github.com:Xiaojuanmao/Xiaojuanmao.github.io.git # 填写自己的git仓库地址，之前创建好了的\n  branch: master\n\n```\n\n更改完配置文件之后保存，通过下面的命令部署到github上：\n\n```\nhexo generate 或者 hexo g  #生成静态网页\nhexo deploy 或者 hexo d #部署到github\n上面两个命令可以和并为 hexo d -g\n\n```\n\n**Note**\n部署的过程中可能会出现如下的问题：\n\n```\nERROR Deployer not found: github\n\n```\n\n遇到这个不要慌，是hexo升级到3.0之后用git代替了github，所以需要再输入下面的命令，安装git的deployer\n\n```\nnpm install hexo-deployer-git --save\n\n```\n\n安装之后就可以将静态的网页部署到github的远程仓库上面。","source":"_posts/Github-Hexo搭建个人博客.md","raw":"---\ntitle: Github+Hexo搭建个人博客\ndate: 2017-02-23 00:52:12\ntags: hexo\n\n---\n\n# Ubuntu上结合Github用Hexo搭建博客\n\n### [](#u7B80_u4ECB \"简介\")简介\n在搭建博客的过程中会涉及到下面这些东西：\n\n1.  Hexo\n2.  Git\n3.  Github Pages\n4.  Npm\n5.  Nodejs\n\n**[Hexo](https://github.com/hexojs/hexo)**\n\n```\n一款基于Node.js的简单、快速、强大的静态博客框架\n\n```\n\n<!--more-->\n\n**Hexo搭建博客和github有什么关系**\n\n那Hexo就是一个博客框架，关Github什么事情呢，这还被你说对了，还真不怎么和github相关，用hexo弄一个博客出来很简单。当然你也可以选择用wordpress来结合hexo，只是这里选择用github pages服务，那又说到了一个东西:**github pages**。\n\n**[Github Pages](https://pages.github.com/)**\n\n上面是网址，可以自己进去看看，简单的说就是github提供的一种用来展示托管在自己github仓库上的静态网页。github pages也有自己的一套框架，只用github pages也可以搭建自己的博客。\n\n**[Npm](https://www.npmjs.com/)**\n\n一个NodeJs包管理和分发工具，全称为Node Package Manager。和Ruby的gem，Python的pypi类似。通过npm能快速的部署hexo框架，毕竟hexo基于nodejs。\n\n**[Node.js](https://nodejs.org/en/)**\n\nNode是一个Javascript运行环境(runtime)。实际上它是对Google V8引擎进行了封装。V8引 擎执行Javascript的速度非常快，性能非常好。Node对一些特殊用例进行了优化，提供了替代的API，使得V8在非浏览器环境下运行得更好。\n\n### [](#u5B89_u88C5 \"安装\")安装\n\n#### [](#1-__u5B89_u88C5Node-js \"1\\. 安装Node.js\")1\\. 安装Node.js\n\n在Ubuntu下面部署很容易的= =,在终端输入：\n\n```\nsudo apt-get install --yes nodejs\n\n```\n\nNodejs的部署工作就完成了。其他的Linux发行版可以参照下面的教程[Installing Node.js via package manager](https://github.com/nodejs/node-v0.x-archive/wiki/Installing-Node.js-via-package-manager)\n\n也可以在Node的官网上直接[下载](https://nodejs.org/en/download/)安装。\n\n安装好之后，在终端输入nodejs即可进入到nodejs的交互模式中。\n\n**Note**\n需要注意一个问题就是，在hexo中的nodejs文件在运行时使用的是`node xxx/js`这样的形式，而在Ubuntu下面直接运行`node xxx.js`会失败，报错为`/usr/bin/env: node: No such file or directory`，网上有些说是和node的版本有关，实际上是因为NodeJs在Ubuntu上默认安装之后，需要`nodejs xxx.js`这样用，解决方法为创建如下软链接，保证可以运行`node xxx.js`:\n\n```\nln -s /usr/bin/nodejs /usr/bin/node\n\n```\n\n#### [](#2-__u5B89_u88C5npm \"2\\. 安装npm\")2\\. 安装npm\n\n在终端输入：\n\n```\nsudo apt-get install npm\n\n```\n\n#### [](#3-__u5B89_u88C5hexo \"3\\. 安装hexo\")3\\. 安装hexo\n\n终端输入：\n\n```\nnpm install hexo-cli -g\n\n```\n\n在这里可能会报错，由于没有root权限导致无法安装hexo，`sudo su`root一下再安装一次就好了。\n\n到这里就完成了对Hexo的初步安装了，直接在终端输入`hexo`会出现相关的信息。\n\n#### [](#4-__u5B89_u88C5git \"4\\. 安装git\")4\\. 安装git\n\n首先安装git\n\n```\nsudo apt-get update\nsudo apt-get install git\n\n```\n\n设置用户信息\n\n```\n$ git config --global user.name \"Xiaojuanmao\"//用户名\n$ git config --global user.email  \"daque@hustunique.com\"//填写自己的邮箱\n\n```\n\n检查SSH keys\n\n```\n$ cd ~/. ssh\n\n```\n\n如果提示No such file or directory 说明你是第一次使用git。按照如下步骤处理SSH Keys，如果存在SSH Keys，则直接跳过下面分割线内的部分。\n\n* * *\n\n**配置SSH Keys**\n\n*   生成新的SSH Keys\n\n    ```\n    $ ssh-keygen -t rsa -C \"邮件地址@youremail.com\"\n\n    ```\n\n    会出现下面的提示：\n\n    ```\n    Generating public/private rsa key pair.\n    Enter file in which to save the key\n    (/Users/your_user_directory/.ssh/id_rsa):\n\n    ```\n\n    直接回车，存储在默认的目录下面。系统会提示输入密码，密码的作用是在向仓库提交代码的时候用到，可以防止其他人向自己的仓库提交代码。输入密码后，相关的会生成.ssh文件。\n\n*   添加新的SSH Keys到GitHub\n\n    通过下面的命令进入目录，该目录下存放着刚才生成的密钥文件\n\n    ```\n    $ cd ~/. ssh\n\n    ```\n\n    登陆github系统。点击右上角的 Account Settings—->SSH Public keys —-> add another public keys。打开刚才目录下面的`id_rsa.pub`文件，将文件内容复制到key文本框中就可以了。\n\n*   测试SSH\n    可以输入下面的命令，测试SSH是否设置成功\n\n    ```\n    ssh -T git@github.com\n\n    ```\n\n    如果出现下面的信息，则说明设置成功\n\n    ```\n    Hi XXX! You've successfully authenticated, but GitHub does not provide shell access.\n\n    ```\n\n    **Note**\n    也可能会报出错误：`Agent admitted failure to sign using the key.Permission denied (publickey).`这是由于没有将新建的ssh密钥加入，下面的命令可以解决：\n\n    ```\n    ssh-add   ~/.ssh/id_rsa\n\n    ```\n\n* * *\n\n### [](#u4F7F_u7528 \"使用\")使用\n\n#### [](#1-__u4F7F_u7528github_u521B_u5EFA_u535A_u5BA2_u4ED3_u5E93 \"1\\. 使用github创建博客仓库\")1\\. 使用github创建博客仓库\n在github上创建一个仓库，**仓库的名字和用户名必须对应**，如我的帐户名为`Xiaojuanmao`,则创建的仓库名称为`Xiaojuanmao.github.io`。这样存放在github上的远程仓库就准备好了，下面来用hexo来初始化本地的仓库内容。\n\n#### [](#2-_Hexo_u521D_u59CB_u5316 \"2\\. Hexo初始化\")2\\. Hexo初始化\n\n在主文件夹下创建一个hexo文件夹，进入文件夹，在终端输入如下的命令\n\n```\nhexo init\n\n```\n\n会给出这样的反馈：`INFO Copying data to ~/hexo INFO You are almost done! Don't forget to run 'npm install' before you start blogging with Hexo!`\n接着按照上面的提示，输入命令\n\n```\nnpm install\n\n```\n\n会自动在目录下面安装node_modules。接着在命令行中启动本地的服务器，可以用来预览个人博客的样子：\n\n```\nhexo server\n\n```\n\n反馈信息会提示已经在挂在了本地的服务器：`INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.`\n\n在浏览器中打开`http://0.0.0.0\"4000/`可以看到网页的整个框架已经生成了。有个默认的主题，如果觉得这个主题不好看，hexo还有好多主题可供更换。\n\n#### [](#3-__u6DFB_u52A0_u6587_u7AE0 \"3\\. 添加文章\")3\\. 添加文章\n\n打开命令行，进入到hexo的目录下，利用如下的命令，可以新建一个.md格式的文件。\n\n```\nhexo new \"My New Post\"\n反馈信息：INFO  Created: ~/hexo/source/_posts/My-New-Post.md\n\n```\n\n刷新刚才的`localhost:4000`，就能看到一篇新的博客出现了，用起来还是炒鸡方便的。创建之后再去编辑这个.md文件，写自己想写的内容就可以了。\n\n#### [](#4-__u751F_u6210_u9759_u6001_u7F51_u9875 \"4\\. 生成静态网页\")4\\. 生成静态网页\n\n下面的命令生成静态的网页，在将本地的内容部署到github上面去之前，一定要先执行这个步骤。\n\n```\nhexo generate\n   或者 hexo g\n\n```\n\n执行完之后，会在./public的目录下生成一系列的.html,.css文件。\n\n#### [](#5-__u90E8_u7F72_u5230Github \"5\\. 部署到Github\")5\\. 部署到Github\n\n在和github完成对接之前，需要去配置hexo自己的配置文件`_config.yml`。关于这个文件里面的一些内容，需要进行一些修改：\n\n```\n# Hexo Configuration\n## Docs: http://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: Xiaojuanmao's Blog # 网站的标题\nsubtitle: Life began in 1990 # 网站的副标题\ndescription: Coding Life # 显示在网页最下面的描述，类似于tag\nauthor: Xiaoxiaoda\nemail: daque@hustunique.com\nlanguage: zh_CN\ntimezone:\n\n# Deployment\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: git #这里不要写github了，hexo3.0之后用git代替了github\n  repository: git@github.com:Xiaojuanmao/Xiaojuanmao.github.io.git # 填写自己的git仓库地址，之前创建好了的\n  branch: master\n\n```\n\n更改完配置文件之后保存，通过下面的命令部署到github上：\n\n```\nhexo generate 或者 hexo g  #生成静态网页\nhexo deploy 或者 hexo d #部署到github\n上面两个命令可以和并为 hexo d -g\n\n```\n\n**Note**\n部署的过程中可能会出现如下的问题：\n\n```\nERROR Deployer not found: github\n\n```\n\n遇到这个不要慌，是hexo升级到3.0之后用git代替了github，所以需要再输入下面的命令，安装git的deployer\n\n```\nnpm install hexo-deployer-git --save\n\n```\n\n安装之后就可以将静态的网页部署到github的远程仓库上面。","slug":"Github-Hexo搭建个人博客","published":1,"updated":"2017-02-22T18:17:56.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizj9ppys00002gj9amqvhb4k","content":"<h1 id=\"Ubuntu上结合Github用Hexo搭建博客\"><a href=\"#Ubuntu上结合Github用Hexo搭建博客\" class=\"headerlink\" title=\"Ubuntu上结合Github用Hexo搭建博客\"></a>Ubuntu上结合Github用Hexo搭建博客</h1><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a><a href=\"#u7B80_u4ECB\" title=\"简介\"></a>简介</h3><p>在搭建博客的过程中会涉及到下面这些东西：</p>\n<ol>\n<li>Hexo</li>\n<li>Git</li>\n<li>Github Pages</li>\n<li>Npm</li>\n<li>Nodejs</li>\n</ol>\n<p><strong><a href=\"https://github.com/hexojs/hexo\" target=\"_blank\" rel=\"external\">Hexo</a></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">一款基于Node.js的简单、快速、强大的静态博客框架</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p><strong>Hexo搭建博客和github有什么关系</strong></p>\n<p>那Hexo就是一个博客框架，关Github什么事情呢，这还被你说对了，还真不怎么和github相关，用hexo弄一个博客出来很简单。当然你也可以选择用wordpress来结合hexo，只是这里选择用github pages服务，那又说到了一个东西:<strong>github pages</strong>。</p>\n<p><strong><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">Github Pages</a></strong></p>\n<p>上面是网址，可以自己进去看看，简单的说就是github提供的一种用来展示托管在自己github仓库上的静态网页。github pages也有自己的一套框架，只用github pages也可以搭建自己的博客。</p>\n<p><strong><a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"external\">Npm</a></strong></p>\n<p>一个NodeJs包管理和分发工具，全称为Node Package Manager。和Ruby的gem，Python的pypi类似。通过npm能快速的部署hexo框架，毕竟hexo基于nodejs。</p>\n<p><strong><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">Node.js</a></strong></p>\n<p>Node是一个Javascript运行环境(runtime)。实际上它是对Google V8引擎进行了封装。V8引 擎执行Javascript的速度非常快，性能非常好。Node对一些特殊用例进行了优化，提供了替代的API，使得V8在非浏览器环境下运行得更好。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a><a href=\"#u5B89_u88C5\" title=\"安装\"></a>安装</h3><h4 id=\"1-安装Node-js\"><a href=\"#1-安装Node-js\" class=\"headerlink\" title=\"1. 安装Node.js\"></a><a href=\"#1-__u5B89_u88C5Node-js\" title=\"1\\. 安装Node.js\"></a>1. 安装Node.js</h4><p>在Ubuntu下面部署很容易的= =,在终端输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install --yes nodejs</div></pre></td></tr></table></figure>\n<p>Nodejs的部署工作就完成了。其他的Linux发行版可以参照下面的教程<a href=\"https://github.com/nodejs/node-v0.x-archive/wiki/Installing-Node.js-via-package-manager\" target=\"_blank\" rel=\"external\">Installing Node.js via package manager</a></p>\n<p>也可以在Node的官网上直接<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"external\">下载</a>安装。</p>\n<p>安装好之后，在终端输入nodejs即可进入到nodejs的交互模式中。</p>\n<p><strong>Note</strong><br>需要注意一个问题就是，在hexo中的nodejs文件在运行时使用的是<code>node xxx/js</code>这样的形式，而在Ubuntu下面直接运行<code>node xxx.js</code>会失败，报错为<code>/usr/bin/env: node: No such file or directory</code>，网上有些说是和node的版本有关，实际上是因为NodeJs在Ubuntu上默认安装之后，需要<code>nodejs xxx.js</code>这样用，解决方法为创建如下软链接，保证可以运行<code>node xxx.js</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ln -s /usr/bin/nodejs /usr/bin/node</div></pre></td></tr></table></figure>\n<h4 id=\"2-安装npm\"><a href=\"#2-安装npm\" class=\"headerlink\" title=\"2. 安装npm\"></a><a href=\"#2-__u5B89_u88C5npm\" title=\"2\\. 安装npm\"></a>2. 安装npm</h4><p>在终端输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install npm</div></pre></td></tr></table></figure>\n<h4 id=\"3-安装hexo\"><a href=\"#3-安装hexo\" class=\"headerlink\" title=\"3. 安装hexo\"></a><a href=\"#3-__u5B89_u88C5hexo\" title=\"3\\. 安装hexo\"></a>3. 安装hexo</h4><p>终端输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-cli -g</div></pre></td></tr></table></figure>\n<p>在这里可能会报错，由于没有root权限导致无法安装hexo，<code>sudo su</code>root一下再安装一次就好了。</p>\n<p>到这里就完成了对Hexo的初步安装了，直接在终端输入<code>hexo</code>会出现相关的信息。</p>\n<h4 id=\"4-安装git\"><a href=\"#4-安装git\" class=\"headerlink\" title=\"4. 安装git\"></a><a href=\"#4-__u5B89_u88C5git\" title=\"4\\. 安装git\"></a>4. 安装git</h4><p>首先安装git</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install git</div></pre></td></tr></table></figure>\n<p>设置用户信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name &quot;Xiaojuanmao&quot;//用户名</div><div class=\"line\">$ git config --global user.email  &quot;daque@hustunique.com&quot;//填写自己的邮箱</div></pre></td></tr></table></figure>\n<p>检查SSH keys</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~/. ssh</div></pre></td></tr></table></figure>\n<p>如果提示No such file or directory 说明你是第一次使用git。按照如下步骤处理SSH Keys，如果存在SSH Keys，则直接跳过下面分割线内的部分。</p>\n<hr>\n<p><strong>配置SSH Keys</strong></p>\n<ul>\n<li><p>生成新的SSH Keys</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;</div></pre></td></tr></table></figure>\n<p>会出现下面的提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter file in which to save the key</div><div class=\"line\">(/Users/your_user_directory/.ssh/id_rsa):</div></pre></td></tr></table></figure>\n<p>直接回车，存储在默认的目录下面。系统会提示输入密码，密码的作用是在向仓库提交代码的时候用到，可以防止其他人向自己的仓库提交代码。输入密码后，相关的会生成.ssh文件。</p>\n</li>\n<li><p>添加新的SSH Keys到GitHub</p>\n<p>通过下面的命令进入目录，该目录下存放着刚才生成的密钥文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~/. ssh</div></pre></td></tr></table></figure>\n<p>登陆github系统。点击右上角的 Account Settings—-&gt;SSH Public keys —-&gt; add another public keys。打开刚才目录下面的<code>id_rsa.pub</code>文件，将文件内容复制到key文本框中就可以了。</p>\n</li>\n<li><p>测试SSH<br>可以输入下面的命令，测试SSH是否设置成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh -T git@github.com</div></pre></td></tr></table></figure>\n<p>如果出现下面的信息，则说明设置成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hi XXX! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure>\n<p><strong>Note</strong><br>也可能会报出错误：<code>Agent admitted failure to sign using the key.Permission denied (publickey).</code>这是由于没有将新建的ssh密钥加入，下面的命令可以解决：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-add   ~/.ssh/id_rsa</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a><a href=\"#u4F7F_u7528\" title=\"使用\"></a>使用</h3><h4 id=\"1-使用github创建博客仓库\"><a href=\"#1-使用github创建博客仓库\" class=\"headerlink\" title=\"1. 使用github创建博客仓库\"></a><a href=\"#1-__u4F7F_u7528github_u521B_u5EFA_u535A_u5BA2_u4ED3_u5E93\" title=\"1\\. 使用github创建博客仓库\"></a>1. 使用github创建博客仓库</h4><p>在github上创建一个仓库，<strong>仓库的名字和用户名必须对应</strong>，如我的帐户名为<code>Xiaojuanmao</code>,则创建的仓库名称为<code>Xiaojuanmao.github.io</code>。这样存放在github上的远程仓库就准备好了，下面来用hexo来初始化本地的仓库内容。</p>\n<h4 id=\"2-Hexo初始化\"><a href=\"#2-Hexo初始化\" class=\"headerlink\" title=\"2. Hexo初始化\"></a><a href=\"#2-_Hexo_u521D_u59CB_u5316\" title=\"2\\. Hexo初始化\"></a>2. Hexo初始化</h4><p>在主文件夹下创建一个hexo文件夹，进入文件夹，在终端输入如下的命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div></pre></td></tr></table></figure>\n<p>会给出这样的反馈：<code>INFO Copying data to ~/hexo INFO You are almost done! Don&#39;t forget to run &#39;npm install&#39; before you start blogging with Hexo!</code><br>接着按照上面的提示，输入命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<p>会自动在目录下面安装node_modules。接着在命令行中启动本地的服务器，可以用来预览个人博客的样子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server</div></pre></td></tr></table></figure>\n<p>反馈信息会提示已经在挂在了本地的服务器：<code>INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code></p>\n<p>在浏览器中打开<code>http://0.0.0.0&quot;4000/</code>可以看到网页的整个框架已经生成了。有个默认的主题，如果觉得这个主题不好看，hexo还有好多主题可供更换。</p>\n<h4 id=\"3-添加文章\"><a href=\"#3-添加文章\" class=\"headerlink\" title=\"3. 添加文章\"></a><a href=\"#3-__u6DFB_u52A0_u6587_u7AE0\" title=\"3\\. 添加文章\"></a>3. 添加文章</h4><p>打开命令行，进入到hexo的目录下，利用如下的命令，可以新建一个.md格式的文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new &quot;My New Post&quot;</div><div class=\"line\">反馈信息：INFO  Created: ~/hexo/source/_posts/My-New-Post.md</div></pre></td></tr></table></figure>\n<p>刷新刚才的<code>localhost:4000</code>，就能看到一篇新的博客出现了，用起来还是炒鸡方便的。创建之后再去编辑这个.md文件，写自己想写的内容就可以了。</p>\n<h4 id=\"4-生成静态网页\"><a href=\"#4-生成静态网页\" class=\"headerlink\" title=\"4. 生成静态网页\"></a><a href=\"#4-__u751F_u6210_u9759_u6001_u7F51_u9875\" title=\"4\\. 生成静态网页\"></a>4. 生成静态网页</h4><p>下面的命令生成静态的网页，在将本地的内容部署到github上面去之前，一定要先执行这个步骤。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate</div><div class=\"line\">   或者 hexo g</div></pre></td></tr></table></figure>\n<p>执行完之后，会在./public的目录下生成一系列的.html,.css文件。</p>\n<h4 id=\"5-部署到Github\"><a href=\"#5-部署到Github\" class=\"headerlink\" title=\"5. 部署到Github\"></a><a href=\"#5-__u90E8_u7F72_u5230Github\" title=\"5\\. 部署到Github\"></a>5. 部署到Github</h4><p>在和github完成对接之前，需要去配置hexo自己的配置文件<code>_config.yml</code>。关于这个文件里面的一些内容，需要进行一些修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Hexo Configuration</div><div class=\"line\">## Docs: http://hexo.io/docs/configuration.html</div><div class=\"line\">## Source: https://github.com/hexojs/hexo/</div><div class=\"line\"></div><div class=\"line\"># Site</div><div class=\"line\">title: Xiaojuanmao&apos;s Blog # 网站的标题</div><div class=\"line\">subtitle: Life began in 1990 # 网站的副标题</div><div class=\"line\">description: Coding Life # 显示在网页最下面的描述，类似于tag</div><div class=\"line\">author: Xiaoxiaoda</div><div class=\"line\">email: daque@hustunique.com</div><div class=\"line\">language: zh_CN</div><div class=\"line\">timezone:</div><div class=\"line\"></div><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: http://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git #这里不要写github了，hexo3.0之后用git代替了github</div><div class=\"line\">  repository: git@github.com:Xiaojuanmao/Xiaojuanmao.github.io.git # 填写自己的git仓库地址，之前创建好了的</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p>更改完配置文件之后保存，通过下面的命令部署到github上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate 或者 hexo g  #生成静态网页</div><div class=\"line\">hexo deploy 或者 hexo d #部署到github</div><div class=\"line\">上面两个命令可以和并为 hexo d -g</div></pre></td></tr></table></figure>\n<p><strong>Note</strong><br>部署的过程中可能会出现如下的问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ERROR Deployer not found: github</div></pre></td></tr></table></figure>\n<p>遇到这个不要慌，是hexo升级到3.0之后用git代替了github，所以需要再输入下面的命令，安装git的deployer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p>安装之后就可以将静态的网页部署到github的远程仓库上面。</p>\n","excerpt":"<h1 id=\"Ubuntu上结合Github用Hexo搭建博客\"><a href=\"#Ubuntu上结合Github用Hexo搭建博客\" class=\"headerlink\" title=\"Ubuntu上结合Github用Hexo搭建博客\"></a>Ubuntu上结合Github用Hexo搭建博客</h1><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a><a href=\"#u7B80_u4ECB\" title=\"简介\"></a>简介</h3><p>在搭建博客的过程中会涉及到下面这些东西：</p>\n<ol>\n<li>Hexo</li>\n<li>Git</li>\n<li>Github Pages</li>\n<li>Npm</li>\n<li>Nodejs</li>\n</ol>\n<p><strong><a href=\"https://github.com/hexojs/hexo\">Hexo</a></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">一款基于Node.js的简单、快速、强大的静态博客框架</div></pre></td></tr></table></figure>","more":"<p><strong>Hexo搭建博客和github有什么关系</strong></p>\n<p>那Hexo就是一个博客框架，关Github什么事情呢，这还被你说对了，还真不怎么和github相关，用hexo弄一个博客出来很简单。当然你也可以选择用wordpress来结合hexo，只是这里选择用github pages服务，那又说到了一个东西:<strong>github pages</strong>。</p>\n<p><strong><a href=\"https://pages.github.com/\">Github Pages</a></strong></p>\n<p>上面是网址，可以自己进去看看，简单的说就是github提供的一种用来展示托管在自己github仓库上的静态网页。github pages也有自己的一套框架，只用github pages也可以搭建自己的博客。</p>\n<p><strong><a href=\"https://www.npmjs.com/\">Npm</a></strong></p>\n<p>一个NodeJs包管理和分发工具，全称为Node Package Manager。和Ruby的gem，Python的pypi类似。通过npm能快速的部署hexo框架，毕竟hexo基于nodejs。</p>\n<p><strong><a href=\"https://nodejs.org/en/\">Node.js</a></strong></p>\n<p>Node是一个Javascript运行环境(runtime)。实际上它是对Google V8引擎进行了封装。V8引 擎执行Javascript的速度非常快，性能非常好。Node对一些特殊用例进行了优化，提供了替代的API，使得V8在非浏览器环境下运行得更好。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a><a href=\"#u5B89_u88C5\" title=\"安装\"></a>安装</h3><h4 id=\"1-安装Node-js\"><a href=\"#1-安装Node-js\" class=\"headerlink\" title=\"1. 安装Node.js\"></a><a href=\"#1-__u5B89_u88C5Node-js\" title=\"1\\. 安装Node.js\"></a>1. 安装Node.js</h4><p>在Ubuntu下面部署很容易的= =,在终端输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install --yes nodejs</div></pre></td></tr></table></figure>\n<p>Nodejs的部署工作就完成了。其他的Linux发行版可以参照下面的教程<a href=\"https://github.com/nodejs/node-v0.x-archive/wiki/Installing-Node.js-via-package-manager\">Installing Node.js via package manager</a></p>\n<p>也可以在Node的官网上直接<a href=\"https://nodejs.org/en/download/\">下载</a>安装。</p>\n<p>安装好之后，在终端输入nodejs即可进入到nodejs的交互模式中。</p>\n<p><strong>Note</strong><br>需要注意一个问题就是，在hexo中的nodejs文件在运行时使用的是<code>node xxx/js</code>这样的形式，而在Ubuntu下面直接运行<code>node xxx.js</code>会失败，报错为<code>/usr/bin/env: node: No such file or directory</code>，网上有些说是和node的版本有关，实际上是因为NodeJs在Ubuntu上默认安装之后，需要<code>nodejs xxx.js</code>这样用，解决方法为创建如下软链接，保证可以运行<code>node xxx.js</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ln -s /usr/bin/nodejs /usr/bin/node</div></pre></td></tr></table></figure>\n<h4 id=\"2-安装npm\"><a href=\"#2-安装npm\" class=\"headerlink\" title=\"2. 安装npm\"></a><a href=\"#2-__u5B89_u88C5npm\" title=\"2\\. 安装npm\"></a>2. 安装npm</h4><p>在终端输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install npm</div></pre></td></tr></table></figure>\n<h4 id=\"3-安装hexo\"><a href=\"#3-安装hexo\" class=\"headerlink\" title=\"3. 安装hexo\"></a><a href=\"#3-__u5B89_u88C5hexo\" title=\"3\\. 安装hexo\"></a>3. 安装hexo</h4><p>终端输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-cli -g</div></pre></td></tr></table></figure>\n<p>在这里可能会报错，由于没有root权限导致无法安装hexo，<code>sudo su</code>root一下再安装一次就好了。</p>\n<p>到这里就完成了对Hexo的初步安装了，直接在终端输入<code>hexo</code>会出现相关的信息。</p>\n<h4 id=\"4-安装git\"><a href=\"#4-安装git\" class=\"headerlink\" title=\"4. 安装git\"></a><a href=\"#4-__u5B89_u88C5git\" title=\"4\\. 安装git\"></a>4. 安装git</h4><p>首先安装git</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install git</div></pre></td></tr></table></figure>\n<p>设置用户信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name &quot;Xiaojuanmao&quot;//用户名</div><div class=\"line\">$ git config --global user.email  &quot;daque@hustunique.com&quot;//填写自己的邮箱</div></pre></td></tr></table></figure>\n<p>检查SSH keys</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~/. ssh</div></pre></td></tr></table></figure>\n<p>如果提示No such file or directory 说明你是第一次使用git。按照如下步骤处理SSH Keys，如果存在SSH Keys，则直接跳过下面分割线内的部分。</p>\n<hr>\n<p><strong>配置SSH Keys</strong></p>\n<ul>\n<li><p>生成新的SSH Keys</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;</div></pre></td></tr></table></figure>\n<p>会出现下面的提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter file in which to save the key</div><div class=\"line\">(/Users/your_user_directory/.ssh/id_rsa):</div></pre></td></tr></table></figure>\n<p>直接回车，存储在默认的目录下面。系统会提示输入密码，密码的作用是在向仓库提交代码的时候用到，可以防止其他人向自己的仓库提交代码。输入密码后，相关的会生成.ssh文件。</p>\n</li>\n<li><p>添加新的SSH Keys到GitHub</p>\n<p>通过下面的命令进入目录，该目录下存放着刚才生成的密钥文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~/. ssh</div></pre></td></tr></table></figure>\n<p>登陆github系统。点击右上角的 Account Settings—-&gt;SSH Public keys —-&gt; add another public keys。打开刚才目录下面的<code>id_rsa.pub</code>文件，将文件内容复制到key文本框中就可以了。</p>\n</li>\n<li><p>测试SSH<br>可以输入下面的命令，测试SSH是否设置成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh -T git@github.com</div></pre></td></tr></table></figure>\n<p>如果出现下面的信息，则说明设置成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hi XXX! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure>\n<p><strong>Note</strong><br>也可能会报出错误：<code>Agent admitted failure to sign using the key.Permission denied (publickey).</code>这是由于没有将新建的ssh密钥加入，下面的命令可以解决：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-add   ~/.ssh/id_rsa</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a><a href=\"#u4F7F_u7528\" title=\"使用\"></a>使用</h3><h4 id=\"1-使用github创建博客仓库\"><a href=\"#1-使用github创建博客仓库\" class=\"headerlink\" title=\"1. 使用github创建博客仓库\"></a><a href=\"#1-__u4F7F_u7528github_u521B_u5EFA_u535A_u5BA2_u4ED3_u5E93\" title=\"1\\. 使用github创建博客仓库\"></a>1. 使用github创建博客仓库</h4><p>在github上创建一个仓库，<strong>仓库的名字和用户名必须对应</strong>，如我的帐户名为<code>Xiaojuanmao</code>,则创建的仓库名称为<code>Xiaojuanmao.github.io</code>。这样存放在github上的远程仓库就准备好了，下面来用hexo来初始化本地的仓库内容。</p>\n<h4 id=\"2-Hexo初始化\"><a href=\"#2-Hexo初始化\" class=\"headerlink\" title=\"2. Hexo初始化\"></a><a href=\"#2-_Hexo_u521D_u59CB_u5316\" title=\"2\\. Hexo初始化\"></a>2. Hexo初始化</h4><p>在主文件夹下创建一个hexo文件夹，进入文件夹，在终端输入如下的命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div></pre></td></tr></table></figure>\n<p>会给出这样的反馈：<code>INFO Copying data to ~/hexo INFO You are almost done! Don&#39;t forget to run &#39;npm install&#39; before you start blogging with Hexo!</code><br>接着按照上面的提示，输入命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<p>会自动在目录下面安装node_modules。接着在命令行中启动本地的服务器，可以用来预览个人博客的样子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server</div></pre></td></tr></table></figure>\n<p>反馈信息会提示已经在挂在了本地的服务器：<code>INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code></p>\n<p>在浏览器中打开<code>http://0.0.0.0&quot;4000/</code>可以看到网页的整个框架已经生成了。有个默认的主题，如果觉得这个主题不好看，hexo还有好多主题可供更换。</p>\n<h4 id=\"3-添加文章\"><a href=\"#3-添加文章\" class=\"headerlink\" title=\"3. 添加文章\"></a><a href=\"#3-__u6DFB_u52A0_u6587_u7AE0\" title=\"3\\. 添加文章\"></a>3. 添加文章</h4><p>打开命令行，进入到hexo的目录下，利用如下的命令，可以新建一个.md格式的文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new &quot;My New Post&quot;</div><div class=\"line\">反馈信息：INFO  Created: ~/hexo/source/_posts/My-New-Post.md</div></pre></td></tr></table></figure>\n<p>刷新刚才的<code>localhost:4000</code>，就能看到一篇新的博客出现了，用起来还是炒鸡方便的。创建之后再去编辑这个.md文件，写自己想写的内容就可以了。</p>\n<h4 id=\"4-生成静态网页\"><a href=\"#4-生成静态网页\" class=\"headerlink\" title=\"4. 生成静态网页\"></a><a href=\"#4-__u751F_u6210_u9759_u6001_u7F51_u9875\" title=\"4\\. 生成静态网页\"></a>4. 生成静态网页</h4><p>下面的命令生成静态的网页，在将本地的内容部署到github上面去之前，一定要先执行这个步骤。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate</div><div class=\"line\">   或者 hexo g</div></pre></td></tr></table></figure>\n<p>执行完之后，会在./public的目录下生成一系列的.html,.css文件。</p>\n<h4 id=\"5-部署到Github\"><a href=\"#5-部署到Github\" class=\"headerlink\" title=\"5. 部署到Github\"></a><a href=\"#5-__u90E8_u7F72_u5230Github\" title=\"5\\. 部署到Github\"></a>5. 部署到Github</h4><p>在和github完成对接之前，需要去配置hexo自己的配置文件<code>_config.yml</code>。关于这个文件里面的一些内容，需要进行一些修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Hexo Configuration</div><div class=\"line\">## Docs: http://hexo.io/docs/configuration.html</div><div class=\"line\">## Source: https://github.com/hexojs/hexo/</div><div class=\"line\"></div><div class=\"line\"># Site</div><div class=\"line\">title: Xiaojuanmao&apos;s Blog # 网站的标题</div><div class=\"line\">subtitle: Life began in 1990 # 网站的副标题</div><div class=\"line\">description: Coding Life # 显示在网页最下面的描述，类似于tag</div><div class=\"line\">author: Xiaoxiaoda</div><div class=\"line\">email: daque@hustunique.com</div><div class=\"line\">language: zh_CN</div><div class=\"line\">timezone:</div><div class=\"line\"></div><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: http://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git #这里不要写github了，hexo3.0之后用git代替了github</div><div class=\"line\">  repository: git@github.com:Xiaojuanmao/Xiaojuanmao.github.io.git # 填写自己的git仓库地址，之前创建好了的</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p>更改完配置文件之后保存，通过下面的命令部署到github上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate 或者 hexo g  #生成静态网页</div><div class=\"line\">hexo deploy 或者 hexo d #部署到github</div><div class=\"line\">上面两个命令可以和并为 hexo d -g</div></pre></td></tr></table></figure>\n<p><strong>Note</strong><br>部署的过程中可能会出现如下的问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ERROR Deployer not found: github</div></pre></td></tr></table></figure>\n<p>遇到这个不要慌，是hexo升级到3.0之后用git代替了github，所以需要再输入下面的命令，安装git的deployer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p>安装之后就可以将静态的网页部署到github的远程仓库上面。</p>"},{"title":"React-Native笔记(三)","date":"2017-02-24T03:36:14.000Z","_content":"## React-Native笔记(三)\n\n### 网络\n`React Native`提供了和web标准一直的`Fetch API`来满足网络获取数据的需求。\n\n**发起网络请求**\n获取固定地址内容，不进行处理\n```\nfetch('https://www.baidu.com')\n```\n\n<!--more-->\n\n获取内容并对数据进行加工\n\n```\n fetch('http://bbs.reactnative.cn/api/category/3')\n            .then((response) => response.json())\n            .then((jsonData) => {\n                this.setState({\n                    title: jsonData.topics[0].title,\n                })\n            })\n            .catch((error) => {\n                console.warn(error);\n            })\n```\n\n### WebSocket支持\n对`websocket`支持，可以在单个TCP连接上提供全双工的通信通道。\n\n```\nvar ws = new WebSocket('ws://host.com/path');\n\nws.onopen = () => {\n  // 打开一个连接\n\n  ws.send('something'); // 发送一个消息\n};\n\nws.onmessage = (e) => {\n  // 接收到了一个消息\n  console.log(e.data);\n};\n\nws.onerror = (e) => {\n  // 发生了一个错误\n  console.log(e.message);\n};\n\nws.onclose = (e) => {\n  // 连接被关闭了\n  console.log(e.code, e.reason);\n};\n```\n\n### 页面跳转\n\n**场景(Scene)**\n各种组件组合在一起，形成了一个界面，也就是一个场景\n\n一个简单的场景如下：\n```\nMyScene.js\n\nimport React, { Component } from 'react';\nimport { View, Text } from 'react-native';\n\n/**\n * 导出当前组件\n */\n\nexport default class MyScene extends Component {\n    static defaultProps = {\n        title: 'MyScene',\n    };\n\n    render() {\n        return (\n            <View>\n                <Text>Hi ! My name is {this.props.title} </Text>\n            </View>\n        )\n    }\n}\n```\n\n**Navigator**\n官方首推`Navigator`来作为导航器组件，实现界面跳转,先渲染出一个`Navigator`组件，通过`Navigator`的`renderScene`属性来渲染其他的`Scene`。将之前的那个场景给渲染进来。\n\n**单个渲染**\n\n```\n <Navigator\n                initialRoute={{title: 'My Initial Scene', index: 0}}\n                renderScene={(route, navigator) => {\n                    return <MyScene title={route.title} />\n                }}\n            />\n```\n使用导航器经常会碰到“路由(route)”的概念。“路由”抽象自现实生活中的路牌，在RN中专指包含了场景信息的对象。\n```\n\n\n**实现跳转**\n场景之间的切换，`navigator`提供了两个主要的方法：\n* `push` 将`route`对象推入并渲染\n* `pop` 将`route`对象弹出导航栈\n\n**基本场景**\n```\nimport React, { Component, PropTypes } from 'react';\nimport { View, Text, TouchableHighlight } from 'react-native';\n\nexport default class MyScene extends Component {\n  static propTypes = {\n    title: PropTypes.string.isRequired,\n    onForward: PropTypes.func.isRequired,\n    onBack: PropTypes.func.isRequired,\n  }\n  render() {\n    return (\n      <View>\n        <Text>Current Scene: { this.props.title }</Text>\n        <TouchableHighlight onPress={this.props.onForward}>\n          <Text>点我进入下一场景</Text>\n        </TouchableHighlight>\n        <TouchableHighlight onPress={this.props.onBack}>\n          <Text>点我返回上一场景</Text>\n        </TouchableHighlight>    \n      </View>\n    )\n  }\n}\n```\n\n**导航器**\n\n```\nimport React, {Component} from 'react';\nimport {AppRegistry, Navigator, Text, View} from 'react-native';\n\nimport MyScene from './MyScene';\n\nclass AwesomeProject extends Component {\n\n    render() {\n        return (\n            <Navigator\n                initialRoute={{title: 'My Initial Scene', index: 0}}\n                renderScene={(route, navigator) => {\n                    return <MyScene title={route.title}\n\n                     onForward= { () => {\n                         const nextIndex = route.index + 1;\n                         navigator.push({\n                             title: 'Scene ' + nextIndex,\n                             index: nextIndex\n                         });\n                     }}\n\n                     onBack= { () => {\n                         if (route.index > 0) {\n                             navigator.pop();\n                         }\n                     }}\n\n                     />\n                }}\n            />\n        );\n    }\n\n}\n\nAppRegistry.registerComponent('AwesomeProject', () => AwesomeProject);\n```","source":"_posts/React-Native笔记-三.md","raw":"---\ntitle: React-Native笔记(三)\ndate: 2017-02-24 11:36:14\ntags: React-Native\n\n---\n## React-Native笔记(三)\n\n### 网络\n`React Native`提供了和web标准一直的`Fetch API`来满足网络获取数据的需求。\n\n**发起网络请求**\n获取固定地址内容，不进行处理\n```\nfetch('https://www.baidu.com')\n```\n\n<!--more-->\n\n获取内容并对数据进行加工\n\n```\n fetch('http://bbs.reactnative.cn/api/category/3')\n            .then((response) => response.json())\n            .then((jsonData) => {\n                this.setState({\n                    title: jsonData.topics[0].title,\n                })\n            })\n            .catch((error) => {\n                console.warn(error);\n            })\n```\n\n### WebSocket支持\n对`websocket`支持，可以在单个TCP连接上提供全双工的通信通道。\n\n```\nvar ws = new WebSocket('ws://host.com/path');\n\nws.onopen = () => {\n  // 打开一个连接\n\n  ws.send('something'); // 发送一个消息\n};\n\nws.onmessage = (e) => {\n  // 接收到了一个消息\n  console.log(e.data);\n};\n\nws.onerror = (e) => {\n  // 发生了一个错误\n  console.log(e.message);\n};\n\nws.onclose = (e) => {\n  // 连接被关闭了\n  console.log(e.code, e.reason);\n};\n```\n\n### 页面跳转\n\n**场景(Scene)**\n各种组件组合在一起，形成了一个界面，也就是一个场景\n\n一个简单的场景如下：\n```\nMyScene.js\n\nimport React, { Component } from 'react';\nimport { View, Text } from 'react-native';\n\n/**\n * 导出当前组件\n */\n\nexport default class MyScene extends Component {\n    static defaultProps = {\n        title: 'MyScene',\n    };\n\n    render() {\n        return (\n            <View>\n                <Text>Hi ! My name is {this.props.title} </Text>\n            </View>\n        )\n    }\n}\n```\n\n**Navigator**\n官方首推`Navigator`来作为导航器组件，实现界面跳转,先渲染出一个`Navigator`组件，通过`Navigator`的`renderScene`属性来渲染其他的`Scene`。将之前的那个场景给渲染进来。\n\n**单个渲染**\n\n```\n <Navigator\n                initialRoute={{title: 'My Initial Scene', index: 0}}\n                renderScene={(route, navigator) => {\n                    return <MyScene title={route.title} />\n                }}\n            />\n```\n使用导航器经常会碰到“路由(route)”的概念。“路由”抽象自现实生活中的路牌，在RN中专指包含了场景信息的对象。\n```\n\n\n**实现跳转**\n场景之间的切换，`navigator`提供了两个主要的方法：\n* `push` 将`route`对象推入并渲染\n* `pop` 将`route`对象弹出导航栈\n\n**基本场景**\n```\nimport React, { Component, PropTypes } from 'react';\nimport { View, Text, TouchableHighlight } from 'react-native';\n\nexport default class MyScene extends Component {\n  static propTypes = {\n    title: PropTypes.string.isRequired,\n    onForward: PropTypes.func.isRequired,\n    onBack: PropTypes.func.isRequired,\n  }\n  render() {\n    return (\n      <View>\n        <Text>Current Scene: { this.props.title }</Text>\n        <TouchableHighlight onPress={this.props.onForward}>\n          <Text>点我进入下一场景</Text>\n        </TouchableHighlight>\n        <TouchableHighlight onPress={this.props.onBack}>\n          <Text>点我返回上一场景</Text>\n        </TouchableHighlight>    \n      </View>\n    )\n  }\n}\n```\n\n**导航器**\n\n```\nimport React, {Component} from 'react';\nimport {AppRegistry, Navigator, Text, View} from 'react-native';\n\nimport MyScene from './MyScene';\n\nclass AwesomeProject extends Component {\n\n    render() {\n        return (\n            <Navigator\n                initialRoute={{title: 'My Initial Scene', index: 0}}\n                renderScene={(route, navigator) => {\n                    return <MyScene title={route.title}\n\n                     onForward= { () => {\n                         const nextIndex = route.index + 1;\n                         navigator.push({\n                             title: 'Scene ' + nextIndex,\n                             index: nextIndex\n                         });\n                     }}\n\n                     onBack= { () => {\n                         if (route.index > 0) {\n                             navigator.pop();\n                         }\n                     }}\n\n                     />\n                }}\n            />\n        );\n    }\n\n}\n\nAppRegistry.registerComponent('AwesomeProject', () => AwesomeProject);\n```","slug":"React-Native笔记-三","published":1,"updated":"2017-02-24T03:38:19.932Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizj9pq0c00012gj938s81edv","content":"<h2 id=\"React-Native笔记-三\"><a href=\"#React-Native笔记-三\" class=\"headerlink\" title=\"React-Native笔记(三)\"></a>React-Native笔记(三)</h2><h3 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h3><p><code>React Native</code>提供了和web标准一直的<code>Fetch API</code>来满足网络获取数据的需求。</p>\n<p><strong>发起网络请求</strong><br>获取固定地址内容，不进行处理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fetch(&apos;https://www.baidu.com&apos;)</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>获取内容并对数据进行加工</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">fetch(&apos;http://bbs.reactnative.cn/api/category/3&apos;)</div><div class=\"line\">           .then((response) =&gt; response.json())</div><div class=\"line\">           .then((jsonData) =&gt; &#123;</div><div class=\"line\">               this.setState(&#123;</div><div class=\"line\">                   title: jsonData.topics[0].title,</div><div class=\"line\">               &#125;)</div><div class=\"line\">           &#125;)</div><div class=\"line\">           .catch((error) =&gt; &#123;</div><div class=\"line\">               console.warn(error);</div><div class=\"line\">           &#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"WebSocket支持\"><a href=\"#WebSocket支持\" class=\"headerlink\" title=\"WebSocket支持\"></a>WebSocket支持</h3><p>对<code>websocket</code>支持，可以在单个TCP连接上提供全双工的通信通道。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">var ws = new WebSocket(&apos;ws://host.com/path&apos;);</div><div class=\"line\"></div><div class=\"line\">ws.onopen = () =&gt; &#123;</div><div class=\"line\">  // 打开一个连接</div><div class=\"line\"></div><div class=\"line\">  ws.send(&apos;something&apos;); // 发送一个消息</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">ws.onmessage = (e) =&gt; &#123;</div><div class=\"line\">  // 接收到了一个消息</div><div class=\"line\">  console.log(e.data);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">ws.onerror = (e) =&gt; &#123;</div><div class=\"line\">  // 发生了一个错误</div><div class=\"line\">  console.log(e.message);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">ws.onclose = (e) =&gt; &#123;</div><div class=\"line\">  // 连接被关闭了</div><div class=\"line\">  console.log(e.code, e.reason);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"页面跳转\"><a href=\"#页面跳转\" class=\"headerlink\" title=\"页面跳转\"></a>页面跳转</h3><p><strong>场景(Scene)</strong><br>各种组件组合在一起，形成了一个界面，也就是一个场景</p>\n<p>一个简单的场景如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">MyScene.js</div><div class=\"line\"></div><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\">import &#123; View, Text &#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 导出当前组件</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">export default class MyScene extends Component &#123;</div><div class=\"line\">    static defaultProps = &#123;</div><div class=\"line\">        title: &apos;MyScene&apos;,</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    render() &#123;</div><div class=\"line\">        return (</div><div class=\"line\">            &lt;View&gt;</div><div class=\"line\">                &lt;Text&gt;Hi ! My name is &#123;this.props.title&#125; &lt;/Text&gt;</div><div class=\"line\">            &lt;/View&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>Navigator</strong><br>官方首推<code>Navigator</code>来作为导航器组件，实现界面跳转,先渲染出一个<code>Navigator</code>组件，通过<code>Navigator</code>的<code>renderScene</code>属性来渲染其他的<code>Scene</code>。将之前的那个场景给渲染进来。</p>\n<p><strong>单个渲染</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Navigator</div><div class=\"line\">               initialRoute=&#123;&#123;title: &apos;My Initial Scene&apos;, index: 0&#125;&#125;</div><div class=\"line\">               renderScene=&#123;(route, navigator) =&gt; &#123;</div><div class=\"line\">                   return &lt;MyScene title=&#123;route.title&#125; /&gt;</div><div class=\"line\">               &#125;&#125;</div><div class=\"line\">           /&gt;</div></pre></td></tr></table></figure>\n<p>使用导航器经常会碰到“路由(route)”的概念。“路由”抽象自现实生活中的路牌，在RN中专指包含了场景信息的对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">**实现跳转**</div><div class=\"line\">场景之间的切换，`navigator`提供了两个主要的方法：</div><div class=\"line\">* `push` 将`route`对象推入并渲染</div><div class=\"line\">* `pop` 将`route`对象弹出导航栈</div><div class=\"line\"></div><div class=\"line\">**基本场景**</div></pre></td></tr></table></figure></p>\n<p>import React, { Component, PropTypes } from ‘react’;<br>import { View, Text, TouchableHighlight } from ‘react-native’;</p>\n<p>export default class MyScene extends Component {<br>  static propTypes = {<br>    title: PropTypes.string.isRequired,<br>    onForward: PropTypes.func.isRequired,<br>    onBack: PropTypes.func.isRequired,<br>  }<br>  render() {<br>    return (<br>      <view><br>        <text>Current Scene: { this.props.title }</text><br>        <touchablehighlight onpress=\"{this.props.onForward}\"><br>          <text>点我进入下一场景</text><br>        </touchablehighlight><br>        <touchablehighlight onpress=\"{this.props.onBack}\"><br>          <text>点我返回上一场景</text><br>        </touchablehighlight><br>      </view><br>    )<br>  }<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">**导航器**</div></pre></td></tr></table></figure></p>\n<p>import React, {Component} from ‘react’;<br>import {AppRegistry, Navigator, Text, View} from ‘react-native’;</p>\n<p>import MyScene from ‘./MyScene’;</p>\n<p>class AwesomeProject extends Component {</p>\n<pre><code>render() {\n    return (\n        &lt;Navigator\n            initialRoute={{title: 'My Initial Scene', index: 0}}\n            renderScene={(route, navigator) =&gt; {\n                return &lt;MyScene title={route.title}\n\n                 onForward= { () =&gt; {\n                     const nextIndex = route.index + 1;\n                     navigator.push({\n                         title: &apos;Scene &apos; + nextIndex,\n                         index: nextIndex\n                     });\n                 }}\n\n                 onBack= { () =&gt; {\n                     if (route.index &gt; 0) {\n                         navigator.pop();\n                     }\n                 }}\n\n                 /&gt;\n            }}\n        /&gt;\n    );\n}\n</code></pre><p>}</p>\n<p>AppRegistry.registerComponent(‘AwesomeProject’, () =&gt; AwesomeProject);<br>```</p>\n","excerpt":"<h2 id=\"React-Native笔记-三\"><a href=\"#React-Native笔记-三\" class=\"headerlink\" title=\"React-Native笔记(三)\"></a>React-Native笔记(三)</h2><h3 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h3><p><code>React Native</code>提供了和web标准一直的<code>Fetch API</code>来满足网络获取数据的需求。</p>\n<p><strong>发起网络请求</strong><br>获取固定地址内容，不进行处理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fetch(&apos;https://www.baidu.com&apos;)</div></pre></td></tr></table></figure></p>","more":"<p>获取内容并对数据进行加工</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">fetch(&apos;http://bbs.reactnative.cn/api/category/3&apos;)</div><div class=\"line\">           .then((response) =&gt; response.json())</div><div class=\"line\">           .then((jsonData) =&gt; &#123;</div><div class=\"line\">               this.setState(&#123;</div><div class=\"line\">                   title: jsonData.topics[0].title,</div><div class=\"line\">               &#125;)</div><div class=\"line\">           &#125;)</div><div class=\"line\">           .catch((error) =&gt; &#123;</div><div class=\"line\">               console.warn(error);</div><div class=\"line\">           &#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"WebSocket支持\"><a href=\"#WebSocket支持\" class=\"headerlink\" title=\"WebSocket支持\"></a>WebSocket支持</h3><p>对<code>websocket</code>支持，可以在单个TCP连接上提供全双工的通信通道。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">var ws = new WebSocket(&apos;ws://host.com/path&apos;);</div><div class=\"line\"></div><div class=\"line\">ws.onopen = () =&gt; &#123;</div><div class=\"line\">  // 打开一个连接</div><div class=\"line\"></div><div class=\"line\">  ws.send(&apos;something&apos;); // 发送一个消息</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">ws.onmessage = (e) =&gt; &#123;</div><div class=\"line\">  // 接收到了一个消息</div><div class=\"line\">  console.log(e.data);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">ws.onerror = (e) =&gt; &#123;</div><div class=\"line\">  // 发生了一个错误</div><div class=\"line\">  console.log(e.message);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">ws.onclose = (e) =&gt; &#123;</div><div class=\"line\">  // 连接被关闭了</div><div class=\"line\">  console.log(e.code, e.reason);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"页面跳转\"><a href=\"#页面跳转\" class=\"headerlink\" title=\"页面跳转\"></a>页面跳转</h3><p><strong>场景(Scene)</strong><br>各种组件组合在一起，形成了一个界面，也就是一个场景</p>\n<p>一个简单的场景如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">MyScene.js</div><div class=\"line\"></div><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\">import &#123; View, Text &#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 导出当前组件</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">export default class MyScene extends Component &#123;</div><div class=\"line\">    static defaultProps = &#123;</div><div class=\"line\">        title: &apos;MyScene&apos;,</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    render() &#123;</div><div class=\"line\">        return (</div><div class=\"line\">            &lt;View&gt;</div><div class=\"line\">                &lt;Text&gt;Hi ! My name is &#123;this.props.title&#125; &lt;/Text&gt;</div><div class=\"line\">            &lt;/View&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>Navigator</strong><br>官方首推<code>Navigator</code>来作为导航器组件，实现界面跳转,先渲染出一个<code>Navigator</code>组件，通过<code>Navigator</code>的<code>renderScene</code>属性来渲染其他的<code>Scene</code>。将之前的那个场景给渲染进来。</p>\n<p><strong>单个渲染</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Navigator</div><div class=\"line\">               initialRoute=&#123;&#123;title: &apos;My Initial Scene&apos;, index: 0&#125;&#125;</div><div class=\"line\">               renderScene=&#123;(route, navigator) =&gt; &#123;</div><div class=\"line\">                   return &lt;MyScene title=&#123;route.title&#125; /&gt;</div><div class=\"line\">               &#125;&#125;</div><div class=\"line\">           /&gt;</div></pre></td></tr></table></figure>\n<p>使用导航器经常会碰到“路由(route)”的概念。“路由”抽象自现实生活中的路牌，在RN中专指包含了场景信息的对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">**实现跳转**</div><div class=\"line\">场景之间的切换，`navigator`提供了两个主要的方法：</div><div class=\"line\">* `push` 将`route`对象推入并渲染</div><div class=\"line\">* `pop` 将`route`对象弹出导航栈</div><div class=\"line\"></div><div class=\"line\">**基本场景**</div></pre></td></tr></table></figure></p>\n<p>import React, { Component, PropTypes } from ‘react’;<br>import { View, Text, TouchableHighlight } from ‘react-native’;</p>\n<p>export default class MyScene extends Component {<br>  static propTypes = {<br>    title: PropTypes.string.isRequired,<br>    onForward: PropTypes.func.isRequired,<br>    onBack: PropTypes.func.isRequired,<br>  }<br>  render() {<br>    return (<br>      <View><br>        <Text>Current Scene: { this.props.title }</Text><br>        <TouchableHighlight onPress={this.props.onForward}><br>          <Text>点我进入下一场景</Text><br>        </TouchableHighlight><br>        <TouchableHighlight onPress={this.props.onBack}><br>          <Text>点我返回上一场景</Text><br>        </TouchableHighlight><br>      </View><br>    )<br>  }<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">**导航器**</div></pre></td></tr></table></figure></p>\n<p>import React, {Component} from ‘react’;<br>import {AppRegistry, Navigator, Text, View} from ‘react-native’;</p>\n<p>import MyScene from ‘./MyScene’;</p>\n<p>class AwesomeProject extends Component {</p>\n<pre><code>render() {\n    return (\n        &lt;Navigator\n            initialRoute={{title: 'My Initial Scene', index: 0}}\n            renderScene={(route, navigator) =&gt; {\n                return &lt;MyScene title={route.title}\n\n                 onForward= { () =&gt; {\n                     const nextIndex = route.index + 1;\n                     navigator.push({\n                         title: &apos;Scene &apos; + nextIndex,\n                         index: nextIndex\n                     });\n                 }}\n\n                 onBack= { () =&gt; {\n                     if (route.index &gt; 0) {\n                         navigator.pop();\n                     }\n                 }}\n\n                 /&gt;\n            }}\n        /&gt;\n    );\n}\n</code></pre><p>}</p>\n<p>AppRegistry.registerComponent(‘AwesomeProject’, () =&gt; AwesomeProject);<br>```</p>"},{"title":"React-Native笔记(二)","date":"2017-02-24T03:36:10.000Z","_content":"\n## React-Native笔记(二)\n\n### 图片\n\n**静态图片**\n引用图片只需要将图片文件放在项目文件夹中，指定路径引用\n\n```\n<Image source={require('./my-icon.png')} />\n```\n系统会从一个引用了图片的组件所在的根目录出发，去寻找这张图片。\n提供`@2x`,`@3x`来指明图片的精度。\n使用`my-icon.ios.png`以及`my-icon.android.png`来提供不同平台的图片。\n\n<!--more-->\n\n在`require()`里面的图片名字必须为静态字符串\n\n> 加入新的图片资源后，可能需要重启packager引入新的图片资源\n\n**原生与React Native**\n使用react native的时候也能够使用原生打包的资源文件\n\n```\n<Image source={{uri: 'app_icon'}} style={{width: 40, height: 40}} />\n```\n\n> 这一做法并没有任何安全检查。你需要自己确保图片在应用中确实存在，而且还需要指定尺寸。\n\n\n**网络图片**\n使用网络图片的时候需要指定图片的尺寸\n\n```\n// 正确\n<Image source={{uri: 'https://facebook.github.io/react/img/logo_og.png'}}\n       style={{width: 400, height: 400}} />\n\n// 错误\n<Image source={{uri: 'https://facebook.github.io/react/img/logo_og.png'}} />\n```\n\n### ScrollView\n`ScrollView`是一个通用的可滚动容器，支持竖直、水平滚动\n\n```\n    \t<ScrollView> \n\n    \t\t<Text style={{fontSize:32}}>Scroll me plz</Text>\n\n    \t\t<Text style={{fontSize:32}}>Scroll me plz</Text>\n\n    \t\t<Image source={require('./test.jpg')} />\n    \t</ScrollView>\n```\n\n**可点击组件**\n使用`Touchable`开头的一系列组件能够捕捉用户点击操作。\n`onPress`属性接受一个处理点击事件的函数，在点击操作开始并终止于组件的时候，相应的函数会被调用。\n`onLongPress`属性用来处理长按事件。\n\n```\n_onPressButton() {\n    console.log(\"You tapped the button!\");\n  }\n\n<TouchableHighlight onPress={this._onPressButton}>\n        <Text>Button</Text>\n      </TouchableHighlight>\n```\n\n可以通过使用不同组件提供给用户不同的触摸反馈:\n\n* `TouchableHighlight`会在用户手指按下的时候变暗\n* `TouchableNativeFeedback`会在Android上体现出原生的视觉效果\n* `TouchableOpacity`会在用户按下的时候改变透明度\n* `TouchableWithoutFeedback`没有任何反馈\n\n\n###ListView\n动态渲染屏幕上可见的元素\n`dataSource`属性，设定列表的数据源\n`renderRow`属性，诸葛解析数据源中的数据，染回一个设定好格式的组件来渲染\n\n```\nclass ListViewBasics extends Component {\n  // 初始化模拟数据\n  constructor(props) {\n    super(props);\n    const ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});\n    this.state = {\n      dataSource: ds.cloneWithRows([\n        'John', 'Joel', 'James', 'Jimmy', 'Jackson', 'Jillian', 'Julie', 'Devin'\n      ])\n    };\n  }\n  render() {\n    return (\n      <View style={{flex: 1, paddingTop: 22}}>\n        <ListView\n          dataSource={this.state.dataSource}\n          renderRow={(rowData) => <Text>{rowData}</Text>}\n        />\n      </View>\n    );\n  }\n}\n```","source":"_posts/React-Native笔记-二.md","raw":"---\ntitle: React-Native笔记(二)\ndate: 2017-02-24 11:36:10\ntags: React-Native\n\n---\n\n## React-Native笔记(二)\n\n### 图片\n\n**静态图片**\n引用图片只需要将图片文件放在项目文件夹中，指定路径引用\n\n```\n<Image source={require('./my-icon.png')} />\n```\n系统会从一个引用了图片的组件所在的根目录出发，去寻找这张图片。\n提供`@2x`,`@3x`来指明图片的精度。\n使用`my-icon.ios.png`以及`my-icon.android.png`来提供不同平台的图片。\n\n<!--more-->\n\n在`require()`里面的图片名字必须为静态字符串\n\n> 加入新的图片资源后，可能需要重启packager引入新的图片资源\n\n**原生与React Native**\n使用react native的时候也能够使用原生打包的资源文件\n\n```\n<Image source={{uri: 'app_icon'}} style={{width: 40, height: 40}} />\n```\n\n> 这一做法并没有任何安全检查。你需要自己确保图片在应用中确实存在，而且还需要指定尺寸。\n\n\n**网络图片**\n使用网络图片的时候需要指定图片的尺寸\n\n```\n// 正确\n<Image source={{uri: 'https://facebook.github.io/react/img/logo_og.png'}}\n       style={{width: 400, height: 400}} />\n\n// 错误\n<Image source={{uri: 'https://facebook.github.io/react/img/logo_og.png'}} />\n```\n\n### ScrollView\n`ScrollView`是一个通用的可滚动容器，支持竖直、水平滚动\n\n```\n    \t<ScrollView> \n\n    \t\t<Text style={{fontSize:32}}>Scroll me plz</Text>\n\n    \t\t<Text style={{fontSize:32}}>Scroll me plz</Text>\n\n    \t\t<Image source={require('./test.jpg')} />\n    \t</ScrollView>\n```\n\n**可点击组件**\n使用`Touchable`开头的一系列组件能够捕捉用户点击操作。\n`onPress`属性接受一个处理点击事件的函数，在点击操作开始并终止于组件的时候，相应的函数会被调用。\n`onLongPress`属性用来处理长按事件。\n\n```\n_onPressButton() {\n    console.log(\"You tapped the button!\");\n  }\n\n<TouchableHighlight onPress={this._onPressButton}>\n        <Text>Button</Text>\n      </TouchableHighlight>\n```\n\n可以通过使用不同组件提供给用户不同的触摸反馈:\n\n* `TouchableHighlight`会在用户手指按下的时候变暗\n* `TouchableNativeFeedback`会在Android上体现出原生的视觉效果\n* `TouchableOpacity`会在用户按下的时候改变透明度\n* `TouchableWithoutFeedback`没有任何反馈\n\n\n###ListView\n动态渲染屏幕上可见的元素\n`dataSource`属性，设定列表的数据源\n`renderRow`属性，诸葛解析数据源中的数据，染回一个设定好格式的组件来渲染\n\n```\nclass ListViewBasics extends Component {\n  // 初始化模拟数据\n  constructor(props) {\n    super(props);\n    const ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});\n    this.state = {\n      dataSource: ds.cloneWithRows([\n        'John', 'Joel', 'James', 'Jimmy', 'Jackson', 'Jillian', 'Julie', 'Devin'\n      ])\n    };\n  }\n  render() {\n    return (\n      <View style={{flex: 1, paddingTop: 22}}>\n        <ListView\n          dataSource={this.state.dataSource}\n          renderRow={(rowData) => <Text>{rowData}</Text>}\n        />\n      </View>\n    );\n  }\n}\n```","slug":"React-Native笔记-二","published":1,"updated":"2017-02-24T03:37:48.012Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizj9pq0h00032gj9x00ay3qp","content":"<h2 id=\"React-Native笔记-二\"><a href=\"#React-Native笔记-二\" class=\"headerlink\" title=\"React-Native笔记(二)\"></a>React-Native笔记(二)</h2><h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p><strong>静态图片</strong><br>引用图片只需要将图片文件放在项目文件夹中，指定路径引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Image source=&#123;require(&apos;./my-icon.png&apos;)&#125; /&gt;</div></pre></td></tr></table></figure>\n<p>系统会从一个引用了图片的组件所在的根目录出发，去寻找这张图片。<br>提供<code>@2x</code>,<code>@3x</code>来指明图片的精度。<br>使用<code>my-icon.ios.png</code>以及<code>my-icon.android.png</code>来提供不同平台的图片。</p>\n<a id=\"more\"></a>\n<p>在<code>require()</code>里面的图片名字必须为静态字符串</p>\n<blockquote>\n<p>加入新的图片资源后，可能需要重启packager引入新的图片资源</p>\n</blockquote>\n<p><strong>原生与React Native</strong><br>使用react native的时候也能够使用原生打包的资源文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Image source=&#123;&#123;uri: &apos;app_icon&apos;&#125;&#125; style=&#123;&#123;width: 40, height: 40&#125;&#125; /&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这一做法并没有任何安全检查。你需要自己确保图片在应用中确实存在，而且还需要指定尺寸。</p>\n</blockquote>\n<p><strong>网络图片</strong><br>使用网络图片的时候需要指定图片的尺寸</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 正确</div><div class=\"line\">&lt;Image source=&#123;&#123;uri: &apos;https://facebook.github.io/react/img/logo_og.png&apos;&#125;&#125;</div><div class=\"line\">       style=&#123;&#123;width: 400, height: 400&#125;&#125; /&gt;</div><div class=\"line\"></div><div class=\"line\">// 错误</div><div class=\"line\">&lt;Image source=&#123;&#123;uri: &apos;https://facebook.github.io/react/img/logo_og.png&apos;&#125;&#125; /&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"ScrollView\"><a href=\"#ScrollView\" class=\"headerlink\" title=\"ScrollView\"></a>ScrollView</h3><p><code>ScrollView</code>是一个通用的可滚动容器，支持竖直、水平滚动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ScrollView&gt; </div><div class=\"line\"></div><div class=\"line\">\t&lt;Text style=&#123;&#123;fontSize:32&#125;&#125;&gt;Scroll me plz&lt;/Text&gt;</div><div class=\"line\"></div><div class=\"line\">\t&lt;Text style=&#123;&#123;fontSize:32&#125;&#125;&gt;Scroll me plz&lt;/Text&gt;</div><div class=\"line\"></div><div class=\"line\">\t&lt;Image source=&#123;require(&apos;./test.jpg&apos;)&#125; /&gt;</div><div class=\"line\">&lt;/ScrollView&gt;</div></pre></td></tr></table></figure>\n<p><strong>可点击组件</strong><br>使用<code>Touchable</code>开头的一系列组件能够捕捉用户点击操作。<br><code>onPress</code>属性接受一个处理点击事件的函数，在点击操作开始并终止于组件的时候，相应的函数会被调用。<br><code>onLongPress</code>属性用来处理长按事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">_onPressButton() &#123;</div><div class=\"line\">    console.log(&quot;You tapped the button!&quot;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&lt;TouchableHighlight onPress=&#123;this._onPressButton&#125;&gt;</div><div class=\"line\">        &lt;Text&gt;Button&lt;/Text&gt;</div><div class=\"line\">      &lt;/TouchableHighlight&gt;</div></pre></td></tr></table></figure>\n<p>可以通过使用不同组件提供给用户不同的触摸反馈:</p>\n<ul>\n<li><code>TouchableHighlight</code>会在用户手指按下的时候变暗</li>\n<li><code>TouchableNativeFeedback</code>会在Android上体现出原生的视觉效果</li>\n<li><code>TouchableOpacity</code>会在用户按下的时候改变透明度</li>\n<li><code>TouchableWithoutFeedback</code>没有任何反馈</li>\n</ul>\n<p>###ListView<br>动态渲染屏幕上可见的元素<br><code>dataSource</code>属性，设定列表的数据源<br><code>renderRow</code>属性，诸葛解析数据源中的数据，染回一个设定好格式的组件来渲染</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">class ListViewBasics extends Component &#123;</div><div class=\"line\">  // 初始化模拟数据</div><div class=\"line\">  constructor(props) &#123;</div><div class=\"line\">    super(props);</div><div class=\"line\">    const ds = new ListView.DataSource(&#123;rowHasChanged: (r1, r2) =&gt; r1 !== r2&#125;);</div><div class=\"line\">    this.state = &#123;</div><div class=\"line\">      dataSource: ds.cloneWithRows([</div><div class=\"line\">        &apos;John&apos;, &apos;Joel&apos;, &apos;James&apos;, &apos;Jimmy&apos;, &apos;Jackson&apos;, &apos;Jillian&apos;, &apos;Julie&apos;, &apos;Devin&apos;</div><div class=\"line\">      ])</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;View style=&#123;&#123;flex: 1, paddingTop: 22&#125;&#125;&gt;</div><div class=\"line\">        &lt;ListView</div><div class=\"line\">          dataSource=&#123;this.state.dataSource&#125;</div><div class=\"line\">          renderRow=&#123;(rowData) =&gt; &lt;Text&gt;&#123;rowData&#125;&lt;/Text&gt;&#125;</div><div class=\"line\">        /&gt;</div><div class=\"line\">      &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"<h2 id=\"React-Native笔记-二\"><a href=\"#React-Native笔记-二\" class=\"headerlink\" title=\"React-Native笔记(二)\"></a>React-Native笔记(二)</h2><h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p><strong>静态图片</strong><br>引用图片只需要将图片文件放在项目文件夹中，指定路径引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Image source=&#123;require(&apos;./my-icon.png&apos;)&#125; /&gt;</div></pre></td></tr></table></figure>\n<p>系统会从一个引用了图片的组件所在的根目录出发，去寻找这张图片。<br>提供<code>@2x</code>,<code>@3x</code>来指明图片的精度。<br>使用<code>my-icon.ios.png</code>以及<code>my-icon.android.png</code>来提供不同平台的图片。</p>","more":"<p>在<code>require()</code>里面的图片名字必须为静态字符串</p>\n<blockquote>\n<p>加入新的图片资源后，可能需要重启packager引入新的图片资源</p>\n</blockquote>\n<p><strong>原生与React Native</strong><br>使用react native的时候也能够使用原生打包的资源文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Image source=&#123;&#123;uri: &apos;app_icon&apos;&#125;&#125; style=&#123;&#123;width: 40, height: 40&#125;&#125; /&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这一做法并没有任何安全检查。你需要自己确保图片在应用中确实存在，而且还需要指定尺寸。</p>\n</blockquote>\n<p><strong>网络图片</strong><br>使用网络图片的时候需要指定图片的尺寸</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 正确</div><div class=\"line\">&lt;Image source=&#123;&#123;uri: &apos;https://facebook.github.io/react/img/logo_og.png&apos;&#125;&#125;</div><div class=\"line\">       style=&#123;&#123;width: 400, height: 400&#125;&#125; /&gt;</div><div class=\"line\"></div><div class=\"line\">// 错误</div><div class=\"line\">&lt;Image source=&#123;&#123;uri: &apos;https://facebook.github.io/react/img/logo_og.png&apos;&#125;&#125; /&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"ScrollView\"><a href=\"#ScrollView\" class=\"headerlink\" title=\"ScrollView\"></a>ScrollView</h3><p><code>ScrollView</code>是一个通用的可滚动容器，支持竖直、水平滚动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ScrollView&gt; </div><div class=\"line\"></div><div class=\"line\">\t&lt;Text style=&#123;&#123;fontSize:32&#125;&#125;&gt;Scroll me plz&lt;/Text&gt;</div><div class=\"line\"></div><div class=\"line\">\t&lt;Text style=&#123;&#123;fontSize:32&#125;&#125;&gt;Scroll me plz&lt;/Text&gt;</div><div class=\"line\"></div><div class=\"line\">\t&lt;Image source=&#123;require(&apos;./test.jpg&apos;)&#125; /&gt;</div><div class=\"line\">&lt;/ScrollView&gt;</div></pre></td></tr></table></figure>\n<p><strong>可点击组件</strong><br>使用<code>Touchable</code>开头的一系列组件能够捕捉用户点击操作。<br><code>onPress</code>属性接受一个处理点击事件的函数，在点击操作开始并终止于组件的时候，相应的函数会被调用。<br><code>onLongPress</code>属性用来处理长按事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">_onPressButton() &#123;</div><div class=\"line\">    console.log(&quot;You tapped the button!&quot;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&lt;TouchableHighlight onPress=&#123;this._onPressButton&#125;&gt;</div><div class=\"line\">        &lt;Text&gt;Button&lt;/Text&gt;</div><div class=\"line\">      &lt;/TouchableHighlight&gt;</div></pre></td></tr></table></figure>\n<p>可以通过使用不同组件提供给用户不同的触摸反馈:</p>\n<ul>\n<li><code>TouchableHighlight</code>会在用户手指按下的时候变暗</li>\n<li><code>TouchableNativeFeedback</code>会在Android上体现出原生的视觉效果</li>\n<li><code>TouchableOpacity</code>会在用户按下的时候改变透明度</li>\n<li><code>TouchableWithoutFeedback</code>没有任何反馈</li>\n</ul>\n<p>###ListView<br>动态渲染屏幕上可见的元素<br><code>dataSource</code>属性，设定列表的数据源<br><code>renderRow</code>属性，诸葛解析数据源中的数据，染回一个设定好格式的组件来渲染</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">class ListViewBasics extends Component &#123;</div><div class=\"line\">  // 初始化模拟数据</div><div class=\"line\">  constructor(props) &#123;</div><div class=\"line\">    super(props);</div><div class=\"line\">    const ds = new ListView.DataSource(&#123;rowHasChanged: (r1, r2) =&gt; r1 !== r2&#125;);</div><div class=\"line\">    this.state = &#123;</div><div class=\"line\">      dataSource: ds.cloneWithRows([</div><div class=\"line\">        &apos;John&apos;, &apos;Joel&apos;, &apos;James&apos;, &apos;Jimmy&apos;, &apos;Jackson&apos;, &apos;Jillian&apos;, &apos;Julie&apos;, &apos;Devin&apos;</div><div class=\"line\">      ])</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;View style=&#123;&#123;flex: 1, paddingTop: 22&#125;&#125;&gt;</div><div class=\"line\">        &lt;ListView</div><div class=\"line\">          dataSource=&#123;this.state.dataSource&#125;</div><div class=\"line\">          renderRow=&#123;(rowData) =&gt; &lt;Text&gt;&#123;rowData&#125;&lt;/Text&gt;&#125;</div><div class=\"line\">        /&gt;</div><div class=\"line\">      &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"React-Native笔记(一)","date":"2017-02-24T03:36:05.000Z","_content":"\n## React-Native笔记(一)\n创建项目 `react-native init projectname`\n\n手动运行packager，用于调试项目 `react-native start`\n\n查看日志 `adb locat *:S ReactNative:V ReactNativeJS:V`\n\n<!--more-->\n\n\n## 代码\n\n### import\n在index.android.js中，导入需要用到的组件,例如`Component`，`AppRegistry`，`View`等等\n```\n import React, { Component } from 'react';\n import { AppRegistry, StyleSheet, Text, View} from 'react-native';\n```\n\n### AppRegistry\n应用作为最大的一个Component，需要在最后通过`AppRegistry.registerComponent('AppName', () => AppName)`注册并运行\n\n### props(属性)\n常见基础组件有各种属性(props)，例如`Image`就有`source`和`style`等属性来控制图片地址和尺寸,下列代码中的name就是自定义的props\n\n```\nclass Greeting extends Component {\n  render() {\n    return (\n      <Text>Hello {this.props.name}!</Text>\n    );\n  }\n}\n\n```\n\n### state(状态)\n`props`由父组件指定，在生命周期中不会再改变，而`state`能够用于改变的数据。需要再`Constructor`中对`state`进行初始化，实例如下:\n\n```\nclass Blink extends Component {\n\tconstructor(props) {\n\t  super(props);\n\t  this.state = { showText: true};\n\n\t  setInterval(() => {\n\t  \tthis.setState({ showText: !this.state.showText});\n\t  }, 1000);\n\t}\n\n\n\trender() {\n\t\tlet display = this.state.showText ? this.props.text : ' ';\n\t\treturn (\n\t\t\t<Text>{display}</Text>\n\t\t);\n\t}\n}\n```\n\n### 样式\n所有核心组件都接受`style`属性，样式名称要求使用驼峰命名法。\n使用过程中建议用`StyleSheet.create`来集中定义组件样式，类似于`Android`中定义各种`style`一样。\n借鉴了`CSS`中层叠覆盖的做法，属性能够被覆盖\n\n```\nconst styles = StyleSheet.create({\n\tbigblue: {\n\t\tcolor: 'blue',\n\t\t    \t<View style={{\n   \t\t\tpadding: 10,\n    \t}}>\n\n    \t\t<TextInput\n    \t\t\tstyle={{height: 40}}\n    \t\t\tplaceholder=\"Type here to translate!\"\n    \t\t\tonChangeText={(text) => this.setState({text})} /> \n\n    \t\t<Text style={{padding: 10, fontSize: 42}} >\n    \t\t\t{this.state.text.spilt(' ').map((word) => word && 'woo').join(' ')}\n    \t\t</Text>\n    \t</View>\nfontWeight: 'bold',\n\t\tfontSize: 30,\n\t},\n\tred: {\n\t\tcolor: 'red',\n\t}\n})\n```\n\n\n### 控件尺寸\n\n**固定尺寸**\n在样式中设置`width`和`height`。\n```\n<View style={{width: 50, height: 50}} />\n```\n\n**弹性(flex)尺寸**\n在组件样式中使用`flex`来指定控件所占比例，`flex:1`指定组件撑满剩余空间，多个并列的`flex:1`平分剩余控件\n> 组件能够撑满剩余空间的前提是其父容器的尺寸不为零。如果父容器既没有固定的width和height，也没有设定flex，则父容器的尺寸为零。其子组件如果使用了flex，也是无法显示的。\n\n\n```\n<View style={{flex:1}}>\n    \t\t<View style={{flex:1, backgroundColor: 'powderblue'}} />\n    \t\t<View style={{flex:2, backgroundColor: 'skyblue'}} />\n    \t\t<View style={{flex:3, backgroundColor: 'steelblue'}} />\n    \t</View>\n```\n\n### Flexbox布局\n\n[布局属性文档](http://reactnative.cn/docs/0.41/layout-props.html)\n\n\n`Flexbox`规则用来指定某个组件的子元素布局。\n\n> React Native中的Flexbox的工作原理和web上的CSS基本一致，当然也存在少许差异。首先是默认值不同：flexDirection的默认值是column而不是row，而flex也只能指定一个数字值。\n\n**Flex Direction**\n`flexDirection`样式决定布局的**主轴**，子元素沿着**主轴**方向排列，默认为`column`方向,下面的三个`view`横向排列\n```\n<View style={{flex:1, flexDirection: 'row'}}>\n\t...\n</View>\n```\n\n**Justify Content**\n`justifyContent`决定子元素沿着**主轴**的排列方式。可选属性如下：\n\n| 名称 | 功能 |\n|--------|--------|\n|    默认    |    相邻无间距排列    |\n|    flex-start    |    同上    |\n|    center    |    从中间开始依次排列    |\n|    flex-end    |   从父布局尾端开始排列     |\n|    space-around    |    每个子布局周围距离一致    |\n|    space-between    |    子布局之间距离一致，和父布局无距离    |\n\n```\n<View style={{\n    \t\tflex:1,\n    \t\tflexDirection: 'row',\n    \t\tjustifyContent: 'flex-start',\n    \t}}>\n        ...\n    \t</View>\n```\n\n**Align Items**\n`alignItems`决定子元素**次轴**排列方式，**次轴**和**主轴**方向垂直。\n\n| 名称 | 功能 |\n|--------|--------|\n|    flex-start    |    次轴顶端排列    |\n|    center    |    次轴中间开始排列    |\n|    flex-end    |   次轴尾端开始排列     |\n|    stretch   |    每个子布局周围距离一致    |\n\n\n> 要使stretch选项生效的话，子元素在次轴方向上不能有固定的尺寸。\n\n\n### 处理文本输入\n使用`TextInput`来允许用户输入文本。\n\n`onChangeText`属性接受一个函数，在文本发生变化的时候调用该函数。\n`onSubmitEditting`属性会在文本被提交之后调用(用户按下软键盘上的提交按钮)。\n","source":"_posts/React-Native笔记-一.md","raw":"---\ntitle: React-Native笔记(一)\ndate: 2017-02-24 11:36:05\ntags: React-Native\n\n---\n\n## React-Native笔记(一)\n创建项目 `react-native init projectname`\n\n手动运行packager，用于调试项目 `react-native start`\n\n查看日志 `adb locat *:S ReactNative:V ReactNativeJS:V`\n\n<!--more-->\n\n\n## 代码\n\n### import\n在index.android.js中，导入需要用到的组件,例如`Component`，`AppRegistry`，`View`等等\n```\n import React, { Component } from 'react';\n import { AppRegistry, StyleSheet, Text, View} from 'react-native';\n```\n\n### AppRegistry\n应用作为最大的一个Component，需要在最后通过`AppRegistry.registerComponent('AppName', () => AppName)`注册并运行\n\n### props(属性)\n常见基础组件有各种属性(props)，例如`Image`就有`source`和`style`等属性来控制图片地址和尺寸,下列代码中的name就是自定义的props\n\n```\nclass Greeting extends Component {\n  render() {\n    return (\n      <Text>Hello {this.props.name}!</Text>\n    );\n  }\n}\n\n```\n\n### state(状态)\n`props`由父组件指定，在生命周期中不会再改变，而`state`能够用于改变的数据。需要再`Constructor`中对`state`进行初始化，实例如下:\n\n```\nclass Blink extends Component {\n\tconstructor(props) {\n\t  super(props);\n\t  this.state = { showText: true};\n\n\t  setInterval(() => {\n\t  \tthis.setState({ showText: !this.state.showText});\n\t  }, 1000);\n\t}\n\n\n\trender() {\n\t\tlet display = this.state.showText ? this.props.text : ' ';\n\t\treturn (\n\t\t\t<Text>{display}</Text>\n\t\t);\n\t}\n}\n```\n\n### 样式\n所有核心组件都接受`style`属性，样式名称要求使用驼峰命名法。\n使用过程中建议用`StyleSheet.create`来集中定义组件样式，类似于`Android`中定义各种`style`一样。\n借鉴了`CSS`中层叠覆盖的做法，属性能够被覆盖\n\n```\nconst styles = StyleSheet.create({\n\tbigblue: {\n\t\tcolor: 'blue',\n\t\t    \t<View style={{\n   \t\t\tpadding: 10,\n    \t}}>\n\n    \t\t<TextInput\n    \t\t\tstyle={{height: 40}}\n    \t\t\tplaceholder=\"Type here to translate!\"\n    \t\t\tonChangeText={(text) => this.setState({text})} /> \n\n    \t\t<Text style={{padding: 10, fontSize: 42}} >\n    \t\t\t{this.state.text.spilt(' ').map((word) => word && 'woo').join(' ')}\n    \t\t</Text>\n    \t</View>\nfontWeight: 'bold',\n\t\tfontSize: 30,\n\t},\n\tred: {\n\t\tcolor: 'red',\n\t}\n})\n```\n\n\n### 控件尺寸\n\n**固定尺寸**\n在样式中设置`width`和`height`。\n```\n<View style={{width: 50, height: 50}} />\n```\n\n**弹性(flex)尺寸**\n在组件样式中使用`flex`来指定控件所占比例，`flex:1`指定组件撑满剩余空间，多个并列的`flex:1`平分剩余控件\n> 组件能够撑满剩余空间的前提是其父容器的尺寸不为零。如果父容器既没有固定的width和height，也没有设定flex，则父容器的尺寸为零。其子组件如果使用了flex，也是无法显示的。\n\n\n```\n<View style={{flex:1}}>\n    \t\t<View style={{flex:1, backgroundColor: 'powderblue'}} />\n    \t\t<View style={{flex:2, backgroundColor: 'skyblue'}} />\n    \t\t<View style={{flex:3, backgroundColor: 'steelblue'}} />\n    \t</View>\n```\n\n### Flexbox布局\n\n[布局属性文档](http://reactnative.cn/docs/0.41/layout-props.html)\n\n\n`Flexbox`规则用来指定某个组件的子元素布局。\n\n> React Native中的Flexbox的工作原理和web上的CSS基本一致，当然也存在少许差异。首先是默认值不同：flexDirection的默认值是column而不是row，而flex也只能指定一个数字值。\n\n**Flex Direction**\n`flexDirection`样式决定布局的**主轴**，子元素沿着**主轴**方向排列，默认为`column`方向,下面的三个`view`横向排列\n```\n<View style={{flex:1, flexDirection: 'row'}}>\n\t...\n</View>\n```\n\n**Justify Content**\n`justifyContent`决定子元素沿着**主轴**的排列方式。可选属性如下：\n\n| 名称 | 功能 |\n|--------|--------|\n|    默认    |    相邻无间距排列    |\n|    flex-start    |    同上    |\n|    center    |    从中间开始依次排列    |\n|    flex-end    |   从父布局尾端开始排列     |\n|    space-around    |    每个子布局周围距离一致    |\n|    space-between    |    子布局之间距离一致，和父布局无距离    |\n\n```\n<View style={{\n    \t\tflex:1,\n    \t\tflexDirection: 'row',\n    \t\tjustifyContent: 'flex-start',\n    \t}}>\n        ...\n    \t</View>\n```\n\n**Align Items**\n`alignItems`决定子元素**次轴**排列方式，**次轴**和**主轴**方向垂直。\n\n| 名称 | 功能 |\n|--------|--------|\n|    flex-start    |    次轴顶端排列    |\n|    center    |    次轴中间开始排列    |\n|    flex-end    |   次轴尾端开始排列     |\n|    stretch   |    每个子布局周围距离一致    |\n\n\n> 要使stretch选项生效的话，子元素在次轴方向上不能有固定的尺寸。\n\n\n### 处理文本输入\n使用`TextInput`来允许用户输入文本。\n\n`onChangeText`属性接受一个函数，在文本发生变化的时候调用该函数。\n`onSubmitEditting`属性会在文本被提交之后调用(用户按下软键盘上的提交按钮)。\n","slug":"React-Native笔记-一","published":1,"updated":"2017-02-24T03:37:15.052Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizj9pq1f00092gj9v04109rq","content":"<h2 id=\"React-Native笔记-一\"><a href=\"#React-Native笔记-一\" class=\"headerlink\" title=\"React-Native笔记(一)\"></a>React-Native笔记(一)</h2><p>创建项目 <code>react-native init projectname</code></p>\n<p>手动运行packager，用于调试项目 <code>react-native start</code></p>\n<p>查看日志 <code>adb locat *:S ReactNative:V ReactNativeJS:V</code></p>\n<a id=\"more\"></a>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h3><p>在index.android.js中，导入需要用到的组件,例如<code>Component</code>，<code>AppRegistry</code>，<code>View</code>等等<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\">import &#123; AppRegistry, StyleSheet, Text, View&#125; from &apos;react-native&apos;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"AppRegistry\"><a href=\"#AppRegistry\" class=\"headerlink\" title=\"AppRegistry\"></a>AppRegistry</h3><p>应用作为最大的一个Component，需要在最后通过<code>AppRegistry.registerComponent(&#39;AppName&#39;, () =&gt; AppName)</code>注册并运行</p>\n<h3 id=\"props-属性\"><a href=\"#props-属性\" class=\"headerlink\" title=\"props(属性)\"></a>props(属性)</h3><p>常见基础组件有各种属性(props)，例如<code>Image</code>就有<code>source</code>和<code>style</code>等属性来控制图片地址和尺寸,下列代码中的name就是自定义的props</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Greeting extends Component &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;Text&gt;Hello &#123;this.props.name&#125;!&lt;/Text&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"state-状态\"><a href=\"#state-状态\" class=\"headerlink\" title=\"state(状态)\"></a>state(状态)</h3><p><code>props</code>由父组件指定，在生命周期中不会再改变，而<code>state</code>能够用于改变的数据。需要再<code>Constructor</code>中对<code>state</code>进行初始化，实例如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Blink extends Component &#123;</div><div class=\"line\">\tconstructor(props) &#123;</div><div class=\"line\">\t  super(props);</div><div class=\"line\">\t  this.state = &#123; showText: true&#125;;</div><div class=\"line\"></div><div class=\"line\">\t  setInterval(() =&gt; &#123;</div><div class=\"line\">\t  \tthis.setState(&#123; showText: !this.state.showText&#125;);</div><div class=\"line\">\t  &#125;, 1000);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\trender() &#123;</div><div class=\"line\">\t\tlet display = this.state.showText ? this.props.text : &apos; &apos;;</div><div class=\"line\">\t\treturn (</div><div class=\"line\">\t\t\t&lt;Text&gt;&#123;display&#125;&lt;/Text&gt;</div><div class=\"line\">\t\t);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h3><p>所有核心组件都接受<code>style</code>属性，样式名称要求使用驼峰命名法。<br>使用过程中建议用<code>StyleSheet.create</code>来集中定义组件样式，类似于<code>Android</code>中定义各种<code>style</code>一样。<br>借鉴了<code>CSS</code>中层叠覆盖的做法，属性能够被覆盖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">const styles = StyleSheet.create(&#123;</div><div class=\"line\">\tbigblue: &#123;</div><div class=\"line\">\t\tcolor: &apos;blue&apos;,</div><div class=\"line\">\t\t    \t&lt;View style=&#123;&#123;</div><div class=\"line\">   \t\t\tpadding: 10,</div><div class=\"line\">    \t&#125;&#125;&gt;</div><div class=\"line\"></div><div class=\"line\">    \t\t&lt;TextInput</div><div class=\"line\">    \t\t\tstyle=&#123;&#123;height: 40&#125;&#125;</div><div class=\"line\">    \t\t\tplaceholder=&quot;Type here to translate!&quot;</div><div class=\"line\">    \t\t\tonChangeText=&#123;(text) =&gt; this.setState(&#123;text&#125;)&#125; /&gt; </div><div class=\"line\"></div><div class=\"line\">    \t\t&lt;Text style=&#123;&#123;padding: 10, fontSize: 42&#125;&#125; &gt;</div><div class=\"line\">    \t\t\t&#123;this.state.text.spilt(&apos; &apos;).map((word) =&gt; word &amp;&amp; &apos;woo&apos;).join(&apos; &apos;)&#125;</div><div class=\"line\">    \t\t&lt;/Text&gt;</div><div class=\"line\">    \t&lt;/View&gt;</div><div class=\"line\">fontWeight: &apos;bold&apos;,</div><div class=\"line\">\t\tfontSize: 30,</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tred: &#123;</div><div class=\"line\">\t\tcolor: &apos;red&apos;,</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"控件尺寸\"><a href=\"#控件尺寸\" class=\"headerlink\" title=\"控件尺寸\"></a>控件尺寸</h3><p><strong>固定尺寸</strong><br>在样式中设置<code>width</code>和<code>height</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;View style=&#123;&#123;width: 50, height: 50&#125;&#125; /&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>弹性(flex)尺寸</strong><br>在组件样式中使用<code>flex</code>来指定控件所占比例，<code>flex:1</code>指定组件撑满剩余空间，多个并列的<code>flex:1</code>平分剩余控件</p>\n<blockquote>\n<p>组件能够撑满剩余空间的前提是其父容器的尺寸不为零。如果父容器既没有固定的width和height，也没有设定flex，则父容器的尺寸为零。其子组件如果使用了flex，也是无法显示的。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;View style=&#123;&#123;flex:1&#125;&#125;&gt;</div><div class=\"line\">    \t\t&lt;View style=&#123;&#123;flex:1, backgroundColor: &apos;powderblue&apos;&#125;&#125; /&gt;</div><div class=\"line\">    \t\t&lt;View style=&#123;&#123;flex:2, backgroundColor: &apos;skyblue&apos;&#125;&#125; /&gt;</div><div class=\"line\">    \t\t&lt;View style=&#123;&#123;flex:3, backgroundColor: &apos;steelblue&apos;&#125;&#125; /&gt;</div><div class=\"line\">    \t&lt;/View&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"Flexbox布局\"><a href=\"#Flexbox布局\" class=\"headerlink\" title=\"Flexbox布局\"></a>Flexbox布局</h3><p><a href=\"http://reactnative.cn/docs/0.41/layout-props.html\" target=\"_blank\" rel=\"external\">布局属性文档</a></p>\n<p><code>Flexbox</code>规则用来指定某个组件的子元素布局。</p>\n<blockquote>\n<p>React Native中的Flexbox的工作原理和web上的CSS基本一致，当然也存在少许差异。首先是默认值不同：flexDirection的默认值是column而不是row，而flex也只能指定一个数字值。</p>\n</blockquote>\n<p><strong>Flex Direction</strong><br><code>flexDirection</code>样式决定布局的<strong>主轴</strong>，子元素沿着<strong>主轴</strong>方向排列，默认为<code>column</code>方向,下面的三个<code>view</code>横向排列<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;View style=&#123;&#123;flex:1, flexDirection: &apos;row&apos;&#125;&#125;&gt;</div><div class=\"line\">\t...</div><div class=\"line\">&lt;/View&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>Justify Content</strong><br><code>justifyContent</code>决定子元素沿着<strong>主轴</strong>的排列方式。可选属性如下：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>默认</td>\n<td>相邻无间距排列</td>\n</tr>\n<tr>\n<td>flex-start</td>\n<td>同上</td>\n</tr>\n<tr>\n<td>center</td>\n<td>从中间开始依次排列</td>\n</tr>\n<tr>\n<td>flex-end</td>\n<td>从父布局尾端开始排列</td>\n</tr>\n<tr>\n<td>space-around</td>\n<td>每个子布局周围距离一致</td>\n</tr>\n<tr>\n<td>space-between</td>\n<td>子布局之间距离一致，和父布局无距离</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;View style=&#123;&#123;</div><div class=\"line\">    \t\tflex:1,</div><div class=\"line\">    \t\tflexDirection: &apos;row&apos;,</div><div class=\"line\">    \t\tjustifyContent: &apos;flex-start&apos;,</div><div class=\"line\">    \t&#125;&#125;&gt;</div><div class=\"line\">        ...</div><div class=\"line\">    \t&lt;/View&gt;</div></pre></td></tr></table></figure>\n<p><strong>Align Items</strong><br><code>alignItems</code>决定子元素<strong>次轴</strong>排列方式，<strong>次轴</strong>和<strong>主轴</strong>方向垂直。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>flex-start</td>\n<td>次轴顶端排列</td>\n</tr>\n<tr>\n<td>center</td>\n<td>次轴中间开始排列</td>\n</tr>\n<tr>\n<td>flex-end</td>\n<td>次轴尾端开始排列</td>\n</tr>\n<tr>\n<td>stretch</td>\n<td>每个子布局周围距离一致</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>要使stretch选项生效的话，子元素在次轴方向上不能有固定的尺寸。</p>\n</blockquote>\n<h3 id=\"处理文本输入\"><a href=\"#处理文本输入\" class=\"headerlink\" title=\"处理文本输入\"></a>处理文本输入</h3><p>使用<code>TextInput</code>来允许用户输入文本。</p>\n<p><code>onChangeText</code>属性接受一个函数，在文本发生变化的时候调用该函数。<br><code>onSubmitEditting</code>属性会在文本被提交之后调用(用户按下软键盘上的提交按钮)。</p>\n","excerpt":"<h2 id=\"React-Native笔记-一\"><a href=\"#React-Native笔记-一\" class=\"headerlink\" title=\"React-Native笔记(一)\"></a>React-Native笔记(一)</h2><p>创建项目 <code>react-native init projectname</code></p>\n<p>手动运行packager，用于调试项目 <code>react-native start</code></p>\n<p>查看日志 <code>adb locat *:S ReactNative:V ReactNativeJS:V</code></p>","more":"<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h3><p>在index.android.js中，导入需要用到的组件,例如<code>Component</code>，<code>AppRegistry</code>，<code>View</code>等等<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\">import &#123; AppRegistry, StyleSheet, Text, View&#125; from &apos;react-native&apos;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"AppRegistry\"><a href=\"#AppRegistry\" class=\"headerlink\" title=\"AppRegistry\"></a>AppRegistry</h3><p>应用作为最大的一个Component，需要在最后通过<code>AppRegistry.registerComponent(&#39;AppName&#39;, () =&gt; AppName)</code>注册并运行</p>\n<h3 id=\"props-属性\"><a href=\"#props-属性\" class=\"headerlink\" title=\"props(属性)\"></a>props(属性)</h3><p>常见基础组件有各种属性(props)，例如<code>Image</code>就有<code>source</code>和<code>style</code>等属性来控制图片地址和尺寸,下列代码中的name就是自定义的props</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Greeting extends Component &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;Text&gt;Hello &#123;this.props.name&#125;!&lt;/Text&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"state-状态\"><a href=\"#state-状态\" class=\"headerlink\" title=\"state(状态)\"></a>state(状态)</h3><p><code>props</code>由父组件指定，在生命周期中不会再改变，而<code>state</code>能够用于改变的数据。需要再<code>Constructor</code>中对<code>state</code>进行初始化，实例如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Blink extends Component &#123;</div><div class=\"line\">\tconstructor(props) &#123;</div><div class=\"line\">\t  super(props);</div><div class=\"line\">\t  this.state = &#123; showText: true&#125;;</div><div class=\"line\"></div><div class=\"line\">\t  setInterval(() =&gt; &#123;</div><div class=\"line\">\t  \tthis.setState(&#123; showText: !this.state.showText&#125;);</div><div class=\"line\">\t  &#125;, 1000);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\trender() &#123;</div><div class=\"line\">\t\tlet display = this.state.showText ? this.props.text : &apos; &apos;;</div><div class=\"line\">\t\treturn (</div><div class=\"line\">\t\t\t&lt;Text&gt;&#123;display&#125;&lt;/Text&gt;</div><div class=\"line\">\t\t);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h3><p>所有核心组件都接受<code>style</code>属性，样式名称要求使用驼峰命名法。<br>使用过程中建议用<code>StyleSheet.create</code>来集中定义组件样式，类似于<code>Android</code>中定义各种<code>style</code>一样。<br>借鉴了<code>CSS</code>中层叠覆盖的做法，属性能够被覆盖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">const styles = StyleSheet.create(&#123;</div><div class=\"line\">\tbigblue: &#123;</div><div class=\"line\">\t\tcolor: &apos;blue&apos;,</div><div class=\"line\">\t\t    \t&lt;View style=&#123;&#123;</div><div class=\"line\">   \t\t\tpadding: 10,</div><div class=\"line\">    \t&#125;&#125;&gt;</div><div class=\"line\"></div><div class=\"line\">    \t\t&lt;TextInput</div><div class=\"line\">    \t\t\tstyle=&#123;&#123;height: 40&#125;&#125;</div><div class=\"line\">    \t\t\tplaceholder=&quot;Type here to translate!&quot;</div><div class=\"line\">    \t\t\tonChangeText=&#123;(text) =&gt; this.setState(&#123;text&#125;)&#125; /&gt; </div><div class=\"line\"></div><div class=\"line\">    \t\t&lt;Text style=&#123;&#123;padding: 10, fontSize: 42&#125;&#125; &gt;</div><div class=\"line\">    \t\t\t&#123;this.state.text.spilt(&apos; &apos;).map((word) =&gt; word &amp;&amp; &apos;woo&apos;).join(&apos; &apos;)&#125;</div><div class=\"line\">    \t\t&lt;/Text&gt;</div><div class=\"line\">    \t&lt;/View&gt;</div><div class=\"line\">fontWeight: &apos;bold&apos;,</div><div class=\"line\">\t\tfontSize: 30,</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tred: &#123;</div><div class=\"line\">\t\tcolor: &apos;red&apos;,</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"控件尺寸\"><a href=\"#控件尺寸\" class=\"headerlink\" title=\"控件尺寸\"></a>控件尺寸</h3><p><strong>固定尺寸</strong><br>在样式中设置<code>width</code>和<code>height</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;View style=&#123;&#123;width: 50, height: 50&#125;&#125; /&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>弹性(flex)尺寸</strong><br>在组件样式中使用<code>flex</code>来指定控件所占比例，<code>flex:1</code>指定组件撑满剩余空间，多个并列的<code>flex:1</code>平分剩余控件</p>\n<blockquote>\n<p>组件能够撑满剩余空间的前提是其父容器的尺寸不为零。如果父容器既没有固定的width和height，也没有设定flex，则父容器的尺寸为零。其子组件如果使用了flex，也是无法显示的。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;View style=&#123;&#123;flex:1&#125;&#125;&gt;</div><div class=\"line\">    \t\t&lt;View style=&#123;&#123;flex:1, backgroundColor: &apos;powderblue&apos;&#125;&#125; /&gt;</div><div class=\"line\">    \t\t&lt;View style=&#123;&#123;flex:2, backgroundColor: &apos;skyblue&apos;&#125;&#125; /&gt;</div><div class=\"line\">    \t\t&lt;View style=&#123;&#123;flex:3, backgroundColor: &apos;steelblue&apos;&#125;&#125; /&gt;</div><div class=\"line\">    \t&lt;/View&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"Flexbox布局\"><a href=\"#Flexbox布局\" class=\"headerlink\" title=\"Flexbox布局\"></a>Flexbox布局</h3><p><a href=\"http://reactnative.cn/docs/0.41/layout-props.html\">布局属性文档</a></p>\n<p><code>Flexbox</code>规则用来指定某个组件的子元素布局。</p>\n<blockquote>\n<p>React Native中的Flexbox的工作原理和web上的CSS基本一致，当然也存在少许差异。首先是默认值不同：flexDirection的默认值是column而不是row，而flex也只能指定一个数字值。</p>\n</blockquote>\n<p><strong>Flex Direction</strong><br><code>flexDirection</code>样式决定布局的<strong>主轴</strong>，子元素沿着<strong>主轴</strong>方向排列，默认为<code>column</code>方向,下面的三个<code>view</code>横向排列<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;View style=&#123;&#123;flex:1, flexDirection: &apos;row&apos;&#125;&#125;&gt;</div><div class=\"line\">\t...</div><div class=\"line\">&lt;/View&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>Justify Content</strong><br><code>justifyContent</code>决定子元素沿着<strong>主轴</strong>的排列方式。可选属性如下：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>默认</td>\n<td>相邻无间距排列</td>\n</tr>\n<tr>\n<td>flex-start</td>\n<td>同上</td>\n</tr>\n<tr>\n<td>center</td>\n<td>从中间开始依次排列</td>\n</tr>\n<tr>\n<td>flex-end</td>\n<td>从父布局尾端开始排列</td>\n</tr>\n<tr>\n<td>space-around</td>\n<td>每个子布局周围距离一致</td>\n</tr>\n<tr>\n<td>space-between</td>\n<td>子布局之间距离一致，和父布局无距离</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;View style=&#123;&#123;</div><div class=\"line\">    \t\tflex:1,</div><div class=\"line\">    \t\tflexDirection: &apos;row&apos;,</div><div class=\"line\">    \t\tjustifyContent: &apos;flex-start&apos;,</div><div class=\"line\">    \t&#125;&#125;&gt;</div><div class=\"line\">        ...</div><div class=\"line\">    \t&lt;/View&gt;</div></pre></td></tr></table></figure>\n<p><strong>Align Items</strong><br><code>alignItems</code>决定子元素<strong>次轴</strong>排列方式，<strong>次轴</strong>和<strong>主轴</strong>方向垂直。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>flex-start</td>\n<td>次轴顶端排列</td>\n</tr>\n<tr>\n<td>center</td>\n<td>次轴中间开始排列</td>\n</tr>\n<tr>\n<td>flex-end</td>\n<td>次轴尾端开始排列</td>\n</tr>\n<tr>\n<td>stretch</td>\n<td>每个子布局周围距离一致</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>要使stretch选项生效的话，子元素在次轴方向上不能有固定的尺寸。</p>\n</blockquote>\n<h3 id=\"处理文本输入\"><a href=\"#处理文本输入\" class=\"headerlink\" title=\"处理文本输入\"></a>处理文本输入</h3><p>使用<code>TextInput</code>来允许用户输入文本。</p>\n<p><code>onChangeText</code>属性接受一个函数，在文本发生变化的时候调用该函数。<br><code>onSubmitEditting</code>属性会在文本被提交之后调用(用户按下软键盘上的提交按钮)。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cizj9ppys00002gj9amqvhb4k","tag_id":"cizj9pq0e00022gj9115jpxud","_id":"cizj9pq0j00052gj9yqoechch"},{"post_id":"cizj9pq0c00012gj938s81edv","tag_id":"cizj9pq0i00042gj9mibsj0nj","_id":"cizj9pq0l00072gj9c0n9xso3"},{"post_id":"cizj9pq0h00032gj9x00ay3qp","tag_id":"cizj9pq0i00042gj9mibsj0nj","_id":"cizj9pq0m00082gj9gv65fp1f"},{"post_id":"cizj9pq1f00092gj9v04109rq","tag_id":"cizj9pq0i00042gj9mibsj0nj","_id":"cizj9pq1i000a2gj9850u7ggt"}],"Tag":[{"name":"hexo","_id":"cizj9pq0e00022gj9115jpxud"},{"name":"React-Native","_id":"cizj9pq0i00042gj9mibsj0nj"}]}}