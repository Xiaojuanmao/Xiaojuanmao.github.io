<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SharedPreferece产生的Concurrent Modification Exception</title>
      <link href="/2018/04/12/SharedPreferece%E4%BA%A7%E7%94%9F%E7%9A%84Concurrent%20Modification%20Exception/"/>
      <url>/2018/04/12/SharedPreferece%E4%BA%A7%E7%94%9F%E7%9A%84Concurrent%20Modification%20Exception/</url>
      
        <content type="html"><![CDATA[<p>在使用SharedPreference的过程中，Bugly上报出<code>Concurrent ModificationException</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">java.util.HashMap$HashIterator.nextEntry(HashMap.java:806)</div><div class="line">java.util.HashMap$KeyIterator.next(HashMap.java:833)</div><div class="line">com.android.internal.util.XmlUtils.writeSetXml(XmlUtils.java:298)</div><div class="line">com.android.internal.util.XmlUtils.writeValueXml(XmlUtils.java:447)</div><div class="line">com.android.internal.util.XmlUtils.writeMapXml(XmlUtils.java:241)</div><div class="line">com.android.internal.util.XmlUtils.writeMapXml(XmlUtils.java:181)</div><div class="line">android.app.SharedPreferencesImpl.writeToFile(SharedPreferencesImpl.java:596)</div><div class="line">android.app.SharedPreferencesImpl.access$800(SharedPreferencesImpl.java:52)</div><div class="line">android.app.SharedPreferencesImpl$2.run(SharedPreferencesImpl.java:511)</div><div class="line">java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)</div><div class="line">java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)</div><div class="line">java.lang.Thread.run(Thread.java:841)</div></pre></td></tr></table></figure><p>最开始以为是由于使用了<code>RxJava</code>导致的多线程读写问题，但后来阅读<code>SharedPreferenceImpl</code>代码时发现，有使用<code>synchronized</code>来保证线程安全，排除多线程的可能性。</p><p>在<code>HashIterator</code>的源码中，抛出<code>ConcurrentModificationException</code>的片段如下</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">if(HashMap.this.modCount != this.expectedModCount) &#123;</div><div class="line">                throw new ConcurrentModificationException();</div><div class="line">            &#125; else if(var2 == null) &#123;</div><div class="line">                throw new NoSuchElementException();</div><div class="line">            &#125; else &#123;</div><div class="line">                if((this.next = (this.current = var2).next) == null) &#123;</div><div class="line">                    HashMap.Node[] var1 = HashMap.this.table;</div><div class="line">                    if(HashMap.this.table != null) &#123;</div><div class="line">                        while(this.index &lt; var1.length &amp;&amp; (this.next = var1[this.index++]) == null) &#123;</div><div class="line">                            ;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                return var2;</div><div class="line">            &#125;</div></pre></td></tr></table></figure><p>基本情况就是同一<code>HashMap</code>或者<code>HashSet</code>被多个线程同时修改了，导致集合的大小和预期不一致，抛出了异常。在网上查找原因时，注意到了<code>SharedPreference</code>中有个函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">   * Retrieve a set of String values from the preferences.</div><div class="line">   * </div><div class="line">   * &lt;p&gt;Note that you &lt;em&gt;must not&lt;/em&gt; modify the set instance returned</div><div class="line">   * by this call.  The consistency of the stored data is not guaranteed</div><div class="line">   * if you do, nor is your ability to modify the instance at all.</div><div class="line">   *</div><div class="line">   * @param key The name of the preference to retrieve.</div><div class="line">   * @param defValues Values to return if this preference does not exist.</div><div class="line">   * </div><div class="line">   * @return Returns the preference values if they exist, or defValues.</div><div class="line">   * Throws ClassCastException if there is a preference with this name</div><div class="line">   * that is not a Set.</div><div class="line">   * </div><div class="line">   * @throws ClassCastException</div><div class="line">   */</div><div class="line">  @Nullable</div><div class="line">  Set&lt;String&gt; getStringSet(String key, @Nullable Set&lt;String&gt; defValues);</div></pre></td></tr></table></figure><p>明确提到了不能直接修改返回的<code>Set</code>，其实现类<code>SharedPreferenceImpl</code>中的代码,直接从<code>Map</code>中返回了集合，多个线程同时获取了同一个集合，同时修改肯定会出错:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Nullable</div><div class="line">  public Set&lt;String&gt; getStringSet(String key, @Nullable Set&lt;String&gt; defValues) &#123;</div><div class="line">      synchronized (mLock) &#123;</div><div class="line">          awaitLoadedLocked();</div><div class="line">          Set&lt;String&gt; v = (Set&lt;String&gt;) mMap.get(key);</div><div class="line">          return v != null ? v : defValues;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>在使用了<code>getStringSet</code>的地方，将返回的<code>Set</code>拷贝一份再使用，能够避免这个问题。</p><h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><blockquote><p><a href="https://janatechnology.wordpress.com/2016/01/29/concurrent-modification-exceptions-on-androids-shared-preferences/" target="_blank" rel="noopener">https://janatechnology.wordpress.com/2016/01/29/concurrent-modification-exceptions-on-androids-shared-preferences/</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ViewPagerAdapter调用NotifyData后数据不刷新</title>
      <link href="/2018/04/12/ViewPagerAdapter%E8%B0%83%E7%94%A8NotifyData%E5%90%8E%E6%95%B0%E6%8D%AE%E4%B8%8D%E5%88%B7%E6%96%B0/"/>
      <url>/2018/04/12/ViewPagerAdapter%E8%B0%83%E7%94%A8NotifyData%E5%90%8E%E6%95%B0%E6%8D%AE%E4%B8%8D%E5%88%B7%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>线上存在一个关于PagerAdapter的少量崩溃，描述如下：</p><blockquote><p>The application’s PagerAdapter changed the adapter’s contents without calling PagerAdapter#notifyDataSetChanged!</p></blockquote><p>由于在使用<code>PagerAdapter</code>的过程中，使用的数据源是从外界传入的，数据源被改变之后未调用<code>notifyDataSetChanged</code>函数来刷新并通知<code>Adapter</code>，此时滑动<code>ViewPager</code>时候会产生上述崩溃。</p><p>在<code>ViewPager</code>内部的<code>PagerObserver</code>中有如下代码，检测数据源的数量是否处于同步状态，并会抛出异常:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">if (N != mExpectedAdapterCount) &#123;</div><div class="line">       String resName;</div><div class="line">       try &#123;</div><div class="line">           resName = getResources().getResourceName(getId());</div><div class="line">       &#125; catch (Resources.NotFoundException e) &#123;</div><div class="line">           resName = Integer.toHexString(getId());</div><div class="line">       &#125;</div><div class="line">       throw new IllegalStateException(&quot;The application&apos;s PagerAdapter changed the adapter&apos;s&quot;</div><div class="line">               + &quot; contents without calling PagerAdapter#notifyDataSetChanged!&quot;</div><div class="line">               + &quot; Expected adapter item count: &quot; + mExpectedAdapterCount + &quot;, found: &quot; + N</div><div class="line">               + &quot; Pager id: &quot; + resName</div><div class="line">               + &quot; Pager class: &quot; + getClass()</div><div class="line">               + &quot; Problematic adapter: &quot; + mAdapter.getClass());</div><div class="line">   &#125;</div></pre></td></tr></table></figure><a id="more"></a><p>最初的解决办法是按照异常的提示，直接在修改了数据源的地方调用<code>notifyDataSetChanged()</code>函数，崩溃消失，出现了数据错位的现象。</p><p>之后了解到，<code>ViewPager</code>的数据绑定和<code>RecyclerView</code>存在不同，<code>RecyclerView</code>在数据源变动之后会调用<code>onBindData</code>将数据源重新进行绑定，而<code>ViewPager</code>会根据<code>PagerAdapter</code>中的<code>getItemPosition</code>函数来决定是否刷新，默认的实现都是不刷新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * Called when the host view is attempting to determine if an item&apos;s position</div><div class="line">    * has changed. Returns &#123;@link #POSITION_UNCHANGED&#125; if the position of the given</div><div class="line">    * item has not changed or &#123;@link #POSITION_NONE&#125; if the item is no longer present</div><div class="line">    * in the adapter.</div><div class="line">    *</div><div class="line">    * &lt;p&gt;The default implementation assumes that items will never</div><div class="line">    * change position and always returns &#123;@link #POSITION_UNCHANGED&#125;.</div><div class="line">    *</div><div class="line">    * @param object Object representing an item, previously returned by a call to</div><div class="line">    *               &#123;@link #instantiateItem(View, int)&#125;.</div><div class="line">    * @return object&apos;s new position index from [0, &#123;@link #getCount()&#125;),</div><div class="line">    *         &#123;@link #POSITION_UNCHANGED&#125; if the object&apos;s position has not changed,</div><div class="line">    *         or &#123;@link #POSITION_NONE&#125; if the item is no longer present.</div><div class="line">    */</div><div class="line">   public int getItemPosition(@NonNull Object object) &#123;</div><div class="line">       return POSITION_UNCHANGED;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>此函数返回<code>POSITION_UNCHANGED</code>则不会进行数据刷新，而<code>POSITION_NONE</code>则会重新生成并绑定数据。对于数据源产生混乱的情况，通过控制该函数的返回值即可解决。</p><p>最终的解决办法为通过设置<code>TAG</code>来判断当前数据源是否和Index匹配，不匹配则重新刷新，匹配则不用处理</p><h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><blockquote><p><a href="https://www.jianshu.com/p/266861496508" target="_blank" rel="noopener">https://www.jianshu.com/p/266861496508</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MessageQueue中的nativePollOnce</title>
      <link href="/2018/04/12/MessageQueue%E4%B8%AD%E7%9A%84nativePollOnce/"/>
      <url>/2018/04/12/MessageQueue%E4%B8%AD%E7%9A%84nativePollOnce/</url>
      
        <content type="html"><![CDATA[<p>之前了解过的Handler、MessageQueue以及Looper等机制，在MessageQueue的<code>nativePollOnce</code>就终止了，在没有队列中没有消息的状态下，不同Android版本从Linux层面使用管道等方式实现异步阻塞/唤醒。</p><p>在C++层的代码中，也存在一套Handler、MessageQueue以及Looper。</p><p><code>android_os_MessageQueue.cpp</code>中<code>nativePollOnce</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">static void android_os_MessageQueue_nativePollOnce(JNIEnv* env, jobject obj,</div><div class="line">        jlong ptr, jint timeoutMillis) &#123;</div><div class="line">    NativeMessageQueue* nativeMessageQueue = reinterpret_cast&lt;NativeMessageQueue*&gt;(ptr);</div><div class="line">    nativeMessageQueue-&gt;pollOnce(env, obj, timeoutMillis);</div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><p>调用了<code>nativeMessageQueue</code>的<code>pollOnce</code>方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">void NativeMessageQueue::pollOnce(JNIEnv* env, jobject pollObj, int timeoutMillis) &#123;</div><div class="line">    mPollEnv = env;</div><div class="line">    mPollObj = pollObj;</div><div class="line">    mLooper-&gt;pollOnce(timeoutMillis);</div><div class="line">    mPollObj = NULL;</div><div class="line">    mPollEnv = NULL;</div><div class="line">    if (mExceptionObj) &#123;</div><div class="line">        env-&gt;Throw(mExceptionObj);</div><div class="line">        env-&gt;DeleteLocalRef(mExceptionObj);</div><div class="line">        mExceptionObj = NULL;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>紧接着调用了<code>Looper.cpp</code>的<code>pollOnce</code>方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">int Looper::pollOnce(int timeoutMillis, int* outFd, int* outEvents, void** outData) &#123;</div><div class="line">    int result = 0;</div><div class="line">    for (;;) &#123;</div><div class="line">        while (mResponseIndex &lt; mResponses.size()) &#123;</div><div class="line">            const Response&amp; response = mResponses.itemAt(mResponseIndex++);</div><div class="line">            int ident = response.request.ident;</div><div class="line">            if (ident &gt;= 0) &#123;</div><div class="line">                int fd = response.request.fd;</div><div class="line">                int events = response.events;</div><div class="line">                void* data = response.request.data;</div><div class="line">#if DEBUG_POLL_AND_WAKE</div><div class="line">                ALOGD(&quot;%p ~ pollOnce - returning signalled identifier %d: &quot;</div><div class="line">                        &quot;fd=%d, events=0x%x, data=%p&quot;,</div><div class="line">                        this, ident, fd, events, data);</div><div class="line">#endif</div><div class="line">                if (outFd != NULL) *outFd = fd;</div><div class="line">                if (outEvents != NULL) *outEvents = events;</div><div class="line">                if (outData != NULL) *outData = data;</div><div class="line">                return ident;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if (result != 0) &#123;</div><div class="line">#if DEBUG_POLL_AND_WAKE</div><div class="line">            ALOGD(&quot;%p ~ pollOnce - returning result %d&quot;, this, result);</div><div class="line">#endif</div><div class="line">            if (outFd != NULL) *outFd = 0;</div><div class="line">            if (outEvents != NULL) *outEvents = 0;</div><div class="line">            if (outData != NULL) *outData = NULL;</div><div class="line">            return result;</div><div class="line">        &#125;</div><div class="line">        result = pollInner(timeoutMillis);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>最后会跟踪到了<code>Looper.cpp</code>的<code>pollInner</code>方法上，这个方法会对底层的消息进行处理，线程的阻塞也会在函数<code>epoll_wait()</code>这里产生。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">int Looper::pollInner(int timeoutMillis) &#123;</div><div class="line">#if DEBUG_POLL_AND_WAKE</div><div class="line">    ALOGD(&quot;%p ~ pollOnce - waiting: timeoutMillis=%d&quot;, this, timeoutMillis);</div><div class="line">#endif</div><div class="line">    // Adjust the timeout based on when the next message is due.</div><div class="line">    if (timeoutMillis != 0 &amp;&amp; mNextMessageUptime != LLONG_MAX) &#123;</div><div class="line">        nsecs_t now = systemTime(SYSTEM_TIME_MONOTONIC);</div><div class="line">        int messageTimeoutMillis = toMillisecondTimeoutDelay(now, mNextMessageUptime);</div><div class="line">        if (messageTimeoutMillis &gt;= 0</div><div class="line">                &amp;&amp; (timeoutMillis &lt; 0 || messageTimeoutMillis &lt; timeoutMillis)) &#123;</div><div class="line">            timeoutMillis = messageTimeoutMillis;</div><div class="line">        &#125;</div><div class="line">#if DEBUG_POLL_AND_WAKE</div><div class="line">        ALOGD(&quot;%p ~ pollOnce - next message in %&quot; PRId64 &quot;ns, adjusted timeout: timeoutMillis=%d&quot;,</div><div class="line">                this, mNextMessageUptime - now, timeoutMillis);</div><div class="line">#endif</div><div class="line">    &#125;</div><div class="line">    // Poll.</div><div class="line">    int result = POLL_WAKE;</div><div class="line">    mResponses.clear();</div><div class="line">    mResponseIndex = 0;</div><div class="line">    // We are about to idle.</div><div class="line">    mPolling = true;</div><div class="line">    struct epoll_event eventItems[EPOLL_MAX_EVENTS];</div><div class="line">    int eventCount = epoll_wait(mEpollFd, eventItems, EPOLL_MAX_EVENTS, timeoutMillis);</div><div class="line">    // No longer idling.</div><div class="line">    mPolling = false;</div><div class="line">    // Acquire lock.</div><div class="line">    mLock.lock();</div><div class="line">    </div><div class="line">    ...</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在C++层的<code>Looper</code>初始化的过程中，会初始化一个<code>管道</code>，管道会提供读、写两个端口，并创建一个<code>epoll</code>实例来监控管道的读端口。具体代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Looper::Looper(bool allowNonCallbacks) :</div><div class="line">        mAllowNonCallbacks(allowNonCallbacks), mSendingMessage(false),</div><div class="line">        mResponseIndex(0), mNextMessageUptime(LLONG_MAX) &#123;</div><div class="line">    int wakeFds[2];</div><div class="line">    int result = pipe(wakeFds); // 创建管道</div><div class="line">    LOG_ALWAYS_FATAL_IF(result != 0, &quot;Could not create wake pipe.  errno=%d&quot;, errno);</div><div class="line">    mWakeReadPipeFd = wakeFds[0]; // 读端口</div><div class="line">    mWakeWritePipeFd = wakeFds[1]; // 写端口</div><div class="line">    result = fcntl(mWakeReadPipeFd, F_SETFL, O_NONBLOCK);</div><div class="line">    LOG_ALWAYS_FATAL_IF(result != 0, &quot;Could not make wake read pipe non-blocking.  errno=%d&quot;,</div><div class="line">            errno);</div><div class="line">    result = fcntl(mWakeWritePipeFd, F_SETFL, O_NONBLOCK);</div><div class="line">    LOG_ALWAYS_FATAL_IF(result != 0, &quot;Could not make wake write pipe non-blocking.  errno=%d&quot;,</div><div class="line">            errno);</div><div class="line">    // Allocate the epoll instance and register the wake pipe.</div><div class="line">    mEpollFd = epoll_create(EPOLL_SIZE_HINT); // 创建一个epoll实例，用来监控mWakeReadPipeFd</div><div class="line">    LOG_ALWAYS_FATAL_IF(mEpollFd &lt; 0, &quot;Could not create epoll instance.  errno=%d&quot;, errno);</div><div class="line">    struct epoll_event eventItem;</div><div class="line">    memset(&amp; eventItem, 0, sizeof(epoll_event)); // zero out unused members of data field union</div><div class="line">    eventItem.events = EPOLLIN;</div><div class="line">    eventItem.data.fd = mWakeReadPipeFd;</div><div class="line">    result = epoll_ctl(mEpollFd, EPOLL_CTL_ADD, mWakeReadPipeFd, &amp; eventItem); // 注册监听</div><div class="line">    LOG_ALWAYS_FATAL_IF(result != 0, &quot;Could not add wake read pipe to epoll instance.  errno=%d&quot;,</div><div class="line">            errno);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用<code>epoll</code>注册监听<code>Looper</code>中的<code>mWakeReadPipeFd</code>之后，在上面提到过的<code>epoll_wait()</code>函数等待的线程，将会在<code>mWakeWritePipeFd</code>端口有数据写入的时候被唤醒，在Java层的<code>MessageQueue</code>中，有消息加入队列的时候，会检测是否需要唤醒当前在<code>epoll_wait()</code>等待的线程，如果需要唤醒，则会调用<code>MessageQueue.cpp</code>的<code>nativeWake()</code>方法，进而调用到<code>Looper.cpp</code>的<code>wake()</code>方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">void Looper::wake() &#123;</div><div class="line">#if DEBUG_POLL_AND_WAKE</div><div class="line">    ALOGD(&quot;%p ~ wake&quot;, this);</div><div class="line">#endif</div><div class="line">    ssize_t nWrite;</div><div class="line">    do &#123;</div><div class="line">        nWrite = write(mWakeWritePipeFd, &quot;W&quot;, 1);</div><div class="line">    &#125; while (nWrite == -1 &amp;&amp; errno == EINTR);</div><div class="line">    if (nWrite != 1) &#123;</div><div class="line">        if (errno != EAGAIN) &#123;</div><div class="line">            ALOGW(&quot;Could not write wake signal, errno=%d&quot;, errno);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>唤醒的方式为，向之前创建的管道中写入一个<code>W</code>字符，管道的读端将会被唤醒，线程离开<code>epoll_wait()</code>方法，开始执行之后的代码，从消息队列中取出消息，开始干活.</p><h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><blockquote><p><a href="http://www.bijishequ.com/detail/214262" target="_blank" rel="noopener">http://www.bijishequ.com/detail/214262</a><br><a href="http://shangjin615.iteye.com/blog/1778615" target="_blank" rel="noopener">http://shangjin615.iteye.com/blog/1778615</a></p></blockquote><h4 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h4><p><a href="https://chromium.googlesource.com/aosp/platform/system/core/+/master/libutils/Looper.cpp" target="_blank" rel="noopener">Looper.cpp</a></p><p><a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/jni/android_os_MessageQueue.cpp" target="_blank" rel="noopener">MessageQueue.cpp</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Volley框架解析-七-Request解析</title>
      <link href="/2017/04/24/Volley%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90-%E4%B8%83-Request%E8%A7%A3%E6%9E%90/"/>
      <url>/2017/04/24/Volley%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90-%E4%B8%83-Request%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Volley框架解析-七-—–Request解析"><a href="#Volley框架解析-七-—–Request解析" class="headerlink" title="Volley框架解析(七)—–Request解析"></a>Volley框架解析(七)—–Request解析</h1><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>了解了request队列的调度程序，request结果的处理方式，以及request请求出错的处理方式，对请求结果进行缓存方面的工作等等。这篇博客就是专门分析<code>Request</code>了。</p><h3 id="2-Request-java"><a href="#2-Request-java" class="headerlink" title="2. Request.java"></a>2. Request.java</h3><p>Volley封装的一个抽象类，Request.java提供了很大的便利性，可供我们自定义Request,之前在使用Volley的时候自定义了一些reuqest的，也总结过自定义request的方法，在这篇博客中有提到<a href="http://blog.csdn.net/jing_unique_da/article/details/45101331" title="Volley使用技巧-----自定义Request" target="_blank" rel="noopener">Volley使用技巧—–自定义Request</a>。下面就开始分析<code>Request.java</code>的源码。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Base class for all network requests.</div><div class="line"> * 在volley中涉及到的所有request的基础类</div><div class="line"> *</div><div class="line"> * @param &lt;T&gt; The type of parsed response this request expects.</div><div class="line"> * 泛型类T是请求端希望服务器能返回的数据类型</div><div class="line"> *</div><div class="line"> * 关于其实现的一个Comparable接口，从字面上来看就是&quot;可比较的&quot;</div><div class="line"> * 官方的解释如下：</div><div class="line"> * This interface should be implemented by all classes that wish to define </div><div class="line"> * a natural order of their instances. sort(List) and java.util.Arrays#sort </div><div class="line"> * can then be used to automatically sort lists of classes that implement this interface.</div><div class="line"> * 意思就是说如果你希望你的类在一个list中能够使用sort等函数自动排序的话，就实现这个接口吧= =</div><div class="line"> * (需要重写里面的方法compareTo(), 里面是比较了两个request的优先级)</div><div class="line"> */</div><div class="line">public abstract class Request&lt;T&gt; implements Comparable&lt;Request&lt;T&gt;&gt; &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Default encoding for POST or PUT parameters. See &#123;@link #getParamsEncoding()&#125;.</div><div class="line">     * POST或者是PUT请求参数的默认编码格式 &quot;UTF-8&quot;</div><div class="line">     */</div><div class="line">    private static final String DEFAULT_PARAMS_ENCODING = &quot;UTF-8&quot;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Supported request methods.</div><div class="line">     * 支持的请求方式，有各种,常用的GET, POST, PUT应该是比较熟悉</div><div class="line">     */</div><div class="line">    public interface Method &#123;</div><div class="line">        int DEPRECATED_GET_OR_POST = -1;</div><div class="line">        int GET = 0;</div><div class="line">        int POST = 1;</div><div class="line">        int PUT = 2;</div><div class="line">        int DELETE = 3;</div><div class="line">        int HEAD = 4;</div><div class="line">        int OPTIONS = 5;</div><div class="line">        int TRACE = 6;</div><div class="line">        int PATCH = 7;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * An event log tracing the lifetime of this request; for debugging. </div><div class="line">     * 为了debug方便，volley弄了一套VolleyLog</div><div class="line">     * 在一个request整个生命周期内不停的打出log</div><div class="line">     * 都可以方便从log监控该request现在的情况</div><div class="line">     */</div><div class="line">    private final MarkerLog mEventLog = MarkerLog.ENABLED ? new MarkerLog() : null;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Request method of this request.  Currently supports GET, POST, PUT, DELETE, HEAD, OPTIONS,</div><div class="line">     * TRACE, and PATCH.</div><div class="line">     * 当前request涉及到的请求方式</div><div class="line">     * 目前所支持的有GET, POST, PUT等</div><div class="line">     */</div><div class="line">    private final int mMethod;</div><div class="line"></div><div class="line">    /** </div><div class="line">     * URL of this request.</div><div class="line">     * 原始Url</div><div class="line">     */</div><div class="line">    private final String mUrl;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * The redirect url to use for 3xx http responses </div><div class="line">     * request重定向之后的url</div><div class="line">     */</div><div class="line">    private String mRedirectUrl;</div><div class="line"></div><div class="line">    /** The unique identifier of the request </div><div class="line">     *  从后面可以看出在构造request的时候</div><div class="line">     *  mIdentifier是通过createIdentifier()函数</div><div class="line">     *  由传入的url和请求的method以及当前系统时间还有一个计数器counter构造出的</div><div class="line">     *  独一无二的身份标识</div><div class="line">     */</div><div class="line">    private String mIdentifier;</div><div class="line"></div><div class="line">    /** </div><div class="line">     * Default tag for &#123;@link TrafficStats&#125;. </div><div class="line">     * </div><div class="line">     */</div><div class="line">    private final int mDefaultTrafficStatsTag;</div><div class="line"></div><div class="line">    /** Listener interface for errors. */</div><div class="line">    private final Response.ErrorListener mErrorListener;</div><div class="line"></div><div class="line">    /** Sequence number of this request, used to enforce FIFO ordering. */</div><div class="line">    private Integer mSequence;</div><div class="line"></div><div class="line">    /** The request queue this request is associated with. */</div><div class="line">    private RequestQueue mRequestQueue;</div><div class="line"></div><div class="line">    /** Whether or not responses to this request should be cached. */</div><div class="line">    private boolean mShouldCache = true;</div><div class="line"></div><div class="line">    /** Whether or not this request has been canceled. */</div><div class="line">    private boolean mCanceled = false;</div><div class="line"></div><div class="line">    /** Whether or not a response has been delivered for this request yet. */</div><div class="line">    private boolean mResponseDelivered = false;</div><div class="line"></div><div class="line">    // A cheap variant of request tracing used to dump slow requests.</div><div class="line">    private long mRequestBirthTime = 0;</div><div class="line"></div><div class="line">    /** </div><div class="line">     * Threshold at which we should log the request (even when debug logging is not enabled). </div><div class="line">     * 用来判定是否打出将一个request打出slow_request的log的时间阀值</div><div class="line">     * 如果request响应时间超过了这个阀值，则会打出log，说明一下情况</div><div class="line">     */</div><div class="line">    private static final long SLOW_REQUEST_THRESHOLD_MS = 3000;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * The retry policy for this request. </div><div class="line">     * 在前面已经介绍到了，RetryPolicy.java及其默认实现类</div><div class="line">     * 是用来处理request重新发送的一种策略，也就是重试方针</div><div class="line">     * 里面记录着重试的最大次数以及当前重试了几次等</div><div class="line">     */</div><div class="line">    private RetryPolicy mRetryPolicy;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * When a request can be retrieved from cache but must be refreshed from</div><div class="line">     * the network, the cache entry will be stored here so that in the event of</div><div class="line">     * a &quot;Not Modified&quot; response, we can be sure it hasn&apos;t been evicted from cache.</div><div class="line">     *</div><div class="line">     * 当一个请求的结果有缓存但是需要从服务器刷新一下的时候</div><div class="line">     * 缓存的入口，在向服务器发送条件请求时，服务器返回304之后</div><div class="line">     * 就可以从这个缓存的入口找到该请求在本地对应的缓存数据了。= =直接拿来用咯</div><div class="line">     */</div><div class="line">    private Cache.Entry mCacheEntry = null;</div><div class="line"></div><div class="line">    /** An opaque token tagging this request; used for bulk cancellation. </div><div class="line">     *  一个关于该request的不公开透明的token，用于批量取消</div><div class="line">     * 在RequestQueue.java中会用到这个mTag</div><div class="line">     * 用mTag可以取消request</div><div class="line">     */</div><div class="line">    private Object mTag;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Creates a new request with the given URL and error listener.  Note that</div><div class="line">     * the normal response listener is not provided here as delivery of responses</div><div class="line">     * is provided by subclasses, who have a better idea of how to deliver an</div><div class="line">     * already-parsed response.</div><div class="line">     *</div><div class="line">     * 根据给定的url和errorListener创建一个新的request</div><div class="line">     * 需要注意的是这里并没有涉及到responseListener方面的设置</div><div class="line">     * 因为将其放在request的子类去设置能更好的去传递一个已经解析好了的response</div><div class="line">     *</div><div class="line">     * 这个方法已经不推荐使用了，推荐使用下面的一个构造方法，因为这个方法存在默认的method</div><div class="line">     * 没有很大的自由度去自定义request</div><div class="line">     *</div><div class="line">     * @deprecated Use &#123;@link #Request(int, String, com.android.volley.Response.ErrorListener)&#125;.</div><div class="line">     */</div><div class="line">    @Deprecated</div><div class="line">    public Request(String url, Response.ErrorListener listener) &#123;</div><div class="line">        this(Method.DEPRECATED_GET_OR_POST, url, listener);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Creates a new request with the given method (one of the values from &#123;@link Method&#125;),</div><div class="line">     * URL, and error listener.  Note that the normal response listener is not provided here as</div><div class="line">     * delivery of responses is provided by subclasses, who have a better idea of how to deliver</div><div class="line">     * an already-parsed response.</div><div class="line">     * </div><div class="line">     * setRetryPolicy()该方法设置了request所谓的“重试策略”。</div><div class="line">     * 跳转到DefaultRetryPolicy.java(系列博客的第四篇---Volley框架解析(四))</div><div class="line">     */</div><div class="line">    public Request(int method, String url, Response.ErrorListener listener) &#123;</div><div class="line">        mMethod = method;</div><div class="line">        mUrl = url;</div><div class="line">        mIdentifier = createIdentifier(method, url);</div><div class="line">        mErrorListener = listener;</div><div class="line">        setRetryPolicy(new DefaultRetryPolicy());</div><div class="line"></div><div class="line">        mDefaultTrafficStatsTag = findDefaultTrafficStatsTag(url);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Return the method for this request.  Can be one of the values in &#123;@link Method&#125;.</div><div class="line">     */</div><div class="line">    public int getMethod() &#123;</div><div class="line">        return mMethod;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Set a tag on this request. Can be used to cancel all requests with this</div><div class="line">     * tag by &#123;@link RequestQueue#cancelAll(Object)&#125;.</div><div class="line">     *</div><div class="line">     * 为了方便从网络请求队列里面取消request，可以通过打tag的方式</div><div class="line">     * @return This Request object to allow for chaining.</div><div class="line">     */</div><div class="line">    public Request&lt;?&gt; setTag(Object tag) &#123;</div><div class="line">        mTag = tag;</div><div class="line">        return this;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns this request&apos;s tag.</div><div class="line">     * @see Request#setTag(Object)</div><div class="line">     */</div><div class="line">    public Object getTag() &#123;</div><div class="line">        return mTag;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @return this request&apos;s &#123;@link com.android.volley.Response.ErrorListener&#125;.</div><div class="line">     */</div><div class="line">    public Response.ErrorListener getErrorListener() &#123;</div><div class="line">        return mErrorListener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @return A tag for use with &#123;@link TrafficStats#setThreadStatsTag(int)&#125;</div><div class="line">     */</div><div class="line">    public int getTrafficStatsTag() &#123;</div><div class="line">        return mDefaultTrafficStatsTag;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @return The hashcode of the URL&apos;s host component, or 0 if there is none.</div><div class="line">     * 返回了request的url中的host的hashcode</div><div class="line">     */</div><div class="line">    private static int findDefaultTrafficStatsTag(String url) &#123;</div><div class="line">        if (!TextUtils.isEmpty(url)) &#123;</div><div class="line">            Uri uri = Uri.parse(url);</div><div class="line">            if (uri != null) &#123;</div><div class="line">                String host = uri.getHost();</div><div class="line">                if (host != null) &#123;</div><div class="line">                    return host.hashCode();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Sets the retry policy for this request.</div><div class="line">     * 给request设置重试策略</div><div class="line">     * @return This Request object to allow for chaining.</div><div class="line">     */</div><div class="line">    public Request&lt;?&gt; setRetryPolicy(RetryPolicy retryPolicy) &#123;</div><div class="line">        mRetryPolicy = retryPolicy;</div><div class="line">        return this;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Adds an event to this request&apos;s event log; for debugging.</div><div class="line">     */</div><div class="line">    public void addMarker(String tag) &#123;</div><div class="line">        if (MarkerLog.ENABLED) &#123;</div><div class="line">            mEventLog.add(tag, Thread.currentThread().getId());</div><div class="line">        &#125; else if (mRequestBirthTime == 0) &#123;</div><div class="line">            mRequestBirthTime = SystemClock.elapsedRealtime();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Notifies the request queue that this request has finished (successfully or with error).</div><div class="line">     * 该函数用来告诉request队列，当前的request已经完成了(包括成功和失败)</div><div class="line">     * &lt;p&gt;Also dumps all events from this request&apos;s event log; for debugging.&lt;/p&gt;</div><div class="line">     */</div><div class="line">    void finish(final String tag) &#123;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 告诉RequestQueue，这个tag对应的request已经结束了</div><div class="line">         * ReuqestQueue会将这个request移出队列</div><div class="line">         * 并将具有相同cacheKey的等待中reuqest全部移除</div><div class="line">         */</div><div class="line">        if (mRequestQueue != null) &#123;</div><div class="line">            mRequestQueue.finish(this);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 如果允许打出log</div><div class="line">         * 则log提示这个request已经结束了</div><div class="line">         */</div><div class="line">        if (MarkerLog.ENABLED) &#123;</div><div class="line">            final long threadId = Thread.currentThread().getId();</div><div class="line">            if (Looper.myLooper() != Looper.getMainLooper()) &#123;</div><div class="line">                // If we finish marking off of the main thread, we need to</div><div class="line">                // actually do it on the main thread to ensure correct ordering.</div><div class="line">                Handler mainThread = new Handler(Looper.getMainLooper());</div><div class="line">                mainThread.post(new Runnable() &#123;</div><div class="line">                    @Override</div><div class="line">                    public void run() &#123;</div><div class="line">                        mEventLog.add(tag, threadId);</div><div class="line">                        mEventLog.finish(this.toString());</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            mEventLog.add(tag, threadId);</div><div class="line">            mEventLog.finish(this.toString());</div><div class="line">        &#125; else &#123;</div><div class="line">            long requestTime = SystemClock.elapsedRealtime() - mRequestBirthTime;</div><div class="line">            if (requestTime &gt;= SLOW_REQUEST_THRESHOLD_MS) &#123;</div><div class="line">                VolleyLog.d(&quot;%d ms: %s&quot;, requestTime, this.toString());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Associates this request with the given queue. The request queue will be notified when this</div><div class="line">     * request has finished.</div><div class="line">     * </div><div class="line">     * 将和request相关的那个RequestQueue与request关联起来</div><div class="line">     * 持有一个对象的引用</div><div class="line">     * 在request结束的时候好通知RequestQueue</div><div class="line">     * </div><div class="line">     * @return This Request object to allow for chaining.</div><div class="line">     */</div><div class="line">    public Request&lt;?&gt; setRequestQueue(RequestQueue requestQueue) &#123;</div><div class="line">        mRequestQueue = requestQueue;</div><div class="line">        return this;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Sets the sequence number of this request.  Used by &#123;@link RequestQueue&#125;.</div><div class="line">     * 在RequestQueue中调用，request加入到RequestQueue的时候</div><div class="line">     * 需要开始排队等待处理</div><div class="line">     * 这个函数的作用就是发号码牌给每个request(排队专用，想的还比较周到= =)</div><div class="line">     * @return This Request object to allow for chaining.</div><div class="line">     */</div><div class="line">    public final Request&lt;?&gt; setSequence(int sequence) &#123;</div><div class="line">        mSequence = sequence;</div><div class="line">        return this;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns the sequence number of this request.</div><div class="line">     */</div><div class="line">    public final int getSequence() &#123;</div><div class="line">        if (mSequence == null) &#123;</div><div class="line">            throw new IllegalStateException(&quot;getSequence called before setSequence&quot;);</div><div class="line">        &#125;</div><div class="line">        return mSequence;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns the URL of this request.</div><div class="line">     * 返回真实访问的url,如果有重定向出现</div><div class="line">     * 则真实url是重定向后的url</div><div class="line">     * 否则是原始的url</div><div class="line">     */</div><div class="line">    public String getUrl() &#123;</div><div class="line">        return (mRedirectUrl != null) ? mRedirectUrl : mUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns the URL of the request before any redirects have occurred.</div><div class="line">     * 返回最原始的url,在任何重定向发生之前</div><div class="line">     */</div><div class="line">    public String getOriginUrl() &#123;</div><div class="line">        return mUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns the identifier of the request.</div><div class="line">     */</div><div class="line">    public String getIdentifier() &#123;</div><div class="line">        return mIdentifier;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Sets the redirect url to handle 3xx http responses.</div><div class="line">     * 发生重定向之后可以通过该函数来设置重定向后的url</div><div class="line">     */</div><div class="line">    public void setRedirectUrl(String redirectUrl) &#123;</div><div class="line">        mRedirectUrl = redirectUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns the cache key for this request.  </div><div class="line">     * By default, this is the URL.</div><div class="line">     * 默认使用url来作为cacheKey</div><div class="line">     */</div><div class="line">    public String getCacheKey() &#123;</div><div class="line">        return getUrl();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Annotates this request with an entry retrieved for it from cache.</div><div class="line">     * Used for cache coherency support.</div><div class="line">     * </div><div class="line">     * @return This Request object to allow for chaining.</div><div class="line">     */</div><div class="line">    public Request&lt;?&gt; setCacheEntry(Cache.Entry entry) &#123;</div><div class="line">        mCacheEntry = entry;</div><div class="line">        return this;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns the annotated cache entry, or null if there isn&apos;t one.</div><div class="line">     */</div><div class="line">    public Cache.Entry getCacheEntry() &#123;</div><div class="line">        return mCacheEntry;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Mark this request as canceled.  No callback will be delivered.</div><div class="line">     */</div><div class="line">    public void cancel() &#123;</div><div class="line">        mCanceled = true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns true if this request has been canceled.</div><div class="line">     */</div><div class="line">    public boolean isCanceled() &#123;</div><div class="line">        return mCanceled;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns a list of extra HTTP headers to go along with this request. Can</div><div class="line">     * throw &#123;@link AuthFailureError&#125; as authentication may be required to</div><div class="line">     * provide these values.</div><div class="line">     * 返回在Request中的HTTPheader，这个里面存放了一些关于Request的基本信息</div><div class="line">     * 例如请求方式，cookie等东西</div><div class="line">     * @throws AuthFailureError In the event of auth failure</div><div class="line">     */</div><div class="line">    public Map&lt;String, String&gt; getHeaders() throws AuthFailureError &#123;</div><div class="line">        return Collections.emptyMap();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns a Map of POST parameters to be used for this request, or null if</div><div class="line">     * a simple GET should be used.  Can throw &#123;@link AuthFailureError&#125; as</div><div class="line">     * authentication may be required to provide these values.</div><div class="line">     * 返回request中用于POST请求的一些参数</div><div class="line">     * 这些参数以键值对的形式存在，如果是GET方法，则传回Null</div><div class="line">     *　</div><div class="line">     * &lt;p&gt;Note that only one of getPostParams() and getPostBody() can return a non-null</div><div class="line">     * value.&lt;/p&gt;</div><div class="line">     * @throws AuthFailureError In the event of auth failure</div><div class="line">     *</div><div class="line">     * @deprecated Use &#123;@link #getParams()&#125; instead.</div><div class="line">     */</div><div class="line">    @Deprecated</div><div class="line">    protected Map&lt;String, String&gt; getPostParams() throws AuthFailureError &#123;</div><div class="line">        return getParams();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns which encoding should be used when converting POST parameters returned by</div><div class="line">     * &#123;@link #getPostParams()&#125; into a raw POST body.</div><div class="line">     * </div><div class="line">     * </div><div class="line">     * &lt;p&gt;This controls both encodings:</div><div class="line">     * &lt;ol&gt;</div><div class="line">     *     &lt;li&gt;The string encoding used when converting parameter names and values into bytes prior</div><div class="line">     *         to URL encoding them.&lt;/li&gt;</div><div class="line">     *     &lt;li&gt;The string encoding used when converting the URL encoded parameters into a raw</div><div class="line">     *         byte array.&lt;/li&gt;</div><div class="line">     * &lt;/ol&gt;</div><div class="line">     *</div><div class="line">     * @deprecated Use &#123;@link #getParamsEncoding()&#125; instead.</div><div class="line">     */</div><div class="line">    @Deprecated</div><div class="line">    protected String getPostParamsEncoding() &#123;</div><div class="line">        return getParamsEncoding();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @deprecated Use &#123;@link #getBodyContentType()&#125; instead.</div><div class="line">     * 返回请求体的内容种类</div><div class="line">     * 包括application/json等内容</div><div class="line">     */</div><div class="line">    @Deprecated</div><div class="line">    public String getPostBodyContentType() &#123;</div><div class="line">        return getBodyContentType();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns the raw POST body to be sent.</div><div class="line">     * 该函数被建议不要使用了，用getBody代替</div><div class="line">     * </div><div class="line">     * @throws AuthFailureError In the event of auth failure</div><div class="line">     *</div><div class="line">     * @deprecated Use &#123;@link #getBody()&#125; instead.</div><div class="line">     */</div><div class="line">    @Deprecated</div><div class="line">    public byte[] getPostBody() throws AuthFailureError &#123;</div><div class="line">        // Note: For compatibility with legacy clients of volley, this implementation must remain</div><div class="line">        // here instead of simply calling the getBody() function because this function must</div><div class="line">        // call getPostParams() and getPostParamsEncoding() since legacy clients would have</div><div class="line">        // overridden these two member functions for POST requests.</div><div class="line">        Map&lt;String, String&gt; postParams = getPostParams();</div><div class="line">        if (postParams != null &amp;&amp; postParams.size() &gt; 0) &#123;</div><div class="line">            return encodeParameters(postParams, getPostParamsEncoding());</div><div class="line">        &#125;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns a Map of parameters to be used for a POST or PUT request.  Can throw</div><div class="line">     * &#123;@link AuthFailureError&#125; as authentication may be required to provide these values.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;Note that you can directly override &#123;@link #getBody()&#125; for custom data.&lt;/p&gt;</div><div class="line">     *</div><div class="line">     * @throws AuthFailureError in the event of auth failure</div><div class="line">     */</div><div class="line">    protected Map&lt;String, String&gt; getParams() throws AuthFailureError &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns which encoding should be used when converting POST or PUT parameters returned by</div><div class="line">     * &#123;@link #getParams()&#125; into a raw POST or PUT body.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;This controls both encodings:</div><div class="line">     * &lt;ol&gt;</div><div class="line">     *     &lt;li&gt;The string encoding used when converting parameter names and values into bytes prior</div><div class="line">     *         to URL encoding them.&lt;/li&gt;</div><div class="line">     *     &lt;li&gt;The string encoding used when converting the URL encoded parameters into a raw</div><div class="line">     *         byte array.&lt;/li&gt;</div><div class="line">     * &lt;/ol&gt;</div><div class="line">     */</div><div class="line">    protected String getParamsEncoding() &#123;</div><div class="line">        return DEFAULT_PARAMS_ENCODING;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns the content type of the POST or PUT body.</div><div class="line">     * 返回请求体的内容种类</div><div class="line">     */</div><div class="line">    public String getBodyContentType() &#123;</div><div class="line">        return &quot;application/x-www-form-urlencoded; charset=&quot; + getParamsEncoding();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns the raw POST or PUT body to be sent.</div><div class="line">     * 返回将要发送的request的POST主体</div><div class="line">     * </div><div class="line">     * &lt;p&gt;By default, the body consists of the request parameters in</div><div class="line">     * application/x-www-form-urlencoded format. When overriding this method, consider overriding</div><div class="line">     * &#123;@link #getBodyContentType()&#125; as well to match the new body format.</div><div class="line">     *</div><div class="line">     * @throws AuthFailureError in the event of auth failure</div><div class="line">     */</div><div class="line">    public byte[] getBody() throws AuthFailureError &#123;</div><div class="line">        Map&lt;String, String&gt; params = getParams();</div><div class="line">        if (params != null &amp;&amp; params.size() &gt; 0) &#123;</div><div class="line">            return encodeParameters(params, getParamsEncoding());</div><div class="line">        &#125;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Converts &lt;code&gt;params&lt;/code&gt; into an application/x-www-form-urlencoded encoded string.</div><div class="line">     * 将请求里面包含的参数转码</div><div class="line">     */</div><div class="line">    private byte[] encodeParameters(Map&lt;String, String&gt; params, String paramsEncoding) &#123;</div><div class="line">        StringBuilder encodedParams = new StringBuilder();</div><div class="line">        try &#123;</div><div class="line">            for (Map.Entry&lt;String, String&gt; entry : params.entrySet()) &#123;</div><div class="line">                encodedParams.append(URLEncoder.encode(entry.getKey(), paramsEncoding));</div><div class="line">                encodedParams.append(&apos;=&apos;);</div><div class="line">                encodedParams.append(URLEncoder.encode(entry.getValue(), paramsEncoding));</div><div class="line">                encodedParams.append(&apos;&amp;&apos;);</div><div class="line">            &#125;</div><div class="line">            return encodedParams.toString().getBytes(paramsEncoding);</div><div class="line">        &#125; catch (UnsupportedEncodingException uee) &#123;</div><div class="line">            throw new RuntimeException(&quot;Encoding not supported: &quot; + paramsEncoding, uee);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Set whether or not responses to this request should be cached.</div><div class="line">     *</div><div class="line">     * @return This Request object to allow for chaining.</div><div class="line">     */</div><div class="line">    public final Request&lt;?&gt; setShouldCache(boolean shouldCache) &#123;</div><div class="line">        mShouldCache = shouldCache;</div><div class="line">        return this;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns true if responses to this request should be cached.</div><div class="line">     */</div><div class="line">    public final boolean shouldCache() &#123;</div><div class="line">        return mShouldCache;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Priority values.  Requests will be processed from higher priorities to</div><div class="line">     * lower priorities, in FIFO order.</div><div class="line">     * request将按照优先级从高到低，先进先出的顺序被处理</div><div class="line">     */</div><div class="line">    public enum Priority &#123;</div><div class="line">        LOW,</div><div class="line">        NORMAL,</div><div class="line">        HIGH,</div><div class="line">        IMMEDIATE</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns the &#123;@link Priority&#125; of this request; &#123;@link Priority#NORMAL&#125; by default.</div><div class="line">     * 返回request的优先级</div><div class="line">     * 默认为normal</div><div class="line">     */</div><div class="line">    public Priority getPriority() &#123;</div><div class="line">        return Priority.NORMAL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns the socket timeout in milliseconds per retry attempt. (This value can be changed</div><div class="line">     * per retry attempt if a backoff is specified via backoffTimeout()). If there are no retry</div><div class="line">     * attempts remaining, this will cause delivery of a &#123;@link TimeoutError&#125; error.</div><div class="line">     * 返回每次超时请求时间阀值</div><div class="line">     * 每次retry如果返回的是请求超时的结果，则timeout会逐渐变大</div><div class="line">     * 如果</div><div class="line">     */</div><div class="line">    public final int getTimeoutMs() &#123;</div><div class="line">        return mRetryPolicy.getCurrentTimeout();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns the retry policy that should be used  for this request.</div><div class="line">     */</div><div class="line">    public RetryPolicy getRetryPolicy() &#123;</div><div class="line">        return mRetryPolicy;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Mark this request as having a response delivered on it.  This can be used</div><div class="line">     * later in the request&apos;s lifetime for suppressing identical responses.</div><div class="line">     */</div><div class="line">    public void markDelivered() &#123;</div><div class="line">        mResponseDelivered = true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns true if this request has had a response delivered for it.</div><div class="line">     */</div><div class="line">    public boolean hasHadResponseDelivered() &#123;</div><div class="line">        return mResponseDelivered;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Subclasses must implement this to parse the raw network response</div><div class="line">     * and return an appropriate response type. This method will be</div><div class="line">     * called from a worker thread.  The response will not be delivered</div><div class="line">     * if you return null.</div><div class="line">     * 子类必须要实现这个方法来解析network response并返回一个合适的返回类型</div><div class="line">     * </div><div class="line">     * @param response Response from the network</div><div class="line">     * @return The parsed response, or null in the case of an error</div><div class="line">     */</div><div class="line">    abstract protected Response&lt;T&gt; parseNetworkResponse(NetworkResponse response);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Subclasses can override this method to parse &apos;networkError&apos; and return a more specific error.</div><div class="line">     * 子类重写这个方法，来解析networkError</div><div class="line">     * &lt;p&gt;The default implementation just returns the passed &apos;networkError&apos;.&lt;/p&gt;</div><div class="line">     *</div><div class="line">     * @param volleyError the error retrieved from the network</div><div class="line">     * @return an NetworkError augmented with additional information</div><div class="line">     */</div><div class="line">    protected VolleyError parseNetworkError(VolleyError volleyError) &#123;</div><div class="line">        return volleyError;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Subclasses must implement this to perform delivery of the parsed</div><div class="line">     * response to their listeners.  The given response is guaranteed to</div><div class="line">     * be non-null; responses that fail to parse are not delivered.</div><div class="line">     *</div><div class="line">     * 子类必须实现这个方法来传递一个解析好了的response</div><div class="line">     *</div><div class="line">     * @param response The parsed response returned by</div><div class="line">     * &#123;@link #parseNetworkResponse(NetworkResponse)&#125;</div><div class="line">     */</div><div class="line">    abstract protected void deliverResponse(T response);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Delivers error message to the ErrorListener that the Request was</div><div class="line">     * initialized with.</div><div class="line">     *</div><div class="line">     * @param error Error details</div><div class="line">     */</div><div class="line">    public void deliverError(VolleyError error) &#123;</div><div class="line">        if (mErrorListener != null) &#123;</div><div class="line">            mErrorListener.onErrorResponse(error);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Our comparator sorts from high to low priority, and secondarily by</div><div class="line">     * sequence number to provide FIFO ordering.</div><div class="line">     * Request类实现了Comparable类</div><div class="line">     * 需要重写compareTo()方法</div><div class="line">     * 来达到能够将两个request相互比较的目的</div><div class="line">     * 这里面的比较策略是通过看两request的优先级大小</div><div class="line">     * 高优先级的排在前面，相等的优先级就按照排队时候发放的序列号来比较</div><div class="line">     * (在RequestQueue.java中的add()函数里会给每个加入到队列中的request发放一个sequence)</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public int compareTo(Request&lt;T&gt; other) &#123;</div><div class="line">        Priority left = this.getPriority();</div><div class="line">        Priority right = other.getPriority();</div><div class="line"></div><div class="line">        // High-priority requests are &quot;lesser&quot; so they are sorted to the front.</div><div class="line">        // Equal priorities are sorted by sequence number to provide FIFO ordering.</div><div class="line">        return left == right ?</div><div class="line">                this.mSequence - other.mSequence :</div><div class="line">                right.ordinal() - left.ordinal();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 重写toString()方法</div><div class="line">     * 提供在打印request的时候的一些数据</div><div class="line">     * 也方便序列化</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        String trafficStatsTag = &quot;0x&quot; + Integer.toHexString(getTrafficStatsTag());</div><div class="line">        return (mCanceled ? &quot;[X] &quot; : &quot;[ ] &quot;) + getUrl() + &quot; &quot; + trafficStatsTag + &quot; &quot;</div><div class="line">                + getPriority() + &quot; &quot; + mSequence;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static long sCounter;</div><div class="line">    /**</div><div class="line">     *  sha1(Request:method:url:timestamp:counter)</div><div class="line">     *</div><div class="line">     * @param method http method</div><div class="line">     * @param url               http request url</div><div class="line">     * @return sha1 hash string</div><div class="line">     */</div><div class="line">    private static String createIdentifier(final int method, final String url) &#123;</div><div class="line">        return InternalUtils.sha1Hash(&quot;Request:&quot; + method + &quot;:&quot; + url +</div><div class="line">                &quot;:&quot; + System.currentTimeMillis() + &quot;:&quot; + (sCounter++));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在<code>Request.java</code>的基础上，Volley示范性的扩展了<code>StringReuqest.java</code>以及<code>JSONArrayRequest.java</code>等等，在这里就不分析源代码了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> volley </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Volley框架解析-六-Cache接口及其默认实现类解析</title>
      <link href="/2017/04/20/Volley%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90-%E5%85%AD-Cache%E6%8E%A5%E5%8F%A3%E5%8F%8A%E5%85%B6%E9%BB%98%E8%AE%A4%E5%AE%9E%E7%8E%B0%E7%B1%BB%E8%A7%A3%E6%9E%90/"/>
      <url>/2017/04/20/Volley%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90-%E5%85%AD-Cache%E6%8E%A5%E5%8F%A3%E5%8F%8A%E5%85%B6%E9%BB%98%E8%AE%A4%E5%AE%9E%E7%8E%B0%E7%B1%BB%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="1-前言-可直接无视跳过"><a href="#1-前言-可直接无视跳过" class="headerlink" title="1. 前言(可直接无视跳过"></a>1. 前言(可直接无视跳过</h3><p>前面涉及到网络的部分都介绍完了，在处理网络请求返回的数据时，会根据request结果是否需要缓存来进行不同的处理。如需要缓存结果，就涉及到了<code>Cache.java</code>及其默认实现类<code>DiskBasedCache.java</code>。</p><a id="more"></a><h3 id="2-Cache-java"><a href="#2-Cache-java" class="headerlink" title="2. Cache.java"></a>2. Cache.java</h3><p>用于处理缓存的接口，里面有很多抽象的方法等着被实现，里面还有一个static类<code>Entry</code>,里面有些关于缓存的单元信息。(例如，缓存的内容，缓存过期的时间，缓存需要刷新的时间等等）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line">package com.android.volley;</div><div class="line"></div><div class="line">/**</div><div class="line"> * An interface for a cache keyed by a String with * a byte array as data.</div><div class="line"> * 一个用于缓存的接口</div><div class="line"> */</div><div class="line">public interface Cache &#123;</div><div class="line">    /**</div><div class="line">     * Retrieves an entry from the cache.</div><div class="line">     * 用来获取缓存的入口，通过传入的key</div><div class="line">     * </div><div class="line">     * @param key Cache key</div><div class="line">     * 这个key应该是request对应其缓存的唯一key</div><div class="line">     *</div><div class="line">     * @return An &#123;@link Entry&#125; or null in the event of a cache miss</div><div class="line">     */</div><div class="line">    public Entry get(String key);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Adds or replaces an entry to the cache.</div><div class="line">     * 添加或者给request更新缓存</div><div class="line">     * @param key Cache key</div><div class="line">     * @param entry Data to store and metadata for cache coherency, TTL, etc.</div><div class="line">     */</div><div class="line">    public void put(String key, Entry entry);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Performs any potentially long-running actions needed to initialize the cache;</div><div class="line">     * will be called from a worker thread.</div><div class="line">     */</div><div class="line">    public void initialize();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Invalidates an entry in the cache.</div><div class="line">     * 这个函数是将key对应的缓存置于过期</div><div class="line">     * 分为fully expire和soft expire， 目前还不知道是什么意思 = =</div><div class="line">     * </div><div class="line">     * @param key Cache key</div><div class="line">     * @param fullExpire True to fully expire the entry, false to soft expire</div><div class="line">     */</div><div class="line">    public void invalidate(String key, boolean fullExpire);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Removes an entry from the cache.</div><div class="line">     * 将key对应的缓存直接移除掉</div><div class="line">     * </div><div class="line">     * @param key Cache key</div><div class="line">     */</div><div class="line">    public void remove(String key);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Empties the cache.</div><div class="line">     * 清除所有的缓存</div><div class="line">     */</div><div class="line">    public void clear();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Data and metadata for an entry returned by the cache.</div><div class="line">     */</div><div class="line">    public static class Entry &#123;</div><div class="line">        /** The data returned from cache. */</div><div class="line">        public byte[] data;</div><div class="line"></div><div class="line">        /** ETag for cache coherency. */</div><div class="line">        public String etag;</div><div class="line"></div><div class="line">        /** Date of this response as reported by the server. */</div><div class="line">        public long serverDate;</div><div class="line"></div><div class="line">        /** The last modified date for the requested object. */</div><div class="line">        public long lastModified;</div><div class="line"></div><div class="line">        /** TTL for this record.</div><div class="line">         *  根据后面的isExpired()函数来看</div><div class="line">         *  该条数据的意思应该是缓存过期的时间 </div><div class="line">         */</div><div class="line">        public long ttl;</div><div class="line"></div><div class="line">        /** Soft TTL for this record. </div><div class="line">         *  根据refreshNeeded()函数来看</div><div class="line">         *  意思是需要更新缓存的时间点</div><div class="line">         */</div><div class="line">        public long softTtl;</div><div class="line"></div><div class="line">        /** Immutable response headers as received from server; must be non-null. */</div><div class="line">        public Map&lt;String, String&gt; responseHeaders = Collections.emptyMap();</div><div class="line"></div><div class="line">       /** </div><div class="line">         * True if the entry is expired. </div><div class="line">         * 用来查看缓存是否过期了</div><div class="line">         */</div><div class="line">        public boolean isExpired() &#123;</div><div class="line">            return this.ttl &lt; System.currentTimeMillis();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /** True if a refresh is needed from the original data source. */</div><div class="line">        public boolean refreshNeeded() &#123;</div><div class="line">            return this.softTtl &lt; System.currentTimeMillis();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3-DiskBasedCache-java"><a href="#3-DiskBasedCache-java" class="headerlink" title="3. DiskBasedCache.java"></a>3. DiskBasedCache.java</h3><p>实现了Cache.java接口，专门和本地存储的文件打交道，负责缓存的写入与读取。涉及到了一部分InputStream和OutputStream还有File的知识。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Cache implementation that caches files directly onto the hard disk in the specified</div><div class="line"> * directory. The default disk usage size is 5MB, but is configurable.</div><div class="line"> * 实现了Cache接口</div><div class="line"> * 专门用于和本地文件交互的一个类</div><div class="line"> * 存入缓存和取出缓存等功能</div><div class="line"> */</div><div class="line">public class DiskBasedCache implements Cache &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Map of the Key, CacheHeader pairs </div><div class="line">     * CacheHeader.java为本类中的一个static类</div><div class="line">     * 里面存放着一些</div><div class="line">     */</div><div class="line">    private final Map&lt;String, CacheHeader&gt; mEntries =</div><div class="line">            new LinkedHashMap&lt;String, CacheHeader&gt;(16, .75f, true);</div><div class="line"></div><div class="line">    /** </div><div class="line">     * Total amount of space currently used by the cache in bytes. </div><div class="line">     * 当前缓存的总大小</div><div class="line">     */</div><div class="line">    private long mTotalSize = 0;</div><div class="line"></div><div class="line">    /** </div><div class="line">     * The root directory to use for the cache. </div><div class="line">     * 缓存的根目录</div><div class="line">     */</div><div class="line">    private final File mRootDirectory;</div><div class="line"></div><div class="line">    /** </div><div class="line">     * The maximum size of the cache in bytes. </div><div class="line">     * 缓存能接受的最大字节数</div><div class="line">     */</div><div class="line">    private final int mMaxCacheSizeInBytes;</div><div class="line"></div><div class="line">    /** </div><div class="line">     * Default maximum disk usage in bytes.</div><div class="line">     * 默认缓存能使用的最大空间</div><div class="line">     */</div><div class="line">    private static final int DEFAULT_DISK_USAGE_BYTES = 5 * 1024 * 1024;</div><div class="line"></div><div class="line">    /** </div><div class="line">     * High water mark percentage for the cache</div><div class="line">     * 类似于水位警戒线一样的标识</div><div class="line">     */</div><div class="line">    private static final float HYSTERESIS_FACTOR = 0.9f;</div><div class="line"></div><div class="line">    /** </div><div class="line">     * Magic number for current version of cache file format. </div><div class="line">     * </div><div class="line">     */</div><div class="line">    private static final int CACHE_MAGIC = 0x20150306;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Constructs an instance of the DiskBasedCache at the specified directory.</div><div class="line">     * 在指定的目录下面创建一个DiskBasedCache</div><div class="line">     *</div><div class="line">     * @param rootDirectory The root directory of the cache.</div><div class="line">     * @param maxCacheSizeInBytes The maximum size of the cache in bytes.</div><div class="line">     */</div><div class="line">    public DiskBasedCache(File rootDirectory, int maxCacheSizeInBytes) &#123;</div><div class="line">        mRootDirectory = rootDirectory;</div><div class="line">        mMaxCacheSizeInBytes = maxCacheSizeInBytes;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Constructs an instance of the DiskBasedCache at the specified directory using</div><div class="line">     * the default maximum cache size of 5MB.</div><div class="line">     * @param rootDirectory The root directory of the cache.</div><div class="line">     */</div><div class="line">    public DiskBasedCache(File rootDirectory) &#123;</div><div class="line">        this(rootDirectory, DEFAULT_DISK_USAGE_BYTES);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Clears the cache. Deletes all cached files from disk.</div><div class="line">     * 清除当前目录下的缓存，删除所有缓存文件 </div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public synchronized void clear() &#123;</div><div class="line">        File[] files = mRootDirectory.listFiles();</div><div class="line">        if (files != null) &#123;</div><div class="line">            for (File file : files) &#123;</div><div class="line">                file.delete();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        mEntries.clear();</div><div class="line">        mTotalSize = 0;</div><div class="line">        VolleyLog.d(&quot;Cache cleared.&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns the cache entry with the specified key if it exists, null otherwise.</div><div class="line">     * 通过特殊的key，来获取与缓存交流的接口(entry)</div><div class="line">     * 如果没有的话则返回null</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public synchronized Entry get(String key) &#123;</div><div class="line"></div><div class="line">        CacheHeader entry = mEntries.get(key);</div><div class="line">        // if the entry does not exist, return.</div><div class="line">        if (entry == null) &#123;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        //依据key获取缓存的文件，如果不存在则创建一个</div><div class="line">        File file = getFileForKey(key);</div><div class="line"></div><div class="line">        CountingInputStream cis = null;</div><div class="line"></div><div class="line">        try &#123;</div><div class="line"></div><div class="line">            cis = new CountingInputStream(new BufferedInputStream(new FileInputStream(file)));</div><div class="line">            CacheHeader.readHeader(cis); // eat header</div><div class="line">            byte[] data = streamToBytes(cis, (int) (file.length() - cis.bytesRead));</div><div class="line">            return entry.toCacheEntry(data);</div><div class="line"></div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            VolleyLog.d(&quot;%s: %s&quot;, file.getAbsolutePath(), e.toString());</div><div class="line">            remove(key);</div><div class="line">            return null;</div><div class="line">        &#125;  catch (NegativeArraySizeException e) &#123;</div><div class="line">            VolleyLog.d(&quot;%s: %s&quot;, file.getAbsolutePath(), e.toString());</div><div class="line">            remove(key);</div><div class="line">            return null;</div><div class="line">        &#125; finally &#123;</div><div class="line">            if (cis != null) &#123;</div><div class="line">                try &#123;</div><div class="line">                    cis.close();</div><div class="line">                &#125; catch (IOException ioe) &#123;</div><div class="line">                    return null;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Initializes the DiskBasedCache by scanning for all files currently in the</div><div class="line">     * specified root directory. Creates the root directory if necessary.</div><div class="line">     * 对缓存目录的初始化工作，检查目录是否存在</div><div class="line">     * 如果不存在就给重新创建一个</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public synchronized void initialize() &#123;</div><div class="line">        if (!mRootDirectory.exists()) &#123;</div><div class="line">            if (!mRootDirectory.mkdirs()) &#123;</div><div class="line">                VolleyLog.e(&quot;Unable to create cache dir %s&quot;, mRootDirectory.getAbsolutePath());</div><div class="line">            &#125;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 如果缓存目录已经存在了</div><div class="line">         * 则将缓存目录下面的文件都扫描一遍</div><div class="line">         * 将关于缓存文件的部分信息加载到内存中来</div><div class="line">         * 方便后面对缓存的查询等工作</div><div class="line">         */</div><div class="line"></div><div class="line">        File[] files = mRootDirectory.listFiles();</div><div class="line">        if (files == null) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        for (File file : files) &#123;</div><div class="line">            BufferedInputStream fis = null;</div><div class="line">            try &#123;</div><div class="line">                fis = new BufferedInputStream(new FileInputStream(file));</div><div class="line">                CacheHeader entry = CacheHeader.readHeader(fis);</div><div class="line">                entry.size = file.length();</div><div class="line">                putEntry(entry.key, entry);</div><div class="line">            &#125; catch (IOException e) &#123;</div><div class="line">                if (file != null) &#123;</div><div class="line">                   file.delete();</div><div class="line">                &#125;</div><div class="line">            &#125; finally &#123;</div><div class="line">                try &#123;</div><div class="line">                    if (fis != null) &#123;</div><div class="line">                        fis.close();</div><div class="line">                    &#125;</div><div class="line">                &#125; catch (IOException ignored) &#123; &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Invalidates an entry in the cache.</div><div class="line">     * 将key对应的缓存作废</div><div class="line">     * 如果fullExpire为true，则将整个entry作废</div><div class="line">     * 如果为false,则只是软作废，也就是将缓存置于需要刷新的状态</div><div class="line">     *</div><div class="line">     * @param key Cache key</div><div class="line">     * @param fullExpire True to fully expire the entry, false to soft expire</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public synchronized void invalidate(String key, boolean fullExpire) &#123;</div><div class="line">        Entry entry = get(key);</div><div class="line">        if (entry != null) &#123;</div><div class="line">            entry.softTtl = 0;</div><div class="line">            if (fullExpire) &#123;</div><div class="line">                entry.ttl = 0;</div><div class="line">            &#125;</div><div class="line">            put(key, entry);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Puts the entry with the specified key into the cache.</div><div class="line">     * 将entry中包含的信息存放到key对应的缓存文件中去</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public synchronized void put(String key, Entry entry) &#123;</div><div class="line"></div><div class="line">        pruneIfNeeded(entry.data.length);</div><div class="line"></div><div class="line">        File file = getFileForKey(key);</div><div class="line">        try &#123;</div><div class="line">            BufferedOutputStream fos = new BufferedOutputStream(new FileOutputStream(file));</div><div class="line">            CacheHeader e = new CacheHeader(key, entry);</div><div class="line">            boolean success = e.writeHeader(fos);</div><div class="line">            if (!success) &#123;</div><div class="line">                fos.close();</div><div class="line">                VolleyLog.d(&quot;Failed to write header for %s&quot;, file.getAbsolutePath());</div><div class="line">                throw new IOException();</div><div class="line">            &#125;</div><div class="line">            fos.write(entry.data);</div><div class="line">            fos.close();</div><div class="line">            putEntry(key, e);</div><div class="line">            return;</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">        &#125;</div><div class="line">        boolean deleted = file.delete();</div><div class="line">        if (!deleted) &#123;</div><div class="line">            VolleyLog.d(&quot;Could not clean up file %s&quot;, file.getAbsolutePath());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Removes the specified key from the cache if it exists.</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public synchronized void remove(String key) &#123;</div><div class="line">        boolean deleted = getFileForKey(key).delete();</div><div class="line">        removeEntry(key);</div><div class="line">        if (!deleted) &#123;</div><div class="line">            VolleyLog.d(&quot;Could not delete cache entry for key=%s, filename=%s&quot;,</div><div class="line">                    key, getFilenameForKey(key));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Creates a pseudo-unique filename for the specified cache key.</div><div class="line">     * 通过给定的key，前半段的hashCode和后半段的hashCode连接起来</div><div class="line">     * 作为一个独一无二的文件名</div><div class="line">     * @param key The key to generate a file name for.</div><div class="line">     * @return A pseudo-unique filename.</div><div class="line">     */</div><div class="line">    private String getFilenameForKey(String key) &#123;</div><div class="line">        int firstHalfLength = key.length() / 2;</div><div class="line">        String localFilename = String.valueOf(key.substring(0, firstHalfLength).hashCode());</div><div class="line">        localFilename += String.valueOf(key.substring(firstHalfLength).hashCode());</div><div class="line">        return localFilename;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns a file object for the given cache key.</div><div class="line">     * 通过调用getFilenameForKey()方法来获取相对路径</div><div class="line">     */</div><div class="line">    public File getFileForKey(String key) &#123;</div><div class="line">        return new File(mRootDirectory, getFilenameForKey(key));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Prunes the cache to fit the amount of bytes specified.</div><div class="line">     * 从已有的缓存中清除数据</div><div class="line">     * 直到扫出了一片neededSapce大小的空地为止</div><div class="line">     * @param neededSpace The amount of bytes we are trying to fit into the cache.</div><div class="line">     */</div><div class="line">    private void pruneIfNeeded(int neededSpace) &#123;</div><div class="line">        if ((mTotalSize + neededSpace) &lt; mMaxCacheSizeInBytes) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        if (VolleyLog.DEBUG) &#123;</div><div class="line">            VolleyLog.v(&quot;Pruning old cache entries.&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        long before = mTotalSize;</div><div class="line">        int prunedFiles = 0;</div><div class="line">        long startTime = SystemClock.elapsedRealtime();</div><div class="line"></div><div class="line">        Iterator&lt;Map.Entry&lt;String, CacheHeader&gt;&gt; iterator = mEntries.entrySet().iterator();</div><div class="line"></div><div class="line">        while (iterator.hasNext()) &#123;</div><div class="line"></div><div class="line">            Map.Entry&lt;String, CacheHeader&gt; entry = iterator.next();</div><div class="line"></div><div class="line">            CacheHeader e = entry.getValue();</div><div class="line"></div><div class="line">            boolean deleted = getFileForKey(e.key).delete();</div><div class="line"></div><div class="line">            if (deleted) &#123;</div><div class="line">                mTotalSize -= e.size;</div><div class="line">            &#125; else &#123;</div><div class="line">               VolleyLog.d(&quot;Could not delete cache entry for key=%s, filename=%s&quot;,</div><div class="line">                       e.key, getFilenameForKey(e.key));</div><div class="line">            &#125;</div><div class="line">            iterator.remove();</div><div class="line">            prunedFiles++;</div><div class="line"></div><div class="line">            /**</div><div class="line">             * 一直清除缓存</div><div class="line">             * 直到存入这个neededSapce之后还有一小部分空余的地方</div><div class="line">             */</div><div class="line">            if ((mTotalSize + neededSpace) &lt; mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) &#123;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (VolleyLog.DEBUG) &#123;</div><div class="line">            VolleyLog.v(&quot;pruned %d files, %d bytes, %d ms&quot;,</div><div class="line">                    prunedFiles, (mTotalSize - before), SystemClock.elapsedRealtime() - startTime);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Puts the entry with the specified key into the cache.</div><div class="line">     * 将目录下指定的缓存加载到mEntries中去</div><div class="line">     * 为了方便之后对缓存的读写操作</div><div class="line">     * 全部读写一遍放在内存里面，对查询什么的都会方便很多</div><div class="line">     *</div><div class="line">     * @param key The key to identify the entry by.</div><div class="line">     * @param entry The entry to cache.</div><div class="line">     */</div><div class="line">    private void putEntry(String key, CacheHeader entry) &#123;</div><div class="line">        if (!mEntries.containsKey(key)) &#123;</div><div class="line">            mTotalSize += entry.size;</div><div class="line">        &#125; else &#123;</div><div class="line">            CacheHeader oldEntry = mEntries.get(key);</div><div class="line">            mTotalSize += (entry.size - oldEntry.size);</div><div class="line">        &#125;</div><div class="line">        mEntries.put(key, entry);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Removes the entry identified by &apos;key&apos; from the cache.</div><div class="line">     */</div><div class="line">    private void removeEntry(String key) &#123;</div><div class="line">        CacheHeader entry = mEntries.get(key);</div><div class="line">        if (entry != null) &#123;</div><div class="line">            mTotalSize -= entry.size;</div><div class="line">            mEntries.remove(key);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Reads the contents of an InputStream into a byte[].</div><div class="line">     * 从InputStream中读取指定长度的数据</div><div class="line">     * </div><div class="line">     */</div><div class="line">    private static byte[] streamToBytes(InputStream in, int length) throws IOException &#123;</div><div class="line">        byte[] bytes = new byte[length];</div><div class="line">        int count;</div><div class="line">        int pos = 0;</div><div class="line">        while (pos &lt; length &amp;&amp; ((count = in.read(bytes, pos, length - pos)) != -1)) &#123;</div><div class="line">            pos += count;</div><div class="line">        &#125;</div><div class="line">        if (pos != length) &#123;</div><div class="line">            throw new IOException(&quot;Expected &quot; + length + &quot; bytes, read &quot; + pos + &quot; bytes&quot;);</div><div class="line">        &#125;</div><div class="line">        return bytes;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Handles holding onto the cache headers for an entry.</div><div class="line">     */</div><div class="line">    // Visible for testing.</div><div class="line">    static class CacheHeader &#123;</div><div class="line">        /** </div><div class="line">         * The size of the data identified by this CacheHeader. (This is not</div><div class="line">         * serialized to disk.</div><div class="line">         * </div><div class="line">         * CacheHeader所表示的数据段的大小 </div><div class="line">         */</div><div class="line">        public long size;</div><div class="line"></div><div class="line">        /** </div><div class="line">         * The key that identifies the cache entry. </div><div class="line">         * 这个key应该是request对应其缓存的唯一key</div><div class="line">         */</div><div class="line">        public String key;</div><div class="line"></div><div class="line">        /** </div><div class="line">         * ETag for cache coherence.</div><div class="line">         *</div><div class="line">         */</div><div class="line">        public String etag;</div><div class="line"></div><div class="line">        /** </div><div class="line">         * Date of this response as reported by the server. </div><div class="line">         * 缓存起来的数据返回的日期</div><div class="line">         */</div><div class="line">        public long serverDate;</div><div class="line"></div><div class="line">        /** </div><div class="line">         * The last modified date for the requested object. </div><div class="line">         * 最后一次更改的时间</div><div class="line">         */</div><div class="line">        public long lastModified;</div><div class="line"></div><div class="line">        /** </div><div class="line">         * TTL for this record. </div><div class="line">         * ping时候返回的TTL=128的概念如下</div><div class="line">         * TTL：生存时间</div><div class="line">         * 指定数据报被路由器丢弃之前允许通过的网段数量。</div><div class="line">         * TTL 是由发送主机设置的，以防止数据包不断在 IP 互联网络上永不终止地循环。转发 IP 数据包时，要求路由器至少将 TTL 减小 1。</div><div class="line">         *  </div><div class="line">         * 但是= =，注意这里的和上面的那种不是一个概念，这里只是模拟了上面的概念，但也是用来标志缓存存活时间的。</div><div class="line">         */</div><div class="line">        public long ttl;</div><div class="line"></div><div class="line">        /** </div><div class="line">         * Soft TTL for this record. </div><div class="line">         * </div><div class="line">         * 根据refreshNeeded()函数来看</div><div class="line">         * 意思是需要更新缓存的时间点</div><div class="line">         */</div><div class="line">        public long softTtl;</div><div class="line"></div><div class="line">        /** </div><div class="line">         * Headers from the response resulting in this cache entry. </div><div class="line">         * 用来指向上一次response的header</div><div class="line">         */</div><div class="line">        public Map&lt;String, String&gt; responseHeaders;</div><div class="line"></div><div class="line">        private CacheHeader() &#123; &#125;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * Instantiates a new CacheHeader object</div><div class="line">         * @param key The key that identifies the cache entry</div><div class="line">         * @param entry The cache entry.</div><div class="line">         */</div><div class="line">        public CacheHeader(String key, Entry entry) &#123;</div><div class="line">            this.key = key;</div><div class="line">            this.size = entry.data.length;</div><div class="line">            this.etag = entry.etag;</div><div class="line">            this.serverDate = entry.serverDate;</div><div class="line">            this.lastModified = entry.lastModified;</div><div class="line">            this.ttl = entry.ttl;</div><div class="line">            this.softTtl = entry.softTtl;</div><div class="line">            this.responseHeaders = entry.responseHeaders;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * Reads the header off of an InputStream and returns a CacheHeader object.</div><div class="line">         * 从InputStream中读取数据并组建一个CacheHeader对象实例</div><div class="line">         * @param is The InputStream to read from.</div><div class="line">         * @throws IOException</div><div class="line">         */</div><div class="line">        public static CacheHeader readHeader(InputStream is) throws IOException &#123;</div><div class="line">            CacheHeader entry = new CacheHeader();</div><div class="line">            int magic = readInt(is);</div><div class="line">            if (magic != CACHE_MAGIC) &#123;</div><div class="line">                // don&apos;t bother deleting, it&apos;ll get pruned eventually</div><div class="line">                throw new IOException();</div><div class="line">            &#125;</div><div class="line">            entry.key = readString(is);</div><div class="line">            entry.etag = readString(is);</div><div class="line">            if (entry.etag.equals(&quot;&quot;)) &#123;</div><div class="line">                entry.etag = null;</div><div class="line">            &#125;</div><div class="line">            entry.serverDate = readLong(is);</div><div class="line">            entry.lastModified = readLong(is);</div><div class="line">            entry.ttl = readLong(is);</div><div class="line">            entry.softTtl = readLong(is);</div><div class="line">            entry.responseHeaders = readStringStringMap(is);</div><div class="line"></div><div class="line">            return entry;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * Creates a cache entry for the specified data.</div><div class="line">         * 从CacheHeader转换成Entry类的实例</div><div class="line">         */</div><div class="line">        public Entry toCacheEntry(byte[] data) &#123;</div><div class="line">            Entry e = new Entry();</div><div class="line">            e.data = data;</div><div class="line">            e.etag = etag;</div><div class="line">            e.serverDate = serverDate;</div><div class="line">            e.lastModified = lastModified;</div><div class="line">            e.ttl = ttl;</div><div class="line">            e.softTtl = softTtl;</div><div class="line">            e.responseHeaders = responseHeaders;</div><div class="line">            return e;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * Writes the contents of this CacheHeader to the specified OutputStream.</div><div class="line">         * 将CacheHeader里面的数据写入指定的OutputStream中</div><div class="line">         */</div><div class="line">        public boolean writeHeader(OutputStream os) &#123;</div><div class="line">            try &#123;</div><div class="line">                writeInt(os, CACHE_MAGIC);</div><div class="line">                writeString(os, key);</div><div class="line">                writeString(os, etag == null ? &quot;&quot; : etag);</div><div class="line">                writeLong(os, serverDate);</div><div class="line">                writeLong(os, lastModified);</div><div class="line">                writeLong(os, ttl);</div><div class="line">                writeLong(os, softTtl);</div><div class="line">                writeStringStringMap(responseHeaders, os);</div><div class="line">                os.flush();</div><div class="line">                return true;</div><div class="line">            &#125; catch (IOException e) &#123;</div><div class="line">                VolleyLog.d(&quot;%s&quot;, e.toString());</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 继承了FilterInputStream</div><div class="line">     * 没啥特别的= =</div><div class="line">     */</div><div class="line"></div><div class="line">    private static class CountingInputStream extends FilterInputStream &#123;</div><div class="line"></div><div class="line">        private int bytesRead = 0;</div><div class="line"></div><div class="line">        private CountingInputStream(InputStream in) &#123;</div><div class="line">            super(in);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public int read() throws IOException &#123;</div><div class="line">            int result = super.read();</div><div class="line">            if (result != -1) &#123;</div><div class="line">                bytesRead++;</div><div class="line">            &#125;</div><div class="line">            return result;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public int read(byte[] buffer, int offset, int count) throws IOException &#123;</div><div class="line">            int result = super.read(buffer, offset, count);</div><div class="line">            if (result != -1) &#123;</div><div class="line">                bytesRead += result;</div><div class="line">            &#125;</div><div class="line">            return result;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /*</div><div class="line">     * Homebrewed simple serialization system used for reading and writing cache</div><div class="line">     * headers on disk. Once upon a time, this used the standard Java</div><div class="line">     * Object&#123;Input,Output&#125;Stream, but the default implementation relies heavily</div><div class="line">     * on reflection (even for standard types) and generates a ton of garbage.</div><div class="line">     * </div><div class="line">     */</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Simple wrapper around &#123;@link InputStream#read()&#125; that throws EOFException</div><div class="line">     * instead of returning -1.</div><div class="line">     * 如果文件读到了末尾直接抛出异常</div><div class="line">     */</div><div class="line">    private static int read(InputStream is) throws IOException &#123;</div><div class="line">        int b = is.read();</div><div class="line">        if (b == -1) &#123;</div><div class="line">            throw new EOFException();</div><div class="line">        &#125;</div><div class="line">        return b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 刚开始看到这里的时候没有明白是什么意思= =</div><div class="line">     * 就不明白了，好好的一个int类型的数据</div><div class="line">     * 为什么非要分段写入呢，一个字节一个字节的写入</div><div class="line">     * 后来查了资料才发现，OutputStream及其子类的write()方法</div><div class="line">     * 一次都只能写入一个byte，int类型有4个byte，分四次写入没什么问题咯</div><div class="line">     */</div><div class="line"></div><div class="line">    static void writeInt(OutputStream os, int n) throws IOException &#123;</div><div class="line">        os.write((n &gt;&gt; 0) &amp; 0xff);</div><div class="line">        os.write((n &gt;&gt; 8) &amp; 0xff);</div><div class="line">        os.write((n &gt;&gt; 16) &amp; 0xff);</div><div class="line">        os.write((n &gt;&gt; 24) &amp; 0xff);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static int readInt(InputStream is) throws IOException &#123;</div><div class="line">        int n = 0;</div><div class="line">        n |= (read(is) &lt;&lt; 0);</div><div class="line">        n |= (read(is) &lt;&lt; 8);</div><div class="line">        n |= (read(is) &lt;&lt; 16);</div><div class="line">        n |= (read(is) &lt;&lt; 24);</div><div class="line">        return n;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static void writeLong(OutputStream os, long n) throws IOException &#123;</div><div class="line">        os.write((byte)(n &gt;&gt;&gt; 0));</div><div class="line">        os.write((byte)(n &gt;&gt;&gt; 8));</div><div class="line">        os.write((byte)(n &gt;&gt;&gt; 16));</div><div class="line">        os.write((byte)(n &gt;&gt;&gt; 24));</div><div class="line">        os.write((byte)(n &gt;&gt;&gt; 32));</div><div class="line">        os.write((byte)(n &gt;&gt;&gt; 40));</div><div class="line">        os.write((byte)(n &gt;&gt;&gt; 48));</div><div class="line">        os.write((byte)(n &gt;&gt;&gt; 56));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static long readLong(InputStream is) throws IOException &#123;</div><div class="line">        long n = 0;</div><div class="line">        n |= ((read(is) &amp; 0xFFL) &lt;&lt; 0);</div><div class="line">        n |= ((read(is) &amp; 0xFFL) &lt;&lt; 8);</div><div class="line">        n |= ((read(is) &amp; 0xFFL) &lt;&lt; 16);</div><div class="line">        n |= ((read(is) &amp; 0xFFL) &lt;&lt; 24);</div><div class="line">        n |= ((read(is) &amp; 0xFFL) &lt;&lt; 32);</div><div class="line">        n |= ((read(is) &amp; 0xFFL) &lt;&lt; 40);</div><div class="line">        n |= ((read(is) &amp; 0xFFL) &lt;&lt; 48);</div><div class="line">        n |= ((read(is) &amp; 0xFFL) &lt;&lt; 56);</div><div class="line">        return n;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static void writeString(OutputStream os, String s) throws IOException &#123;</div><div class="line">        byte[] b = s.getBytes(&quot;UTF-8&quot;);</div><div class="line">        writeLong(os, b.length);</div><div class="line">        os.write(b, 0, b.length);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static String readString(InputStream is) throws IOException &#123;</div><div class="line">        int n = (int) readLong(is);</div><div class="line">        byte[] b = streamToBytes(is, n);</div><div class="line">        return new String(b, &quot;UTF-8&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static void writeStringStringMap(Map&lt;String, String&gt; map, OutputStream os) throws IOException &#123;</div><div class="line">        if (map != null) &#123;</div><div class="line">            writeInt(os, map.size());</div><div class="line">            for (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</div><div class="line">                writeString(os, entry.getKey());</div><div class="line">                writeString(os, entry.getValue());</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            writeInt(os, 0);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 从InputStream中读取key类型为String，值类型也为String的Map</div><div class="line">     */ </div><div class="line">    static Map&lt;String, String&gt; readStringStringMap(InputStream is) throws IOException &#123;</div><div class="line">        int size = readInt(is);</div><div class="line">        Map&lt;String, String&gt; result = (size == 0)</div><div class="line">                ? Collections.&lt;String, String&gt;emptyMap()</div><div class="line">                : new HashMap&lt;String, String&gt;(size);</div><div class="line">        for (int i = 0; i &lt; size; i++) &#123;</div><div class="line"></div><div class="line">            //将读出来的byte[]转换成String</div><div class="line"></div><div class="line">            String key = readString(is).intern();</div><div class="line">            String value = readString(is).intern();</div><div class="line">            result.put(key, value);</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>涉及到缓存读写的这个实现类当时阅读的时候还是花了不少时间的= =，人太笨了没办法orz，有什么不妥的地方还望各位juju多多指教，小达感激不尽0.0。下面还有Request.java等类等着去解析呢，Volley中的主角要登场了╭(╯^╰)╮。</p>]]></content>
      
      
      
        <tags>
            
            <tag> volley </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Volley框架解析-五-HttpStack接口及其默认实现类解析</title>
      <link href="/2017/04/19/Volley%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90-%E4%BA%94-HttpStack%E6%8E%A5%E5%8F%A3%E5%8F%8A%E5%85%B6%E9%BB%98%E8%AE%A4%E5%AE%9E%E7%8E%B0%E7%B1%BB%E8%A7%A3%E6%9E%90/"/>
      <url>/2017/04/19/Volley%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90-%E4%BA%94-HttpStack%E6%8E%A5%E5%8F%A3%E5%8F%8A%E5%85%B6%E9%BB%98%E8%AE%A4%E5%AE%9E%E7%8E%B0%E7%B1%BB%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>前面都在做一些准备工作，以及对request队列调度以及维护工作。之前提到，<code>httpResponse = mHttpStack.performRequest(request, headers);</code>这句话是网络请求的核心</p><h3 id="2-HttpStack-java"><a href="#2-HttpStack-java" class="headerlink" title="2. HttpStack.java"></a>2. HttpStack.java</h3><p>接口类，里面包含了一个方法，<code>performRequest()</code>。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * An HTTP stack abstraction.</div><div class="line"> */</div><div class="line">public interface HttpStack &#123;</div><div class="line">    /**</div><div class="line">     * Performs an HTTP request with the given parameters.</div><div class="line">     * 用传入给定的参数来模拟Http请求</div><div class="line">     * </div><div class="line">     * A GET request is sent if request.getPostBody() == null. A POST request is sent otherwise,</div><div class="line">     * and the Content-Type header is set to request.getPostBodyContentType().</div><div class="line">     * 如果传入的request.getPostBody()为空，则发送一个Get类型的请求，否则发送一个Post类型请求</div><div class="line">     * </div><div class="line">     * @param request the request to perform</div><div class="line">     * 即将发送的初始请求，也是volley自己写的= =，进去看看</div><div class="line">     * (还需要添加上额外的header</div><div class="line">     * </div><div class="line">     * @param additionalHeaders additional headers to be sent together with</div><div class="line">     *         &#123;@link Request#getHeaders()&#125;</div><div class="line">     * 需要添加到该request上的header的信息</div><div class="line">     *</div><div class="line">     * @return the HTTP response</div><div class="line">     *</div><div class="line">     */</div><div class="line">    public HttpResponse performRequest(Request&lt;?&gt; request, Map&lt;String, String&gt; additionalHeaders)</div><div class="line">        throws IOException, AuthFailureError;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3-HttpClientStack-java"><a href="#3-HttpClientStack-java" class="headerlink" title="3. HttpClientStack.java"></a><a href="#3-_HttpClientStack-java" title="3\. HttpClientStack.java"></a>3. HttpClientStack.java</h3><p>当sdk版本小于2.3时，Volley会选择用HttpClient来实现请求的发送。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * An HttpStack that performs request over an &#123;@link HttpClient&#125;.</div><div class="line"> * 在sdk小于2.3的时候</div><div class="line"> * 选用HttpClient来实现网络请求</div><div class="line"> */</div><div class="line">public class HttpClientStack implements HttpStack &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 官方文档</div><div class="line">     * Interface for an HTTP client. </div><div class="line">     * HTTP clients encapsulate a smorgasbord of objects required to execute HTTP requests while handling cookies, </div><div class="line">     * authentication, connection management, and other features. </div><div class="line">     * HTTP Clients将发送http请求需要需要做出的信息</div><div class="line">     * Thread safety of HTTP clients depends on the implementation and configuration of the specific client. </div><div class="line">     * </div><div class="line">     */</div><div class="line">    protected final HttpClient mClient;</div><div class="line"></div><div class="line">    //Http请求头里面的固定格式</div><div class="line">    private final static String HEADER_CONTENT_TYPE = &quot;Content-Type&quot;;</div><div class="line"></div><div class="line">    public HttpClientStack(HttpClient client) &#123;</div><div class="line">        mClient = client;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //在组合出一个请求的过程中，向请求体中添加Header的方法，Header是以键值对的形式存在的</div><div class="line">    private static void addHeaders(HttpUriRequest httpRequest, Map&lt;String, String&gt; headers) &#123;</div><div class="line">        for (String key : headers.keySet()) &#123;</div><div class="line">            httpRequest.setHeader(key, headers.get(key));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * NameValuePair 官方文档</div><div class="line">     * A simple class encapsulating an attribute/value pair. </div><div class="line">     * </div><div class="line">     * 该函数将传入的Map里面存放的值进一步转化成由NameValuePair子类组成的数组中</div><div class="line">     */</div><div class="line">    @SuppressWarnings(&quot;unused&quot;)</div><div class="line">    private static List&lt;NameValuePair&gt; getPostParameterPairs(Map&lt;String, String&gt; postParams) &#123;</div><div class="line">        List&lt;NameValuePair&gt; result = new ArrayList&lt;NameValuePair&gt;(postParams.size());</div><div class="line">        for (String key : postParams.keySet()) &#123;</div><div class="line">            result.add(new BasicNameValuePair(key, postParams.get(key)));</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">     //该函数也就是实现HttpStack接口需要实现的方法，用来执行Request的方法</div><div class="line">    @Override</div><div class="line">    public HttpResponse performRequest(Request&lt;?&gt; request, Map&lt;String, String&gt; additionalHeaders)</div><div class="line">            throws IOException, AuthFailureError &#123;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 传入请求体和额外需要添加入的头部</div><div class="line">         * 生成并返回一个HttpUriRequest</div><div class="line">         */</div><div class="line">        HttpUriRequest httpRequest = createHttpRequest(request, additionalHeaders);</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 这个方法在前面实现了，将这些传入的键值对全部添加到httpRequest里面去</div><div class="line">         */</div><div class="line">        addHeaders(httpRequest, additionalHeaders);</div><div class="line">        addHeaders(httpRequest, request.getHeaders());</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 一个protected方法，留给子类可以实现的方法(本类中并没有什么东西)，在这里会调用。</div><div class="line">         */</div><div class="line">        onPrepareRequest(httpRequest);</div><div class="line"></div><div class="line">        /**</div><div class="line">         * HttpParams 官方文档</div><div class="line">         * Represents a collection of HTTP protocol and framework parameters. </div><div class="line">         * 说白了就是Http协议和框架的相关参数</div><div class="line">         */</div><div class="line">        HttpParams httpParams = httpRequest.getParams();</div><div class="line">        int timeoutMs = request.getTimeoutMs();</div><div class="line"></div><div class="line">        /**</div><div class="line">         * HttpConnectionParams 官方文档</div><div class="line">         * An adaptor for accessing connection parameters in HttpParams. </div><div class="line">         * 一个用来访问请求参数的适配器</div><div class="line">         * Note that the implements relation to CoreConnectionPNames is for compatibility with existing application code only. </div><div class="line">         * References to the parameter names should use the interface, not this class. </div><div class="line">         */</div><div class="line"></div><div class="line">        /* Sets the timeout until a connection is established.</div><div class="line">         * 该方法用来设置时间限制，</div><div class="line">         * A value of zero means the timeout is not used. The default value is zero. </div><div class="line">         * 如果timeout设置为0则表示该限时没有启用，默认为0</div><div class="line">         */</div><div class="line">        HttpConnectionParams.setConnectionTimeout(httpParams, 5000);</div><div class="line"></div><div class="line">        /**</div><div class="line">         * Sets the default socket timeout (SO_TIMEOUT) in milliseconds which is the timeout for waiting for data. </div><div class="line">         * 设置请求发出后等待网络响应并返回数据的限时</div><div class="line">         * A timeout value of zero is interpreted as an infinite timeout. </div><div class="line">         * 如果timeout值为0则意味着无限等待，没有等待限时，同时也是默认的值</div><div class="line">         * This value is used when no socket timeout is set in the method parameters. </div><div class="line">         */</div><div class="line">        HttpConnectionParams.setSoTimeout(httpParams, timeoutMs);</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 执行了HttpClient类中的execute方法</div><div class="line">         * 方法描述为 Executes a request using the default context.</div><div class="line">         * 方法结束后将返回一个HttpResponse，也就是请求的结果类</div><div class="line">         */ </div><div class="line">        return mClient.execute(httpRequest);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Creates the appropriate subclass of HttpUriRequest for passed in request.</div><div class="line">     * 根据传入的Request种类不同</div><div class="line">     * 创建不同的HttpUriRequest子类(也就是下面的HttpGet等等)</div><div class="line">     * 下面做的工作和HurlStack.java里面做的工作差不多</div><div class="line">     * 设置header,以及是否需要传入请求携带的参数</div><div class="line">     * 只是本类中用HttpClient实现，后者用的是HttpURLConnection实现的</div><div class="line">     */</div><div class="line">    @SuppressWarnings(&quot;deprecation&quot;)</div><div class="line">    /* protected */ static HttpUriRequest createHttpRequest(Request&lt;?&gt; request,</div><div class="line">            Map&lt;String, String&gt; additionalHeaders) throws AuthFailureError &#123;</div><div class="line">        switch (request.getMethod()) &#123;</div><div class="line">            case Method.DEPRECATED_GET_OR_POST: &#123;</div><div class="line">                // This is the deprecated way that needs to be handled for backwards compatibility.</div><div class="line">                // If the request&apos;s post body is null, then the assumption is that the request is</div><div class="line">                // GET.  Otherwise, it is assumed that the request is a POST.</div><div class="line">                byte[] postBody = request.getPostBody();</div><div class="line">                if (postBody != null) &#123;</div><div class="line">                    HttpPost postRequest = new HttpPost(request.getUrl());</div><div class="line">                    postRequest.addHeader(HEADER_CONTENT_TYPE, request.getPostBodyContentType());</div><div class="line">                    HttpEntity entity;</div><div class="line">                    entity = new ByteArrayEntity(postBody);</div><div class="line">                    postRequest.setEntity(entity);</div><div class="line">                    return postRequest;</div><div class="line">                &#125; else &#123;</div><div class="line">                    return new HttpGet(request.getUrl());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            case Method.GET:</div><div class="line">                return new HttpGet(request.getUrl());</div><div class="line">            case Method.DELETE:</div><div class="line">                return new HttpDelete(request.getUrl());</div><div class="line">            case Method.POST: &#123;</div><div class="line">                HttpPost postRequest = new HttpPost(request.getUrl());</div><div class="line">                postRequest.addHeader(HEADER_CONTENT_TYPE, request.getBodyContentType());</div><div class="line">                setEntityIfNonEmptyBody(postRequest, request);</div><div class="line">                return postRequest;</div><div class="line">            &#125;</div><div class="line">            case Method.PUT: &#123;</div><div class="line">                HttpPut putRequest = new HttpPut(request.getUrl());</div><div class="line">                putRequest.addHeader(HEADER_CONTENT_TYPE, request.getBodyContentType());</div><div class="line">                setEntityIfNonEmptyBody(putRequest, request);</div><div class="line">                return putRequest;</div><div class="line">            &#125;</div><div class="line">            case Method.HEAD:</div><div class="line">                return new HttpHead(request.getUrl());</div><div class="line">            case Method.OPTIONS:</div><div class="line">                return new HttpOptions(request.getUrl());</div><div class="line">            case Method.TRACE:</div><div class="line">                return new HttpTrace(request.getUrl());</div><div class="line">            case Method.PATCH: &#123;</div><div class="line">                HttpPatch patchRequest = new HttpPatch(request.getUrl());</div><div class="line">                patchRequest.addHeader(HEADER_CONTENT_TYPE, request.getBodyContentType());</div><div class="line">                setEntityIfNonEmptyBody(patchRequest, request);</div><div class="line">                return patchRequest;</div><div class="line">            &#125;</div><div class="line">            default:</div><div class="line">                throw new IllegalStateException(&quot;Unknown request method.&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static void setEntityIfNonEmptyBody(HttpEntityEnclosingRequestBase httpRequest,</div><div class="line">            Request&lt;?&gt; request) throws AuthFailureError &#123;</div><div class="line">        byte[] body = request.getBody();</div><div class="line">        if (body != null) &#123;</div><div class="line">            HttpEntity entity = new ByteArrayEntity(body);</div><div class="line">            httpRequest.setEntity(entity);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Called before the request is executed using the underlying HttpClient.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;Overwrite in subclasses to augment the request.&lt;/p&gt;</div><div class="line">     */</div><div class="line">    protected void onPrepareRequest(HttpUriRequest request) throws IOException &#123;</div><div class="line">        // Nothing.</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * The HttpPatch class does not exist in the Android framework, so this has been defined here.</div><div class="line">     * = =在HttpUriClient的子类中没有支持Patch的请求方法</div><div class="line">     * 在这里volley实现了= =</div><div class="line">     */</div><div class="line">    public static final class HttpPatch extends HttpEntityEnclosingRequestBase &#123;</div><div class="line"></div><div class="line">        public final static String METHOD_NAME = &quot;PATCH&quot;;</div><div class="line"></div><div class="line">        public HttpPatch() &#123;</div><div class="line">            super();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public HttpPatch(final URI uri) &#123;</div><div class="line">            super();</div><div class="line">            setURI(uri);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * @throws IllegalArgumentException if the uri is invalid.</div><div class="line">         */</div><div class="line">        public HttpPatch(final String uri) &#123;</div><div class="line">            super();</div><div class="line">            setURI(URI.create(uri));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public String getMethod() &#123;</div><div class="line">            return METHOD_NAME;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="4-HurlStack-java"><a href="#4-HurlStack-java" class="headerlink" title="4.HurlStack.java"></a><a href="#4-HurlStack-java" title="4.HurlStack.java"></a>4.HurlStack.java</h3><p>在sdk大于2.3的android手机上，Volley选择用HttpURLConnection来实现网络请求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * An &#123;@link HttpStack&#125; based on &#123;@link HttpURLConnection&#125;.</div><div class="line"> */</div><div class="line"></div><div class="line">/**</div><div class="line"> * 当os version 版本在2.3以上，也就是sdk &gt;= 9 的时候</div><div class="line"> * 选用这个接口作为HttpStack， 用到了HttpURLConnection</div><div class="line"> * 关于HttpURLConnection,官方解释为：</div><div class="line"> * An URLConnection for HTTP (RFC 2616) used to send and receive data over the web.</div><div class="line"> * Data may be of any type and length. </div><div class="line"> * This class may be used to send and receive streaming data whose length is not known in advance.</div><div class="line"> * 用来发送和接受数据，数据可以为任意的形式及长度</div><div class="line"> * 这个类常用来发送和接受数据流里面长度不定的数据.</div><div class="line"> */</div><div class="line">public class HurlStack implements HttpStack &#123;</div><div class="line"></div><div class="line">    /*</div><div class="line">     * 请求header中的一个关键字</div><div class="line">     * content-type代表着被发送的请求中主体内容</div><div class="line">     * 可以设置application/json等格式</div><div class="line">     */</div><div class="line">    private static final String HEADER_CONTENT_TYPE = &quot;Content-Type&quot;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * An interface for transforming URLs before use.</div><div class="line">     * 一个用来在使用url之前，将url处理的接口工具</div><div class="line">     * 可能是用来规范url格式的一个工具= =</div><div class="line">     */ </div><div class="line">    public interface UrlRewriter &#123;</div><div class="line">        /**</div><div class="line">         * Returns a URL to use instead of the provided one, or null to indicate</div><div class="line">         * this URL should not be used at all.</div><div class="line">         */</div><div class="line">        public String rewriteUrl(String originalUrl);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private final UrlRewriter mUrlRewriter;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * The abstract factory implementation to create SSLSockets.</div><div class="line">     * 是一个抽象工厂类，用来创建SSLSockets（还是不懂是个什么鬼</div><div class="line">     * </div><div class="line">     * 对于SSLSocket，官方的解释是这样的：</div><div class="line">     * The extension of Socket providing secure protocols like SSL (Secure Sockets Layer) or TLS (Transport Layer Security).</div><div class="line">     * 是Socket的子类，并在之基础上新增了类似于SSL或者TLS等等的安全协议.</div><div class="line">     */</div><div class="line">    private final SSLSocketFactory mSslSocketFactory;</div><div class="line"></div><div class="line">    public HurlStack() &#123;</div><div class="line">        this(null);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param urlRewriter Rewriter to use for request URLs</div><div class="line">     */</div><div class="line">    public HurlStack(UrlRewriter urlRewriter) &#123;</div><div class="line">        this(urlRewriter, null);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param urlRewriter Rewriter to use for request URLs</div><div class="line">     * @param sslSocketFactory SSL factory to use for HTTPS connections</div><div class="line">     */</div><div class="line">    public HurlStack(UrlRewriter urlRewriter, SSLSocketFactory sslSocketFactory) &#123;</div><div class="line">        mUrlRewriter = urlRewriter;</div><div class="line">        mSslSocketFactory = sslSocketFactory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 该函数为HttpStack的接口</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public HttpResponse performRequest(Request&lt;?&gt; request, Map&lt;String, String&gt; additionalHeaders)</div><div class="line">            throws IOException, AuthFailureError &#123;</div><div class="line">        /**</div><div class="line">         * 得到请求的url</div><div class="line">         */</div><div class="line">        String url = request.getUrl();</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 创建一个新的HashMap</div><div class="line">         * 用来存放请求的header的信息</div><div class="line">         */</div><div class="line">        HashMap&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 将原request(volley自己封装的一个request类)中的header</div><div class="line">         * 和另外需要添加入header的信息都整合起来</div><div class="line">         */</div><div class="line">        map.putAll(request.getHeaders());</div><div class="line">        map.putAll(additionalHeaders);</div><div class="line"></div><div class="line">        if (mUrlRewriter != null) &#123;</div><div class="line">            String rewritten = mUrlRewriter.rewriteUrl(url);</div><div class="line">            if (rewritten == null) &#123;</div><div class="line">                throw new IOException(&quot;URL blocked by rewriter: &quot; + url);</div><div class="line">            &#125;</div><div class="line">            url = rewritten;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 将url字符串形式规范成一个URL的类对象</div><div class="line">         */</div><div class="line">        URL parsedUrl = new URL(url);</div><div class="line"></div><div class="line">        /**</div><div class="line">         * HurlStack类是在sdk&gt;=2.3的android版本上使用的</div><div class="line">         * 这里面用到了HttpURLConnection类</div><div class="line">         * 在函数里面打开了并返回了一个HttpURLConnection</div><div class="line">         * 设置了HttpURLConnection的响应超时阀值</div><div class="line">         */</div><div class="line">        HttpURLConnection connection = openConnection(parsedUrl, request);</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 开始给HttpURLConnection添加header的信息</div><div class="line">         * 用addRequestProperty()函数将header以键值对的形式填入</div><div class="line">         */</div><div class="line">        for (String headerName : map.keySet()) &#123;</div><div class="line">            connection.addRequestProperty(headerName, map.get(headerName));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 根据request种类的不同</div><div class="line">         * 分别用不同的方式来处理其中的参数</div><div class="line">         */</div><div class="line">        setConnectionParametersForRequest(connection, request);</div><div class="line"></div><div class="line">        // Initialize HttpResponse with data from the HttpURLConnection.</div><div class="line">        ProtocolVersion protocolVersion = new ProtocolVersion(&quot;HTTP&quot;, 1, 1);</div><div class="line"></div><div class="line">        int responseCode = connection.getResponseCode();</div><div class="line">        if (responseCode == -1) &#123;</div><div class="line">            // -1 is returned by getResponseCode() if the response code could not be retrieved.</div><div class="line">            // Signal to the caller that something was wrong with the connection.</div><div class="line">            throw new IOException(&quot;Could not retrieve response code from HttpUrlConnection.&quot;);</div><div class="line">        &#125;</div><div class="line">        StatusLine responseStatus = new BasicStatusLine(protocolVersion,</div><div class="line">                connection.getResponseCode(), connection.getResponseMessage());</div><div class="line"></div><div class="line">        BasicHttpResponse response = new BasicHttpResponse(responseStatus);</div><div class="line"></div><div class="line">        response.setEntity(entityFromConnection(connection));</div><div class="line"></div><div class="line">        for (Entry&lt;String, List&lt;String&gt;&gt; header : connection.getHeaderFields().entrySet()) &#123;</div><div class="line">            if (header.getKey() != null) &#123;</div><div class="line">                Header h = new BasicHeader(header.getKey(), header.getValue().get(0));</div><div class="line">                response.addHeader(h);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return response;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Initializes an &#123;@link HttpEntity&#125; from the given &#123;@link HttpURLConnection&#125;.</div><div class="line">     * @param connection</div><div class="line">     * @return an HttpEntity populated with data from &lt;code&gt;connection&lt;/code&gt;.</div><div class="line">     */</div><div class="line">    private static HttpEntity entityFromConnection(HttpURLConnection connection) &#123;</div><div class="line">        BasicHttpEntity entity = new BasicHttpEntity();</div><div class="line">        InputStream inputStream;</div><div class="line">        try &#123;</div><div class="line">            inputStream = connection.getInputStream();</div><div class="line">        &#125; catch (IOException ioe) &#123;</div><div class="line">            inputStream = connection.getErrorStream();</div><div class="line">        &#125;</div><div class="line">        entity.setContent(inputStream);</div><div class="line">        entity.setContentLength(connection.getContentLength());</div><div class="line">        entity.setContentEncoding(connection.getContentEncoding());</div><div class="line">        entity.setContentType(connection.getContentType());</div><div class="line">        return entity;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Create an &#123;@link HttpURLConnection&#125; for the specified &#123;@code url&#125;.</div><div class="line">     */</div><div class="line">    protected HttpURLConnection createConnection(URL url) throws IOException &#123;</div><div class="line"></div><div class="line">        return (HttpURLConnection) url.openConnection();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Opens an &#123;@link HttpURLConnection&#125; with parameters.</div><div class="line">     * 通过给的url和参数，打开一个HttpURLConnection</div><div class="line">     * @param url</div><div class="line">     * @return an open connection</div><div class="line">     * @throws IOException</div><div class="line">     */</div><div class="line">    private HttpURLConnection openConnection(URL url, Request&lt;?&gt; request) throws IOException &#123;</div><div class="line"></div><div class="line">        HttpURLConnection connection = createConnection(url);</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 通过Request.java中的函数</div><div class="line">         * 获取到该request上所设置的服务器最大响应时间阀值</div><div class="line">         * 该阀值默认是2500ms，而且可能会随着retry的次数而增大</div><div class="line">         */</div><div class="line">        int timeoutMs = request.getTimeoutMs();</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 给connection设置上请求超时时间</div><div class="line">         */</div><div class="line">        connection.setConnectTimeout(timeoutMs);</div><div class="line">        connection.setReadTimeout(timeoutMs);</div><div class="line">        connection.setUseCaches(false);</div><div class="line">        connection.setDoInput(true);</div><div class="line"></div><div class="line">        /**</div><div class="line">         * use caller-provided custom SslSocketFactory, if any, for HTTPS</div><div class="line">         * 请求方面的安全问题，暂时还不清清楚</div><div class="line">         */</div><div class="line">        if (&quot;https&quot;.equals(url.getProtocol()) &amp;&amp; mSslSocketFactory != null) &#123;</div><div class="line">            ((HttpsURLConnection)connection).setSSLSocketFactory(mSslSocketFactory);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return connection;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @SuppressWarnings(&quot;deprecation&quot;)</div><div class="line">    /* package */</div><div class="line">    /**</div><div class="line">     * switch不同的请求方法</div><div class="line">     * 来以不同的方式给HttpURLConnection添加请求参数</div><div class="line">     */ </div><div class="line">    static void setConnectionParametersForRequest(HttpURLConnection connection,</div><div class="line">            Request&lt;?&gt; request) throws IOException, AuthFailureError &#123;</div><div class="line">        switch (request.getMethod()) &#123;</div><div class="line"></div><div class="line">            /**</div><div class="line">             * 在构造Request的时候如果没有指明请求方式</div><div class="line">             * DEPRECATED_GET_OR_POST为其默认值</div><div class="line">             * 通过postBody是否为Null来区别POST和GET</div><div class="line">             * 这两种最常用的请求方式</div><div class="line">             */</div><div class="line">            case Method.DEPRECATED_GET_OR_POST:</div><div class="line">                // This is the deprecated way that needs to be handled for backwards compatibility.</div><div class="line">                // If the request&apos;s post body is null, then the assumption is that the request is</div><div class="line">                // GET.  Otherwise, it is assumed that the request is a POST.</div><div class="line">                /**</div><div class="line">                 * 不要用这个参数了= =，因为不能处理什么DELETE之类的</div><div class="line">                 * 该方法已经过时了。</div><div class="line">                 */</div><div class="line">                byte[] postBody = request.getPostBody();</div><div class="line">                if (postBody != null) &#123;</div><div class="line">                    // Prepare output. There is no need to set Content-Length explicitly,</div><div class="line">                    // since this is handled by HttpURLConnection using the size of the prepared</div><div class="line">                    // output stream.</div><div class="line"></div><div class="line">                    /**</div><div class="line">                     * 设置是否输出</div><div class="line">                     */</div><div class="line">                    connection.setDoOutput(true);</div><div class="line"></div><div class="line">                    /**</div><div class="line">                     * 给connection设置请求的方式</div><div class="line">                     */</div><div class="line">                    connection.setRequestMethod(&quot;POST&quot;);</div><div class="line"></div><div class="line">                    /**</div><div class="line">                     * 设置http请求头中的content-type参数</div><div class="line">                     */</div><div class="line">                    connection.addRequestProperty(HEADER_CONTENT_TYPE,</div><div class="line">                            request.getPostBodyContentType());</div><div class="line">                    DataOutputStream out = new DataOutputStream(connection.getOutputStream());</div><div class="line">                    out.write(0);</div><div class="line">                    out.close();</div><div class="line">                &#125;</div><div class="line">                break;</div><div class="line">            case Method.GET:</div><div class="line">                // Not necessary to set the request method because connection defaults to GET but</div><div class="line">                // being explicit here.</div><div class="line">                connection.setRequestMethod(&quot;GET&quot;);</div><div class="line">                break;</div><div class="line">            case Method.DELETE:</div><div class="line">                connection.setRequestMethod(&quot;DELETE&quot;);</div><div class="line">                break;</div><div class="line">            case Method.POST:</div><div class="line">                connection.setRequestMethod(&quot;POST&quot;);</div><div class="line">                addBodyIfExists(connection, request);</div><div class="line">                break;</div><div class="line">            case Method.PUT:</div><div class="line">                connection.setRequestMethod(&quot;PUT&quot;);</div><div class="line">                addBodyIfExists(connection, request);</div><div class="line">                break;</div><div class="line">            case Method.HEAD:</div><div class="line">                connection.setRequestMethod(&quot;HEAD&quot;);</div><div class="line">                break;</div><div class="line">            case Method.OPTIONS:</div><div class="line">                connection.setRequestMethod(&quot;OPTIONS&quot;);</div><div class="line">                break;</div><div class="line">            case Method.TRACE:</div><div class="line">                connection.setRequestMethod(&quot;TRACE&quot;);</div><div class="line">                break;</div><div class="line">            case Method.PATCH:</div><div class="line">                connection.setRequestMethod(&quot;PATCH&quot;);</div><div class="line">                addBodyIfExists(connection, request);</div><div class="line">                break;</div><div class="line">            default:</div><div class="line">                throw new IllegalStateException(&quot;Unknown method type.&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 如果存在请求参数的话</div><div class="line">     * 获取到connection的输出流对象</div><div class="line">     * 并创建一个DataOutputStream对象</div><div class="line">     * 用于向服务器写入需要传递的参数</div><div class="line">     */</div><div class="line">    private static void addBodyIfExists(HttpURLConnection connection, Request&lt;?&gt; request)</div><div class="line">            throws IOException, AuthFailureError &#123;</div><div class="line">        byte[] body = request.getBody();</div><div class="line">        if (body != null) &#123;</div><div class="line">            connection.setDoOutput(true);</div><div class="line">            connection.addRequestProperty(HEADER_CONTENT_TYPE, request.getBodyContentType());</div><div class="line">            DataOutputStream out = new DataOutputStream(connection.getOutputStream());</div><div class="line">            out.write(body);</div><div class="line">            out.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> volley </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于字符编码</title>
      <link href="/2017/03/21/%E5%85%B3%E4%BA%8E%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
      <url>/2017/03/21/%E5%85%B3%E4%BA%8E%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="关于字符编码"><a href="#关于字符编码" class="headerlink" title="关于字符编码"></a>关于字符编码</h2><h3 id="1-字符集和字符编码"><a href="#1-字符集和字符编码" class="headerlink" title="1. 字符集和字符编码"></a>1. 字符集和字符编码</h3><p>&#160;&#160;&#160;&#160;各种文字和符号的总称为字符，多个字符集合为字符集，不同字符集包含字符个数不同，常见字符集有ASCII、ISO 8859、GB2312、BIG5、GB18030、Unicode等。</p><p>&#160;&#160;&#160;&#160;编码和字符集不同，字符集在传输的过程中需要进行编码，编码方式有UTF-8、UTF-16等等，字符变吗就是以二进制的数字来对应字符集的字符。</p><p>&#160;&#160;&#160;&#160;一般国家制定字符集和编码的时候都是同时进行的，平常说的GBK等有字符集和编码两层意思。</p><blockquote><p>Unicode字符集有多种编码方式，如UTF-8、UTF-16等；ASCII只有一种；</p></blockquote><a id="more"></a><h3 id="2-内码"><a href="#2-内码" class="headerlink" title="2. 内码"></a>2. 内码</h3><p>&#160;&#160;&#160;&#160;内码指的是“将资讯编码后，透过某种方式储存在特定记忆装置时，装置内部的编码形式”。在不同的系统中，会有不同的内码。<br>在以往的英文系统中，内码为ASCII。在繁体中文系统中，目前常用的内码为大五码（Big5）。在简体中文系统中，内码则为国标码（国家标准代码：现在强制要求使用GB18030标准；较旧计算机仍然使用GB2312）。而统一码（Unicode）则为另一常见内码。</p><h3 id="3-字符编码分类"><a href="#3-字符编码分类" class="headerlink" title="3. 字符编码分类"></a>3. 字符编码分类</h3><h4 id="3-1-ASCII编码"><a href="#3-1-ASCII编码" class="headerlink" title="3.1 ASCII编码"></a>3.1 ASCII编码</h4><p>&#160;&#160;&#160;&#160;ASCII（American Standard Code for Information Interchange，美国信息互换标准代码）是基于拉丁字母的一套电脑编码系统。<a href="http://zh.wikipedia.org/zh-cn/ASCII" target="_blank" rel="noopener">字符编码表</a></p><ul><li>单字节编码 ： 单字节字符串使用一个字节存放一个字符（SBCS,Single Byte Character System）。如：”Bob123”占6个字节。</li><li>缺点 ： 只能显示26个字符、阿拉伯数字、英文标点</li></ul><h4 id="3-2-ANSI编码"><a href="#3-2-ANSI编码" class="headerlink" title="3.2 ANSI编码"></a>3.2 ANSI编码</h4><p>&#160;&#160;&#160;&#160;为了支持更多语言，通常使用0x800~xFF范围的两个字节来表示一个字符，例如“中”使用[0xD6,0xD0]这两个字节存储。不用国家制定了不同的标准，使用两个字节来表示一个字符的各种汉字延伸编码方式称为ANSI编码。简体中文系统下，ANSI编码代表GB2312编码。</p><h4 id="3-3-Unicode编码"><a href="#3-3-Unicode编码" class="headerlink" title="3.3 Unicode编码"></a>3.3 Unicode编码</h4><p>&#160;&#160;&#160;&#160;为了国际间信息交流方便，制定了Unicode字符集，为每种语言中的字符设定了统一并唯一的数字编号。</p><p>&#160;&#160;&#160;&#160;Unicode字符集简写为UCS(Unicode Character Set)。早期的unicodeUnicode标准有UCS-2、UCS-4的说法。UCS-2用两个字节编码，UCS-4用4个字节编码。</p><h3 id="4-编码区别"><a href="#4-编码区别" class="headerlink" title="4. 编码区别"></a>4. 编码区别</h3><h4 id="4-1-GB2312、GBK、GB18030"><a href="#4-1-GB2312、GBK、GB18030" class="headerlink" title="4.1 GB2312、GBK、GB18030"></a>4.1 GB2312、GBK、GB18030</h4><ol><li><strong>GB2312</strong><br> ASCII码中127号之后的奇异符号们直接取消掉, 规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，表示一个汉字，前面的一个字节（称之为高字节）从0xA1用到0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。这种汉字方案叫做 “GB2312”。GB2312 是对 ASCII 的中文扩展。兼容ASCII。</li><li><strong>GBK</strong><br> 不再要求低字节一定是127号之后的内码，只要第一个字节是大于127就固定表示这是一个汉字的开始，不管后面跟的是不是扩展字符集里的内容。对GB2312的扩展</li><li><strong>GB18030</strong><br> 在GBK基础上扩展了少数民族的文字</li></ol><h4 id="4-2-UTF-8、UTF-16"><a href="#4-2-UTF-8、UTF-16" class="headerlink" title="4.2 UTF-8、UTF-16"></a>4.2 UTF-8、UTF-16</h4><p>&#160;&#160;&#160;&#160;Unicode中所有字符都使用一个”Unicode”进行表示，采用双字节编码，和单字节编码的ASCII编码不兼容。UTF即UCS Transformation Format，即UCS转换(传输)格式。是将Unicode编码规则和计算机的实际编码对应起来的规则，流行的UTF有两种，UTF-8和UTF-16。</p><ol><li><strong>UTF-8</strong><br>| UCS-2编码(16进制)  | UTF-8 字节流(二进制) |<br>|——–|——–|<br>|    0000 - 007F    |    0xxxxxxx    |<br>|    0080 - 07FF    |    110xxxxx 10xxxxxx    |<br>|    0800 - FFFF    |   1110xxxx 10xxxxxx 10xxxxxx      |</li></ol><p>&#160;&#160;&#160;&#160;例如“汉”字的Unicode编码是6C49。6C49在0800-FFFF之间，所以肯定要用3字节模板了：1110xxxx 10xxxxxx 10xxxxxx。将6C49写成二进制是：0110 110001 001001，用这个比特流依次代替模板中的x，得到：11100110 10110001 10001001，即E6 B1 89。</p><p>&#160;&#160;&#160;&#160;UTF-16以16位为单元对UCS进行编码。对于小于0x10000的UCS码，UTF-16编码就等于UCS码对应的16位无符号整数。对于不小于0x10000的UCS码，定义了一个算法。不过由于实际使用的UCS2，或者UCS4的BMP必然小于0x10000，所以就目前而言，可以认为UTF-16和UCS-2基本相同。但UCS-2只是一个编码方案，UTF-16却要用于实际的传输，所以就不得不考虑字节序的问题。</p><ol><li><strong>UTF-16</strong></li></ol><p>&#160;&#160;&#160;&#160;UTF-16以16位为单元对UCS进行编码。对于小于0x10000的UCS码，UTF-16编码就等于UCS码对应的16位无符号整数。对于不小于0x10000的UCS码，定义了一个算法。不过由于实际使用的UCS2，或者UCS4的BMP必然小于0x10000，所以就目前而言，可以认为UTF-16和UCS-2基本相同。但UCS-2只是一个编码方案，UTF-16却要用于实际的传输，所以就不得不考虑字节序的问题。</p><p>&#160;&#160;&#160;&#160;UTF-16不兼容ASCII。</p><h4 id="5-1-UTF的字节序和BOM"><a href="#5-1-UTF的字节序和BOM" class="headerlink" title="5.1 UTF的字节序和BOM"></a>5.1 UTF的字节序和BOM</h4><h5 id="5-1-1-字节序列"><a href="#5-1-1-字节序列" class="headerlink" title="5.1.1 字节序列"></a>5.1.1 字节序列</h5><p>&#160;&#160;&#160;&#160;UTF-8以字节为编码单元，而UTF-16两个字节编码单元，解释UTF-16文本前，先要弄清每个编码单元的字节序。Unicode规范中推荐的标记字节顺序的方法是BOM，也就是Byte Order Mark。</p><p>&#160;&#160;&#160;&#160;在UCS编码中有一个叫做”ZERO WIDTH NO-BREAK SPACE”的字符，它的编码是FEFF。而FFFE在UCS中是不存在的字符，所以不应该出现在实际传输中。UCS规范建议我们在传输字节流前，先传输字符”ZERO WIDTH NO-BREAK SPACE”。这样如果接收者收到FEFF，就表明这个字节流是Big-Endian的；如果收到FFFE，就表明这个字节流是Little-Endian的。因此字符”ZERO WIDTH NO-BREAK SPACE”又被称作BOM。</p>]]></content>
      
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Volley框架解析-四-Network接口及其实现</title>
      <link href="/2017/03/20/Volley%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90-%E5%9B%9B-Network%E6%8E%A5%E5%8F%A3%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/"/>
      <url>/2017/03/20/Volley%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90-%E5%9B%9B-Network%E6%8E%A5%E5%8F%A3%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Volley框架解析-四-—–Network接口及其默认实现类解析"><a href="#Volley框架解析-四-—–Network接口及其默认实现类解析" class="headerlink" title="Volley框架解析(四)—–Network接口及其默认实现类解析"></a>Volley框架解析(四)—–Network接口及其默认实现类解析</h2><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>&#160;&#160;&#160;&#160;前面的三篇Volley框架解析文章已经从Volley对外暴露的接口Volley.java开始，向下慢慢深入到了RequestQueue.java，这个Volley中比较核心的类，然后又分析了Volley中负责主要request调度工作的两类Dispatcher，<code>NetworkDispatcher</code>以及<code>CacheDispatcher</code>。应该是将一个request从新建，到加入队列中等待处理，如何被处理以及返回结果或者error这一系列的流程理顺了。</p><p>&#160;&#160;&#160;&#160;但是对于一些细节的问题还是不清楚，例如request究竟是如何发送出去，通过<code>NetworkResponse networkResponse = mNetwork.performRequest(request);</code>这么一句话就返回了结果(response)，这里面发生了些什么还不得而知，还有<code>Network#performRequest()</code>和<code>HttpStack#performRequest()</code>这两个函数之间有什么区别和联系等等。</p><a id="more"></a><h3 id="2-Network-java"><a href="#2-Network-java" class="headerlink" title="2. Network.java"></a><a href="#2-_Network-java" title="2\. Network.java"></a>2. Network.java</h3><p>&#160;&#160;&#160;&#160;最早接触到Network这个类是在<code>Volley.java</code>中的<code>newRequestQueue()</code>函数里面，<code>Network network = new BasicNetwork(stack);</code>创建了一个Network接口引用，并指向了一个Volley中的默认实现类的实例<code>BasicNetwork.java</code>，这个默认实现类也会在这篇博客的后面详细的解析。</p><p>&#160;&#160;&#160;&#160;经过前面几篇博客的分析，<code>Volley.java</code>仅仅是持有而没有使用，仅将这个引用传递给了<code>NetworkDispatcher.java</code>中，只有在<code>NetworkDispatcher.java</code>类中用到了这个Network接口，在<code>NetowkrDispatcher.java</code>中存在着这么一行代码，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NetworkResponse networkResponse = mNetwork.performRequest(request);</div></pre></td></tr></table></figure><p>&#160;&#160;&#160;&#160;仅仅用了一句话就将request发送出去了，并且还拿回来了一个<code>NetworkResponse.java</code>类对象。里面发生了什么= =，先进去Network.java里面看看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">package com.android.volley;</div><div class="line"></div><div class="line">/**</div><div class="line"> * An interface for performing requests.</div><div class="line"> */</div><div class="line">public interface Network &#123;</div><div class="line">    /**</div><div class="line">     * Performs the specified request.</div><div class="line">     * 用来发送特定的请求</div><div class="line">     *</div><div class="line">     * @param request Request to process</div><div class="line">     * 即将被发送的request</div><div class="line">     *</div><div class="line">     * @return A &#123;@link NetworkResponse&#125; with data and caching metadata; will never be null</div><div class="line">     * 请求之后返回的response, 是volley自己构造出来的一个response</div><div class="line">     * 里面包含了返回的请求码等等。</div><div class="line">     *</div><div class="line">     * @throws VolleyError on errors</div><div class="line">     */</div><div class="line">    public NetworkResponse performRequest(Request&lt;?&gt; request) throws VolleyError;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对，没有看错= =，就这么点东西，仅仅一个抽象方法而已，Network.java就是一个等待被实现的接口，想看真东西，还需要进去<code>Network network = new BasicNetwork(stack);</code>里面所提到的<code>BasicNetwork.java</code>看看。</p><h3 id="3-BasicNetwork-java"><a href="#3-BasicNetwork-java" class="headerlink" title="3. BasicNetwork.java"></a><a href="#3-_BasicNetwork-java" title="3\. BasicNetwork.java"></a>3. BasicNetwork.java</h3><p><code>Network.java</code>接口的默认实现类，该类里面会处理一些request发送前后的处理工作，主要是对请求返回的httpResponse处理，以及对请求失败进行retry或者抛出异常的处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div></pre></td><td class="code"><pre><div class="line">package com.android.volley.toolbox;</div><div class="line"></div><div class="line">/**</div><div class="line"> * A network performing Volley requests over an &#123;@link HttpStack&#125;.</div><div class="line"> * 一个用来执行Volley中request的类</div><div class="line"> * 在HttpStack的基础之上</div><div class="line"> * 因为主要还是调用HttpStack接口的performRequest</div><div class="line"> * 在这个里面的performRequest主要还是做一些整理工作</div><div class="line"> * 比如将｛@link HttpStack#performRequest()｝方法返回的HttpResponse</div><div class="line"> * 解析成Volley自己实现的NetworkResponse.java</div><div class="line"> */</div><div class="line"></div><div class="line">public class BasicNetwork implements Network &#123;</div><div class="line"></div><div class="line">    //是否允许打lo的boolean常变量</div><div class="line">    protected static final boolean DEBUG = VolleyLog.DEBUG;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 这是一个阀值，用来判断一个request是否请求响应过慢了= =</div><div class="line">     * 在后面的作用就是，如果响应时间超过了这个阀值</div><div class="line">     * 打出log说明这个request有些慢，为了更好的反应request当前状态</div><div class="line">     */</div><div class="line">    private static int SLOW_REQUEST_THRESHOLD_MS = 3000;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 默认ByteArrayPool的大小</div><div class="line">     * 现在只需要知道ByteArrayPool.java是Volley用来从输入流中读取数据并将其转换成字节数组的工具即可</div><div class="line">     * 在这篇博客后面会介绍，表担心~= =</div><div class="line">     */</div><div class="line">    private static int DEFAULT_POOL_SIZE = 4096;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 网络请求的真正接口</div><div class="line">     * 为什么这么说咧，BasicNetwork里面的performRequest()函数</div><div class="line">     * 调用了HttpStack里的performRequest()，真正的网络请求还是通过HttpStack里面的方法实现的</div><div class="line">     * 在Volley中实现了HttpStack接口的类有两个 HurlStack.java和HttpClientStack.java</div><div class="line">     * 针对了不同Android系统版本，用不同的方法实现了请求。</div><div class="line">     */</div><div class="line">    protected final HttpStack mHttpStack;</div><div class="line"></div><div class="line">    //表急，后面会介绍到的，现在知道是一个用于数据转换的工具类就好了</div><div class="line">    protected final ByteArrayPool mPool;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param httpStack HTTP stack to be used</div><div class="line">     * 传入的HttpStack实现类引用</div><div class="line">     * 整个网络请求的较核心部分就在HttpStack实现类上面咯</div><div class="line">     */</div><div class="line">    public BasicNetwork(HttpStack httpStack) &#123;</div><div class="line">        // If a pool isn&apos;t passed in, then build a small default pool that will give us a lot of</div><div class="line">        // benefit and not use too much memory.</div><div class="line">        this(httpStack, new ByteArrayPool(DEFAULT_POOL_SIZE));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param httpStack HTTP stack to be used</div><div class="line">     * @param pool a buffer pool that improves GC performance in copy operations</div><div class="line">     * Volley接口分离的很明显，而且在构造函数里面也提供了很多种</div><div class="line">     * 可以定制出适合自己的ByteArrayPool衍生类</div><div class="line">     * 当然也可以自己来实现HttpStack的衍生类</div><div class="line">     */</div><div class="line">    public BasicNetwork(HttpStack httpStack, ByteArrayPool pool) &#123;</div><div class="line">        mHttpStack = httpStack;</div><div class="line">        mPool = pool;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 这个方法重写的是Network的方法</div><div class="line">     * 在这个里面再调用HttpStack里面的performRequest方法</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public NetworkResponse performRequest(Request&lt;?&gt; request) throws VolleyError &#123;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * Returns milliseconds since boot, including time spent in sleep.</div><div class="line">         * 为了方便计算每个request所用的时间</div><div class="line">         * 在处理每个request之前都记下此刻unix时间戳</div><div class="line">         */</div><div class="line">        long requestStart = SystemClock.elapsedRealtime();</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 进入死循环= =</div><div class="line">         * 还没弄清楚为什么要死循环</div><div class="line">         */</div><div class="line">        while (true) &#123;</div><div class="line"></div><div class="line">            /**</div><div class="line">             * 指向HttpResponse实例的引用</div><div class="line">             * 是调用HttpStack方法performRequest()之后返回的结果</div><div class="line">             */</div><div class="line">            HttpResponse httpResponse = null;</div><div class="line"></div><div class="line">            /**</div><div class="line">             * 返回的HttpResponse还需要经过处理</div><div class="line">             * 并不是返回回来就是能直接使用的数据</div><div class="line">             * 需要通过上面的ByteArrayPool将Entity转换成byte[]</div><div class="line">             * 这个就是指向解析后的byte[]的</div><div class="line">             */</div><div class="line">            byte[] responseContents = null;</div><div class="line"></div><div class="line">            //用来存放response里面header的信息，包含了状态码等</div><div class="line">            Map&lt;String, String&gt; responseHeaders = Collections.emptyMap();</div><div class="line"></div><div class="line">            try &#123;</div><div class="line">                /**</div><div class="line">                 * Gather headers.</div><div class="line">                 * 设置header</div><div class="line">                 * 从缓存中收集上次相同request的信息</div><div class="line">                 */</div><div class="line">                Map&lt;String, String&gt; headers = new HashMap&lt;String, String&gt;();</div><div class="line"></div><div class="line">                /**</div><div class="line">                 * 将缓存的信息加入到headers中</div><div class="line">                 * headers会跟随request一起发送给服务器</div><div class="line">                 * 在函数的定义处会讲解</div><div class="line">                 */</div><div class="line">                addCacheHeaders(headers, request.getCacheEntry());</div><div class="line"></div><div class="line">                /**</div><div class="line">                 * 通过调用HttpStack接口的performRequest()方法</div><div class="line">                 * 获取服务器返回的HttpResponse</div><div class="line">                 */</div><div class="line">                httpResponse = mHttpStack.performRequest(request, headers);</div><div class="line"></div><div class="line">                /**</div><div class="line">                 * The first line of a Response message is the Status-Line, </div><div class="line">                 * consisting of the protocol version followed by a numeric status code and its associated textual phrase</div><div class="line">                 * with each element separated by SP characters. </div><div class="line">                 * No CR or LF is allowed except in the final CRLF sequence.</div><div class="line">                 * 请求返回的response第一行就是包含了状态码的一行</div><div class="line">                 */</div><div class="line">                StatusLine statusLine = httpResponse.getStatusLine();</div><div class="line">                int statusCode = statusLine.getStatusCode();</div><div class="line"></div><div class="line">                /**</div><div class="line">                 * 将头部解析成键值对的形式再返回</div><div class="line">                 */</div><div class="line">                responseHeaders = convertHeaders(httpResponse.getAllHeaders());</div><div class="line"></div><div class="line">                /**</div><div class="line">                 * Handle cache validation.</div><div class="line">                 * 处理缓存信息</div><div class="line">                 * 如果返回的状态码是304(HttpStatus.SC_NOT_MODIFIED)</div><div class="line">                 * 则进行如下的处理</div><div class="line">                 */</div><div class="line">                if (statusCode == HttpStatus.SC_NOT_MODIFIED) &#123;</div><div class="line"></div><div class="line">                    /**</div><div class="line">                     * 如果缓存为空的话</div><div class="line">                     * 那就说明该请求的返回的response的body就是null</div><div class="line">                     * 直接构造一个NetworkResponse返回</div><div class="line">                     */</div><div class="line">                    Entry entry = request.getCacheEntry();</div><div class="line">                    if (entry == null) &#123;</div><div class="line">                        return new NetworkResponse(HttpStatus.SC_NOT_MODIFIED, null,</div><div class="line">                                responseHeaders, true,</div><div class="line">                                SystemClock.elapsedRealtime() - requestStart);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    // A HTTP 304 response does not have all header fields. We</div><div class="line">                    // have to use the header fields from the cache entry plus</div><div class="line">                    // the new ones from the response.</div><div class="line">                    // http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5</div><div class="line">                    /**</div><div class="line">                     * 一个返回码为304的HttpResponse的header缺少一些信息</div><div class="line">                     * 需要我们将cache中的一些header信息加入到其中</div><div class="line">                     * 这样组成一个完整的NetworkResponse返回</div><div class="line">                     */</div><div class="line">                    entry.responseHeaders.putAll(responseHeaders);</div><div class="line">                    return new NetworkResponse(HttpStatus.SC_NOT_MODIFIED, entry.data,</div><div class="line">                            entry.responseHeaders, true,</div><div class="line">                            SystemClock.elapsedRealtime() - requestStart);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                /**</div><div class="line">                 * Handle moved resources</div><div class="line">                 * 处理了重定向的问题</div><div class="line">                 * 并将request的mRedirectUrl设定成了新的url</div><div class="line">                 */</div><div class="line">                if (statusCode == HttpStatus.SC_MOVED_PERMANENTLY || statusCode == HttpStatus.SC_MOVED_TEMPORARILY) &#123;</div><div class="line">                    String newUrl = responseHeaders.get(&quot;Location&quot;);</div><div class="line">                    request.setRedirectUrl(newUrl);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                /**</div><div class="line">                 * Some responses such as 204s do not have content.  We must check.</div><div class="line">                 * 204(无内容)服务器成功处理了请求，但没有返回任何内容。</div><div class="line">                 * </div><div class="line">                 */</div><div class="line">                if (httpResponse.getEntity() != null) &#123;</div><div class="line">                    /**</div><div class="line">                     * 如果entity不为Null</div><div class="line">                     * 将其转换成byte数组</div><div class="line">                     * 利用之前提到过的ByteArrayPool.java类</div><div class="line">                     */</div><div class="line">                  responseContents = entityToBytes(httpResponse.getEntity());</div><div class="line">                &#125; else &#123;</div><div class="line">                  // Add 0 byte response as a way of honestly representing a</div><div class="line">                  // no-content request.</div><div class="line">                  responseContents = new byte[0];</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                /**</div><div class="line">                 * if the request is slow, log it.</div><div class="line">                 * 获取request已经占用的时间(requestLifetime)</div><div class="line">                 * 判断是否需要打出request的超时状态</div><div class="line">                 */</div><div class="line">                long requestLifetime = SystemClock.elapsedRealtime() - requestStart;</div><div class="line">                logSlowRequests(requestLifetime, request, responseContents, statusLine);</div><div class="line"></div><div class="line">                /**</div><div class="line">                 * 如果状态码位于200之下或者是299之上(200-299 用于表示请求成功)</div><div class="line">                 * 则抛出IOException异常= =为什么非要抛出这个异常</div><div class="line">                 * 在前面过滤掉了(304等情况)</div><div class="line">                 */</div><div class="line">                if (statusCode &lt; 200 || statusCode &gt; 299) &#123;</div><div class="line">                    throw new IOException();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                /**</div><div class="line">                 * 经过上面的层层过滤</div><div class="line">                 * 最后留下了200~299之间的请求成功response</div><div class="line">                 * 通过HttpResponse里面的信息构造出一个volley自己封装的NetworkResponse对象</div><div class="line">                 */</div><div class="line">                return new NetworkResponse(statusCode, responseContents, responseHeaders, false,</div><div class="line">                        SystemClock.elapsedRealtime() - requestStart);</div><div class="line"></div><div class="line">                /**</div><div class="line">                 * 抛出了异常之后，会用attemptREtryOnException()方法来尝试retry</div><div class="line">                 * 主要做的工作就是看是否还有retry的机会，如果有则不停通过这个死循环</div><div class="line">                 * 进行请求，直到请求成功或者请求的机会用完为止</div><div class="line">                 */</div><div class="line">            &#125; catch (SocketTimeoutException e) &#123;</div><div class="line">                attemptRetryOnException(&quot;socket&quot;, request, new TimeoutError());</div><div class="line">            &#125; catch (ConnectTimeoutException e) &#123;·</div><div class="line">                attemptRetryOnException(&quot;connection&quot;, request, new TimeoutError());</div><div class="line">            &#125; catch (MalformedURLException e) &#123;</div><div class="line">                throw new RuntimeException(&quot;Bad URL &quot; + request.getUrl(), e);</div><div class="line">            &#125; catch (IOException e) &#123;</div><div class="line">                /**</div><div class="line">                 * 状态码在0~200以及299之上的response</div><div class="line">                 * 处理的套路</div><div class="line">                 */</div><div class="line">                int statusCode = 0;</div><div class="line">                NetworkResponse networkResponse = null;</div><div class="line">                if (httpResponse != null) &#123;</div><div class="line">                    statusCode = httpResponse.getStatusLine().getStatusCode();</div><div class="line">                &#125; else &#123;</div><div class="line">                    //如果状态码为0，则抛出NoConnectionError</div><div class="line">                    throw new NoConnectionError(e);</div><div class="line">                &#125;</div><div class="line">                /**</div><div class="line">                 * 如果有重定向的情况发生</div><div class="line">                 * 用log打出</div><div class="line">                 */</div><div class="line">                if (statusCode == HttpStatus.SC_MOVED_PERMANENTLY || </div><div class="line">                        statusCode == HttpStatus.SC_MOVED_TEMPORARILY) &#123;</div><div class="line">                    VolleyLog.e(&quot;Request at %s has been redirected to %s&quot;, request.getOriginUrl(), request.getUrl());</div><div class="line">                &#125; else &#123;</div><div class="line">                    VolleyLog.e(&quot;Unexpected response code %d for %s&quot;, statusCode, request.getUrl());</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                /**</div><div class="line">                 * 如果返回的content内容不为Null</div><div class="line">                 * 则构造出一个NetworkResponse</div><div class="line">                 * 否则抛出NetworkError</div><div class="line">                 */</div><div class="line">                if (responseContents != null) &#123;</div><div class="line"></div><div class="line">                    networkResponse = new NetworkResponse(statusCode, responseContents,</div><div class="line">                            responseHeaders, false, SystemClock.elapsedRealtime() - requestStart);</div><div class="line"></div><div class="line">                    /**</div><div class="line">                     * 抛出了异常之后，会用attemptREtryOnException()方法来尝试retry</div><div class="line">                     * 主要做的工作就是看是否还有retry的机会，如果有则不停通过这个死循环</div><div class="line">                     * 进行请求，直到请求成功或者请求的机会用完为止</div><div class="line">                     */</div><div class="line">                    if (statusCode == HttpStatus.SC_UNAUTHORIZED ||</div><div class="line">                            statusCode == HttpStatus.SC_FORBIDDEN) &#123;</div><div class="line">                        attemptRetryOnException(&quot;auth&quot;,</div><div class="line">                                request, new AuthFailureError(networkResponse));</div><div class="line">                    &#125; else if (statusCode == HttpStatus.SC_MOVED_PERMANENTLY || </div><div class="line">                                statusCode == HttpStatus.SC_MOVED_TEMPORARILY) &#123;</div><div class="line">                        attemptRetryOnException(&quot;redirect&quot;,</div><div class="line">                                request, new AuthFailureError(networkResponse));</div><div class="line">                    &#125; else &#123;</div><div class="line">                        // TODO: Only throw ServerError for 5xx status codes.</div><div class="line">                        throw new ServerError(networkResponse);</div><div class="line">                    &#125;</div><div class="line">                &#125; else &#123;</div><div class="line">                    throw new NetworkError(networkResponse);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Logs requests that took over SLOW_REQUEST_THRESHOLD_MS to complete.</div><div class="line">     * 如果request用时超出了预先设定的阀值</div><div class="line">     * 则打出log用于debug时候的提示</div><div class="line">     */</div><div class="line">    private void logSlowRequests(long requestLifetime, Request&lt;?&gt; request,</div><div class="line">            byte[] responseContents, StatusLine statusLine) &#123;</div><div class="line">        if (DEBUG || requestLifetime &gt; SLOW_REQUEST_THRESHOLD_MS) &#123;</div><div class="line">            VolleyLog.d(&quot;HTTP response for request=&lt;%s&gt; [lifetime=%d], [size=%s], &quot; +</div><div class="line">                    &quot;[rc=%d], [retryCount=%s]&quot;, request, requestLifetime,</div><div class="line">                    responseContents != null ? responseContents.length : &quot;null&quot;,</div><div class="line">                    statusLine.getStatusCode(), request.getRetryPolicy().getCurrentRetryCount());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Attempts to prepare the request for a retry. If there are no more attempts remaining in the</div><div class="line">     * request&apos;s retry policy, a timeout exception is thrown.</div><div class="line">     * 每次尝试都会使retry机会减少1，如果机会没有了，则抛出请求超时的exception</div><div class="line">     *</div><div class="line">     * @param request The request to use.</div><div class="line">     */</div><div class="line">    private static void attemptRetryOnException(String logPrefix, Request&lt;?&gt; request,</div><div class="line">            VolleyError exception) throws VolleyError &#123;</div><div class="line">        RetryPolicy retryPolicy = request.getRetryPolicy();</div><div class="line">        int oldTimeout = request.getTimeoutMs();</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            retryPolicy.retry(exception);</div><div class="line">        &#125; catch (VolleyError e) &#123;</div><div class="line">            request.addMarker(</div><div class="line">                    String.format(&quot;%s-timeout-giveup [timeout=%s]&quot;, logPrefix, oldTimeout));</div><div class="line">            throw e;</div><div class="line">        &#125;</div><div class="line">        request.addMarker(String.format(&quot;%s-retry [timeout=%s]&quot;, logPrefix, oldTimeout));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 添加上缓存的header</div><div class="line">     * 如果有之前的缓存的信息</div><div class="line">     * 将里面的信息取出放入header中</div><div class="line">     * </div><div class="line">     * 这里面涉及到了一个条件请求</div><div class="line">     * 如果有缓存的话，header上面会带上一个If-Modified-Since关键字</div><div class="line">     * 服务器会先比较信息modified的时间，如果服务端的数据没有发生变化就返回304(也就是上面的 HttpStatus.SC_NOT_MODIFIED)</div><div class="line">     * 如果服务器的数据发生了变化，则会返回状态码200以及请求需要的数据(意思就是本地的数据需要刷新了，缓存不管用了)</div><div class="line">     */</div><div class="line">    private void addCacheHeaders(Map&lt;String, String&gt; headers, Cache.Entry entry) &#123;</div><div class="line">        // If there&apos;s no cache entry, we&apos;re done.</div><div class="line">        if (entry == null) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (entry.etag != null) &#123;</div><div class="line">            headers.put(&quot;If-None-Match&quot;, entry.etag);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (entry.lastModified &gt; 0) &#123;</div><div class="line">            Date refTime = new Date(entry.lastModified);</div><div class="line">            headers.put(&quot;If-Modified-Since&quot;, DateUtils.formatDate(refTime));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected void logError(String what, String url, long start) &#123;</div><div class="line">        long now = SystemClock.elapsedRealtime();</div><div class="line">        VolleyLog.v(&quot;HTTP ERROR(%s) %d ms to fetch %s&quot;, what, (now - start), url);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** </div><div class="line">     * Reads the contents of HttpEntity into a byte[].</div><div class="line">     * 从HttpEntity中读取数据，并通过ByteArrayPool将其转换成byte[]</div><div class="line">     * 暂时不用管太多= =，等后面介绍到ByteArrayPool.java的时候就会明白</div><div class="line">     */</div><div class="line">    private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError &#123;</div><div class="line"></div><div class="line">        PoolingByteArrayOutputStream bytes =</div><div class="line">                new PoolingByteArrayOutputStream(mPool, (int) entity.getContentLength());</div><div class="line"></div><div class="line">        byte[] buffer = null;</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            InputStream in = entity.getContent();</div><div class="line">            if (in == null) &#123;</div><div class="line">                throw new ServerError();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            /**</div><div class="line">             * 获取一个大小为1024的缓冲区</div><div class="line">             */</div><div class="line">            buffer = mPool.getBuf(1024);</div><div class="line"></div><div class="line">            int count;</div><div class="line">            //将content的内容通过流每次最大读出1024个byte, 全部读出并写入bytes</div><div class="line">            while ((count = in.read(buffer)) != -1) &#123;</div><div class="line">                bytes.write(buffer, 0, count);</div><div class="line">            &#125;</div><div class="line">            return bytes.toByteArray();</div><div class="line">        &#125; finally &#123;</div><div class="line">            try &#123;</div><div class="line">                // Close the InputStream and release the resources by &quot;consuming the content&quot;.</div><div class="line">                entity.consumeContent();</div><div class="line">            &#125; catch (IOException e) &#123;</div><div class="line">                // This can happen if there was an exception above that left the entity in</div><div class="line">                // an invalid state.</div><div class="line">                VolleyLog.v(&quot;Error occured when calling consumingContent&quot;);</div><div class="line">            &#125;</div><div class="line">            /**</div><div class="line">             * 在所有工作完成之后</div><div class="line">             * 需要将从mPool中拿出的buffer缓冲区回收</div><div class="line">             */</div><div class="line">            mPool.returnBuf(buffer);</div><div class="line">            bytes.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Converts Headers[] to Map&lt;String, String&gt;.</div><div class="line">     * 将返回的response里面的header[]</div><div class="line">     * 全部转换成Map里面的键值对形式</div><div class="line">     */</div><div class="line">    protected static Map&lt;String, String&gt; convertHeaders(Header[] headers) &#123;</div><div class="line">        Map&lt;String, String&gt; result = new TreeMap&lt;String, String&gt;(String.CASE_INSENSITIVE_ORDER);</div><div class="line">        for (int i = 0; i &lt; headers.length; i++) &#123;</div><div class="line">            result.put(headers[i].getName(), headers[i].getValue());</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="4-ByteArrayPool-java"><a href="#4-ByteArrayPool-java" class="headerlink" title="4. ByteArrayPool.java"></a><a href="#4-_ByteArrayPool-java" title="4\. ByteArrayPool.java"></a>4. ByteArrayPool.java</h3><p>ByteArrayPool.java是用来将HttpResponse中Entity通过stream的形式转换成byte[],主要的作用是提供缓冲区，用来辅助流数据的读取，在使用完成之后需要将使用过的缓冲区还给ByteArrayPool，ByteArrayPool里会对这些byte[]进行简单的回收处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 用来给外界提供byte[]作为缓冲区的一个工具类</div><div class="line"> */</div><div class="line">public class ByteArrayPool &#123;</div><div class="line">    /**</div><div class="line">     * The buffer pool, arranged both by last use and by buffer size </div><div class="line">     */</div><div class="line">    private List&lt;byte[]&gt; mBuffersByLastUse = new LinkedList&lt;byte[]&gt;();</div><div class="line">    private List&lt;byte[]&gt; mBuffersBySize = new ArrayList&lt;byte[]&gt;(64);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * The total size of the buffers in the pool</div><div class="line">     * 缓冲池的当前大小</div><div class="line">     */</div><div class="line">    private int mCurrentSize = 0;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * The maximum aggregate size of the buffers in the pool. Old buffers are discarded to stay</div><div class="line">     * under this limit.</div><div class="line">     * 缓冲池当前的大小的阀值</div><div class="line">     * 超过了该值则会对缓冲池进行回收处理</div><div class="line">     */</div><div class="line">    private final int mSizeLimit;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Compares buffers by size</div><div class="line">     * 比较两个缓冲区的大小的规则</div><div class="line">     * 如果返回一个负数，则表示前一个数要小</div><div class="line">     * 如果返回0，则表示两个数字相等</div><div class="line">     * 如果返回一个正数，则表示后一个数要小</div><div class="line">     * </div><div class="line">     */</div><div class="line">    protected static final Comparator&lt;byte[]&gt; BUF_COMPARATOR = new Comparator&lt;byte[]&gt;() &#123;</div><div class="line">        @Override</div><div class="line">        public int compare(byte[] lhs, byte[] rhs) &#123;</div><div class="line">            return lhs.length - rhs.length;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param sizeLimit the maximum size of the pool, in bytes</div><div class="line">     * 用来修改缓冲池的大小阀值</div><div class="line">     */</div><div class="line">    public ByteArrayPool(int sizeLimit) &#123;</div><div class="line">        mSizeLimit = sizeLimit;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns a buffer from the pool if one is available in the requested size, or allocates a new</div><div class="line">     * one if a pooled one is not available.</div><div class="line">     * 从mBuffersBySize中调出一个缓冲区来</div><div class="line">     * 如果大小符合要求，则直接返回给调用者</div><div class="line">     * 如果没有符合要求的，直接创建一个新的byte[]返回</div><div class="line">     *</div><div class="line">     * @param len the minimum size, in bytes, of the requested buffer. The returned buffer may be</div><div class="line">     *        larger.</div><div class="line">     * @return a byte[] buffer is always returned.</div><div class="line">     */</div><div class="line">    public synchronized byte[] getBuf(int len) &#123;</div><div class="line">        for (int i = 0; i &lt; mBuffersBySize.size(); i++) &#123;</div><div class="line">            byte[] buf = mBuffersBySize.get(i);</div><div class="line">            if (buf.length &gt;= len) &#123;</div><div class="line">                mCurrentSize -= buf.length;</div><div class="line">                mBuffersBySize.remove(i);</div><div class="line">                mBuffersByLastUse.remove(buf);</div><div class="line">                return buf;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return new byte[len];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns a buffer to the pool, throwing away old buffers if the pool would exceed its allotted</div><div class="line">     * size.</div><div class="line">     * </div><div class="line">     * @param buf the buffer to return to the pool.</div><div class="line">     */</div><div class="line">    public synchronized void returnBuf(byte[] buf) &#123;</div><div class="line"></div><div class="line">        //如果buf为空或者超出了规定的大小，不管就行了，这种缓冲区用不着回收，因为= =根本就不符合要求嘛</div><div class="line"></div><div class="line">        if (buf == null || buf.length &gt; mSizeLimit) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        //如果buf符合要求，则将其加入到最近使用的队列中去</div><div class="line"></div><div class="line">        mBuffersByLastUse.add(buf);</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 通过二分查找，比较规则为BUF_COMPARATOR，找出新进来的buf应该处于的位置</div><div class="line">         * 随后将buf插入到mBufferBySize的队列里面</div><div class="line">         */</div><div class="line">        int pos = Collections.binarySearch(mBuffersBySize, buf, BUF_COMPARATOR);</div><div class="line">        if (pos &lt; 0) &#123;</div><div class="line">            pos = -pos - 1;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mBuffersBySize.add(pos, buf);</div><div class="line"></div><div class="line">        //当前总缓冲区大小变大</div><div class="line">        mCurrentSize += buf.length;</div><div class="line"></div><div class="line">        //对整个缓冲池的大小做出调整</div><div class="line">        trim();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Removes buffers from the pool until it is under its size limit.</div><div class="line">     * 调整缓冲区的大小</div><div class="line">     * 直到mCurrentSize在限制大小之下</div><div class="line">     */</div><div class="line">    private synchronized void trim() &#123;</div><div class="line"></div><div class="line">        while (mCurrentSize &gt; mSizeLimit) &#123;</div><div class="line">            byte[] buf = mBuffersByLastUse.remove(0);</div><div class="line">            mBuffersBySize.remove(buf);</div><div class="line">            mCurrentSize -= buf.length;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="5-RetryPolicy-java"><a href="#5-RetryPolicy-java" class="headerlink" title="5. RetryPolicy.java"></a><a href="#5-_RetryPolicy-java" title="5\. RetryPolicy.java"></a>5. RetryPolicy.java</h3><p>在BasicNetwork.java这个类中，通过死循环加上try,catch的方式，不停的对一个request进行重复的处理，里面涉及到了<code>RetryPolicy.java</code>接口以及其默认实现类，这个接口是用来专门处理一个request在发送以及得到服务器响应返回结果的过程中出现的问题。通过有限次数的不断扩大request响应时间阀值，再次发送request的方式来达到一个retry的目的。和<code>Network.java</code>类似的，<code>RetryPolicy.java</code>也仅仅就是提供了抽象方法，想把具体的实现内容弄明白还需要去默认实现类<code>DefaultRetryPolicy.java</code>中去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">package com.android.volley;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Retry policy for a request.</div><div class="line"> * 该类用来管理request的调整及重新发送</div><div class="line"> * 所谓调整就是将request响应时间(timeout)放宽</div><div class="line"> */</div><div class="line">public interface RetryPolicy &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns the current timeout (used for logging).</div><div class="line">     */</div><div class="line">    public int getCurrentTimeout();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns the current retry count (used for logging).</div><div class="line">     */</div><div class="line">    public int getCurrentRetryCount();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Prepares for the next retry by applying a backoff to the timeout.</div><div class="line">     * 为下一次request做好准备，通过不停地来放宽timeout时间限制</div><div class="line">     * 在DefaultRetryPolicy.java中好理解一些</div><div class="line">     * </div><div class="line">     * @param error The error code of the last attempt.</div><div class="line">     * @throws VolleyError In the event that the retry could not be performed (for example if we</div><div class="line">     * ran out of attempts), the passed in error is thrown.</div><div class="line">     */</div><div class="line">    public void retry(VolleyError error) throws VolleyError;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="6-DefaultRetryPolicy-java"><a href="#6-DefaultRetryPolicy-java" class="headerlink" title="6. DefaultRetryPolicy.java"></a><a href="#6-_DefaultRetryPolicy-java" title="6\. DefaultRetryPolicy.java"></a>6. DefaultRetryPolicy.java</h3><p><code>DefaultRetryPolicy.java</code>描述了对待Volley中涉及Network的request的策略方针，可以理解为重试策略方针，也就是对那些在网络请求失败的request处理方法。里面包含了retry的最大次数(<code>mMaxNumRetries</code>)，当前请求次数(<code>mCurrentRetryCount</code>)以及请求超时的时间阀值(<code>mCurrentTimeoutMs</code>)等。每个Request里面都包含了一个<code>RetryPolicy.java</code>实现类，在处理的时候可以通过<code>getRetryPolicy()</code>方法获得。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line">package com.android.volley;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Default retry policy for requests.</div><div class="line"> */</div><div class="line">public class DefaultRetryPolicy implements RetryPolicy &#123;</div><div class="line">    /** </div><div class="line">     * The current timeout in milliseconds. </div><div class="line">     * 请求超时的时间数</div><div class="line">     */</div><div class="line">    private int mCurrentTimeoutMs;</div><div class="line"></div><div class="line">    /** </div><div class="line">     * The current retry count.</div><div class="line">     * 当前请求的重试次数</div><div class="line">     */</div><div class="line">    private int mCurrentRetryCount;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * The maximum number of attempts. </div><div class="line">     * 重复尝试的最大次数</div><div class="line">     **/</div><div class="line">    private final int mMaxNumRetries;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * The backoff multiplier for the policy.</div><div class="line">     * 暂时不明白这个有什么用</div><div class="line">     * 根据后面的来看好像是一个用于放宽timeout时间限制的系数</div><div class="line">     * 这个系数越大每次retry的时候放宽的程度也就越大</div><div class="line">     */</div><div class="line">    private final float mBackoffMultiplier;</div><div class="line"></div><div class="line">    /** The default socket timeout in milliseconds */</div><div class="line">    public static final int DEFAULT_TIMEOUT_MS = 2500;</div><div class="line"></div><div class="line">    /** The default number of retries */</div><div class="line">    public static final int DEFAULT_MAX_RETRIES = 0;</div><div class="line"></div><div class="line">    /** The default backoff multiplier */</div><div class="line">    public static final float DEFAULT_BACKOFF_MULT = 1f;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Constructs a new retry policy using the default timeouts.</div><div class="line">     * 默认的构造器，2.5s的超时，</div><div class="line">     * 最大重试数为0，也就是request请求超时了就不要再自动重试了</div><div class="line">     */</div><div class="line">    public DefaultRetryPolicy() &#123;</div><div class="line">        this(DEFAULT_TIMEOUT_MS, DEFAULT_MAX_RETRIES, DEFAULT_BACKOFF_MULT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Constructs a new retry policy.</div><div class="line">     * @param initialTimeoutMs The initial timeout for the policy.</div><div class="line">     * @param maxNumRetries The maximum number of retries.</div><div class="line">     * @param backoffMultiplier Backoff multiplier for the policy.</div><div class="line">     */</div><div class="line">    public DefaultRetryPolicy(int initialTimeoutMs, int maxNumRetries, float backoffMultiplier) &#123;</div><div class="line">        mCurrentTimeoutMs = initialTimeoutMs;</div><div class="line">        mMaxNumRetries = maxNumRetries;</div><div class="line">        mBackoffMultiplier = backoffMultiplier;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns the current timeout.</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public int getCurrentTimeout() &#123;</div><div class="line">        return mCurrentTimeoutMs;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns the current retry count.</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public int getCurrentRetryCount() &#123;</div><div class="line">        return mCurrentRetryCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns the backoff multiplier for the policy.</div><div class="line">     */</div><div class="line">    public float getBackoffMultiplier() &#123;</div><div class="line">        return mBackoffMultiplier;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Prepares for the next retry by applying a backoff to the timeout.</div><div class="line">     * 该方法定义在RetryPolicy.java中。</div><div class="line">     * 为下一次重试request做准备，好像是通过延长服务器响应时间的限制 = =</div><div class="line">     * 每次对timeout的时间限制都放宽了mBackoffMultiplier个单位。让服务器多一点时间去响应</div><div class="line">     * </div><div class="line">     * @param error The error code of the last attempt.</div><div class="line">     * 最后一次request服务器给出的错误码</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public void retry(VolleyError error) throws VolleyError &#123;</div><div class="line">        mCurrentRetryCount++;</div><div class="line">        mCurrentTimeoutMs += (mCurrentTimeoutMs * mBackoffMultiplier);</div><div class="line">        if (!hasAttemptRemaining()) &#123;</div><div class="line">            throw error;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns true if this policy has attempts remaining, false otherwise.</div><div class="line">     * 这个是用来判断是否还有retry机会的</div><div class="line">     */</div><div class="line">    protected boolean hasAttemptRemaining() &#123;</div><div class="line">        return mCurrentRetryCount &lt;= mMaxNumRetries;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>到这里对<code>Network.java</code>接口以及<code>RetryPolicy.java</code>接口的代码就分析完了，现在是清楚了在<code>NetworkDispatcher.java</code>调用了<code>mNetwork.performRequest()</code>之后发生了什么事情，还弄清楚了request在网络请求发送之后，出现了各种问题会怎么处理(重试策略)，但还不知道最核心的网络请求是如何发生的，也就是在<code>BasicNetwork.java</code>中的下面这行代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">httpResponse = mHttpStack.performRequest(request, headers);</div></pre></td></tr></table></figure><p>这行代码就涉及到了后面的<code>HttpStack.java</code>接口及其两个实现类了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> volley </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Volley框架解析(三)Dispatcher解析</title>
      <link href="/2017/03/01/Volley%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90-%E4%B8%89-Dispatcher%E8%A7%A3%E6%9E%90/"/>
      <url>/2017/03/01/Volley%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90-%E4%B8%89-Dispatcher%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="Volley框架解析-三-—–Dispatcher解析"><a href="#Volley框架解析-三-—–Dispatcher解析" class="headerlink" title="Volley框架解析(三)—–Dispatcher解析"></a>Volley框架解析(三)—–Dispatcher解析</h2><p></p><div class="article-entry" itemprop="articleBody"><h3 id="题外话-可直接无视，跳过"><a href="#题外话-可直接无视，跳过" class="headerlink" title="题外话(可直接无视，跳过~"></a><a href="#u9898_u5916_u8BDD_28_u53EF_u76F4_u63A5_u65E0_u89C6_uFF0C_u8DF3_u8FC7_7E" title="题外话(可直接无视，跳过~"></a>题外话(可直接无视，跳过~</h3><p>在上一篇博客中结合volley源代码分析了<code>Volley.java</code>和<code>RequestQueue.java</code>这两个类，不知道代码全贴上去了，会不会看着很烦的嗯= =，当时看源代码的时候心里就有些不淡定，满屏幕看不懂的东西，但是个人觉得源代码和注释一起看才方便，一段代码一段解释会感觉有点摸不着头脑= =。前面的博客中一直提到了<code>Dispatcher</code>这种的东西，有<code>mNetworkDispatcher</code>和<code>mCacheDispatcher</code>之类的，这篇博客就开始进一步的介绍Volley中的Dispatcher。</p><a id="more"></a><hr><p><a id="more"></a></p><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a><a href="#1-__u7B80_u4ECB" title="1\. 简介"></a>1. 简介</h3><p>在Volley中涉及到了两类的Dispatcher,一类是涉及到缓存的<code>CacheDispatcher.java</code>，另外一类是用来处理网络方面request的<code>NetworkDispatcher.java</code>，最开始出现这两个Dispatcher是在<code>RequestQueue#start()</code>中，再来回顾一下start方法中的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public void start() &#123;</div><div class="line">    stop();  // Make sure any currently running dispatchers are stopped.</div><div class="line">    // Create the cache dispatcher and start it.</div><div class="line">    mCacheDispatcher = new CacheDispatcher(mCacheQueue, mNetworkQueue, mCache, mDelivery);</div><div class="line">    mCacheDispatcher.start();</div><div class="line"></div><div class="line">    // Create network dispatchers (and corresponding threads) up to the pool size.</div><div class="line">    for (int i = 0; i &lt; mDispatchers.length; i++) &#123;</div><div class="line">        NetworkDispatcher networkDispatcher = new NetworkDispatcher(mNetworkQueue, mNetwork,</div><div class="line">                mCache, mDelivery);</div><div class="line">        mDispatchers[i] = networkDispatcher;</div><div class="line">        networkDispatcher.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>先暂停了所有的dispatcher，然后又新建了dispatcher并start()。让dispatcher开始工作，实际上这些dispatcher继承了Thread类，是独立于主线程之外的工作线程，这样可以使RequestQueue中request的加入和处理同时进行。下面就结合CacheDispatcher和NetworkDispatcher两个类的代码来分析,Volley中是如何对request来进行调度和处理的。</p><h3 id="2-CacheDispatcher-java"><a href="#2-CacheDispatcher-java" class="headerlink" title="2. CacheDispatcher.java"></a><a href="#2-_CacheDispatcher-java" title="2\. CacheDispatcher.java"></a>2. CacheDispatcher.java</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div></pre></td><td class="code"><pre><div class="line">package com.android.volley;</div><div class="line"></div><div class="line">import android.os.Process;</div><div class="line"></div><div class="line">import java.util.concurrent.BlockingQueue;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Provides a thread for performing cache triage on a queue of requests.</div><div class="line"> * 提供一个用来处理涉及到缓存的requests的线程</div><div class="line"> * </div><div class="line"> * Requests added to the specified cache queue are resolved from cache.</div><div class="line"> * Any deliverable response is posted back to the caller via a</div><div class="line"> * &#123;@link ResponseDelivery&#125;.  Cache misses and responses that require</div><div class="line"> * refresh are enqueued on the specified network queue for processing</div><div class="line"> * by a &#123;@link NetworkDispatcher&#125;.</div><div class="line"> * CacheDispatcher用来处理缓存队列里面(mCacheQueue)中的request</div><div class="line"> * 任何符合delivery要求的response都会被通过ResponseDelivery的接口传递给caller</div><div class="line"> * 有些cache丢失了或者是cache中的数据需要更新的，都将会交给NetworkDispatcher去处理</div><div class="line"> * 交给NetworkDispatcher处理的方法就是直接放到mNetworkQueue中去</div><div class="line"> * 因为NetworkDispatcher总是从mNetworkQueue中取出request来进行处理的</div><div class="line"> */</div><div class="line"></div><div class="line">public class CacheDispatcher extends Thread &#123;</div><div class="line"></div><div class="line">    private static final boolean DEBUG = VolleyLog.DEBUG;</div><div class="line"></div><div class="line">    /** </div><div class="line">     * The queue of requests coming in for triage. </div><div class="line">     * 将要被处理的涉及到缓存的Request存放在这个阻塞队列里</div><div class="line">     * 等着咯，这个mCacheQueue和RequestQueue中的mCacheQueue指向的队列是同一个</div><div class="line">     * 也就是说整个Volley在运行的时候只有一个mCacheQueue</div><div class="line">     */</div><div class="line">    private final BlockingQueue&lt;Request&lt;?&gt;&gt; mCacheQueue;</div><div class="line"></div><div class="line">    /** </div><div class="line">     * The queue of requests going out to the network. </div><div class="line">     * 这个阻塞队里里面存着的可是要去进行网络访问的request</div><div class="line">     * 开始还不明白这里不应该是涉及到访问缓存的request</div><div class="line">     * 怎么有个这东西出来了，其实看到后面了就会发现，缓存里面有两个过期时间</div><div class="line">     * 在后面会介绍到Cache.java类，Cache.Entry类中涉及到了</div><div class="line">     * ttl 和 softTtl这两个long型的数据，用来标识缓存是否已经过期了</div><div class="line">     * 或者是否需要去检查是否要更新缓存的两个间隔时间</div><div class="line">     */</div><div class="line">    private final BlockingQueue&lt;Request&lt;?&gt;&gt; mNetworkQueue;</div><div class="line"></div><div class="line">    /** </div><div class="line">     * The cache to read from. </div><div class="line">     * 用于读写缓存的接口</div><div class="line">     * 这个接口也是在Volley中只有一个</div><div class="line">     * mCacheDispatcher和mNetworkDispatcher公用的</div><div class="line">     */</div><div class="line">    private final Cache mCache;</div><div class="line"></div><div class="line">    /** </div><div class="line">     * For posting responses. </div><div class="line">     * ResponseDelivery对象引用，用来将request的结果传递给caller</div><div class="line">     * 在NetworkDispatcher里面也有出现</div><div class="line">     * 这个也是从RequestQueue中传递过来的，公用</div><div class="line">     */</div><div class="line">    private final ResponseDelivery mDelivery;</div><div class="line"></div><div class="line">    /** </div><div class="line">     * Used for telling us to die. </div><div class="line">     * 直译 ： 用来告诉我们去死= = (shit)</div><div class="line">     * 然而 ： 这个变量用来标志这个dispatcher是否要继续工作下去</div><div class="line">     * 如果为true就结束本线程中的死循环</div><div class="line">     */</div><div class="line">    private volatile boolean mQuit = false;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Creates a new cache triage dispatcher thread.  You must call &#123;@link #start()&#125;</div><div class="line">     * in order to begin processing.</div><div class="line">     * 构造函数咯，创建一个存放需要访问缓存的request的调度线程</div><div class="line">     * 在创建之后需要将其用start()启动</div><div class="line">     * </div><div class="line">     * @param cacheQueue Queue of incoming requests for triage</div><div class="line">     * 存放request的缓存队列</div><div class="line">     * @param networkQueue Queue to post requests that require network to</div><div class="line">     * 存放涉及network的网络队列</div><div class="line">     * @param cache Cache interface to use for resolution</div><div class="line">     * 用来处理缓存读写问题的接口</div><div class="line">     * @param delivery Delivery interface to use for posting responses</div><div class="line">     * 用来反馈结果的接口</div><div class="line">     */</div><div class="line">    public CacheDispatcher(</div><div class="line">            BlockingQueue&lt;Request&lt;?&gt;&gt; cacheQueue, BlockingQueue&lt;Request&lt;?&gt;&gt; networkQueue,</div><div class="line">            Cache cache, ResponseDelivery delivery) &#123;</div><div class="line">        mCacheQueue = cacheQueue;</div><div class="line">        mNetworkQueue = networkQueue;</div><div class="line">        mCache = cache;</div><div class="line">        mDelivery = delivery;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Forces this dispatcher to quit immediately.  If any requests are still in</div><div class="line">     * the queue, they are not guaranteed to be processed.</div><div class="line">     * 将标志位mQuit置为true,在每次死循环的最后会判断该标志位</div><div class="line">     */</div><div class="line">    public void quit() &#123;</div><div class="line">        mQuit = true;</div><div class="line">        interrupt();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 前面提到了CacheDispatcher继承了Thread类</div><div class="line">     * 这里就重写了run()方法</div><div class="line">     * 当外面调用了mCacheDispatcher.start()之后</div><div class="line">     * run()里面的方法就开始执行了</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line"></div><div class="line">        if (DEBUG) VolleyLog.v(&quot;start new dispatcher&quot;);</div><div class="line">        /**</div><div class="line">         * 给自己设置了线程的优先级</div><div class="line">         * THREAD_PRIORITY_BACKGROUND的优先级是0x0000000a(也就是10)</div><div class="line">         * 还有其他的很多种优先级，该优先级处于较高的位置</div><div class="line">         */</div><div class="line">        Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</div><div class="line"></div><div class="line">        /**</div><div class="line">         * Make a blocking call to initialize the cache.</div><div class="line">         * 在读写缓存之前做一些初始化工作，例如扫描缓存目录是否存在等</div><div class="line">         * 这个暂时先不用管里面的内容，等介绍到Cache.java的时候就会明白</div><div class="line">         */</div><div class="line">        mCache.initialize();</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 从这里开始就进入了死循环的状态</div><div class="line">         * 除非出现了什么没有catch的exception</div><div class="line">         * 或者是mQuit标志位被置成了true</div><div class="line">         * 这个死循环将一直进行下去= =</div><div class="line">         * 总感觉有什么不妥的地方，感觉死循环怪怪的噢</div><div class="line">         */</div><div class="line">        while (true) &#123;</div><div class="line">            /**</div><div class="line">             * 和NetworkDispatcher里面的流程没有什么太大的变化</div><div class="line">             * 还是一个死循环不停的从CacheQueue中取出Request</div><div class="line">             */</div><div class="line">            try &#123;</div><div class="line">                /**</div><div class="line">                 * Get a request from the cache triage queue, blocking until</div><div class="line">                 * at least one is available.</div><div class="line">                 * 从缓存request队列里面取出等待处理的request</div><div class="line">                 * 如果没有可取出的request，则会在这里阻塞</div><div class="line">                 * 这个是PriorityBlockingQueue#take()函数的作用</div><div class="line">                 * </div><div class="line">                 */</div><div class="line">                final Request&lt;?&gt; request = mCacheQueue.take();</div><div class="line"></div><div class="line">                /**</div><div class="line">                 * 给每个request添加上一个打log的标志</div><div class="line">                 * 为了debug的需要</div><div class="line">                 */</div><div class="line">                request.addMarker(&quot;cache-queue-take&quot;);</div><div class="line"></div><div class="line">                /**</div><div class="line">                 * If the request has been canceled, don&apos;t bother dispatching it.</div><div class="line">                 * 如果正在处理的这个请求被取消了</div><div class="line">                 * 中断对该request的处理，continue去处理下一个request的调度</div><div class="line">                 * 调用Request#finish()方法，传入的参数是为了debug方便，打出request调度进度的log</div><div class="line">                 */</div><div class="line">                if (request.isCanceled()) &#123;</div><div class="line">                    request.finish(&quot;cache-discard-canceled&quot;);</div><div class="line">                    continue;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                /**</div><div class="line">                 * 在这里NetworkDispatcher和CacheDispatcher出现了一点差异</div><div class="line">                 * NetworkDispatcher.java在这一步就直接开始网络请求了</div><div class="line">                 * </div><div class="line">                 * 由于是CacheDispatcher.java，肯定是主要以Cahce为主的</div><div class="line">                 * CacheDispatcher在这里先看看有没有缓存</div><div class="line">                 * 如果没有缓存则马上将这个request加入到NetworkQueue中</div><div class="line">                 * (意思好像就是= =兄弟你排错队了)</div><div class="line">                 * 然后继续喊下一个request来被处理</div><div class="line">                 */</div><div class="line">                // Attempt to retrieve this item from cache.</div><div class="line">                Cache.Entry entry = mCache.get(request.getCacheKey());</div><div class="line">                if (entry == null) &#123;</div><div class="line">                    request.addMarker(&quot;cache-miss&quot;);</div><div class="line">                    // Cache miss; send off to the network dispatcher.</div><div class="line">                    mNetworkQueue.put(request);</div><div class="line">                    continue;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                /**</div><div class="line">                 * 能到这一步的request不简单了</div><div class="line">                 * 肯定是被上面的mCache.get(cacheKey)查到了有缓存的(毕竟有靠山的伤不起)</div><div class="line">                 * 有缓存还不能太大意= =，万一缓存尼玛是个过期的就惨了= =</div><div class="line">                 * 先用entry.isExpired()函数检查一番</div><div class="line">                 * 过期了照样还是给我滚到NetworkQueue中去排队</div><div class="line">                 *</div><div class="line">                 * 继续喊下一个request来</div><div class="line">                 */</div><div class="line">                // If it is completely expired, just send it to the network.</div><div class="line">                if (entry.isExpired()) &#123;</div><div class="line">                    request.addMarker(&quot;cache-hit-expired&quot;);</div><div class="line">                    request.setCacheEntry(entry);</div><div class="line">                    mNetworkQueue.put(request);</div><div class="line">                    continue;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                /**</div><div class="line">                 * 哎哟，能到这一步的request更加不简单了，不仅仅有缓存</div><div class="line">                 * 而且还是能用的缓存，没有过期的诶，这才是有真的靠山= =</div><div class="line">                 *</div><div class="line">                 * 将缓存的信息都拿出来，组成一个NetworkResponse</div><div class="line">                 * 就像是刚刚从网络上获取出来的一样，再形成一个Response.java对象</div><div class="line">                 * 但是不要着急把这个response直接传回caller，这个response还没确定是否需要refresh</div><div class="line">                 */</div><div class="line"></div><div class="line">                // We have a cache hit; parse its data for delivery back to the request.</div><div class="line">                request.addMarker(&quot;cache-hit&quot;);</div><div class="line"></div><div class="line">                /**</div><div class="line">                 * 将一个由缓存中的数据创建的NetworkResponse.java对象</div><div class="line">                 * 通过Request#parseNetworkResponse()方法</div><div class="line">                 * 来解析成一个Response.java对象</div><div class="line">                 */</div><div class="line">                Response&lt;?&gt; response = request.parseNetworkResponse(</div><div class="line">                        new NetworkResponse(entry.data, entry.responseHeaders));</div><div class="line"></div><div class="line">                //为了方便debug，对request每一个时期的状态都需要添加不同的log信息</div><div class="line">                request.addMarker(&quot;cache-hit-parsed&quot;);</div><div class="line"></div><div class="line">                if (!entry.refreshNeeded()) &#123;</div><div class="line">                    // Completely unexpired cache hit. Just deliver the response.</div><div class="line">                    /**</div><div class="line">                     * 如果缓存不需要刷新的话，直接传回给caller</div><div class="line">                     */</div><div class="line">                    mDelivery.postResponse(request, response);</div><div class="line">                &#125; else &#123;</div><div class="line">                    // Soft-expired cache hit. We can deliver the cached response,</div><div class="line">                    // but we need to also send the request to the network for</div><div class="line">                    // refreshing.</div><div class="line">                    /**</div><div class="line">                     * 如果需要刷新的话，将这个response中的intermediate参数置为true</div><div class="line">                     * 然后再传递给caller，</div><div class="line">                     * 随后将请求发送到服务器进行刷新</div><div class="line">                     */</div><div class="line">                    request.addMarker(&quot;cache-hit-refresh-needed&quot;);</div><div class="line">                    request.setCacheEntry(entry);</div><div class="line"></div><div class="line">                    /**</div><div class="line">                     * Mark the response as intermediate.</div><div class="line">                     * 将这个response标记成中间产物，也就不是最终的response</div><div class="line">                     * </div><div class="line">                     */</div><div class="line">                    response.intermediate = true;</div><div class="line"></div><div class="line">                    /** </div><div class="line">                     * Post the intermediate response back to the user and have</div><div class="line">                     * the delivery then forward the request along to the network.</div><div class="line">                     * poseResponse()方法中的Runnable是在response被传递给caller了之后</div><div class="line">                     * 再执行的，在ResponseDelivery.java中有注释</div><div class="line">                     * </div><div class="line">                     */</div><div class="line">                    mDelivery.postResponse(request, response, new Runnable() &#123;</div><div class="line">                        @Override</div><div class="line">                        public void run() &#123;</div><div class="line">                            try &#123;</div><div class="line">                                //将request加入到网络请求队列中去</div><div class="line">                                mNetworkQueue.put(request);</div><div class="line">                            &#125; catch (InterruptedException e) &#123;</div><div class="line">                                // Not much we can do about this.</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                //当cacheQueue中没有request之后就会捕捉到异常</div><div class="line">                // We may have been interrupted because it was time to quit.</div><div class="line">                if (mQuit) &#123;</div><div class="line">                    return;</div><div class="line">                &#125;</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3-NetworkDispatcher-java"><a href="#3-NetworkDispatcher-java" class="headerlink" title="3. NetworkDispatcher.java"></a><a href="#3-_NetworkDispatcher-java" title="3\. NetworkDispatcher.java"></a>3. NetworkDispatcher.java</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div></pre></td><td class="code"><pre><div class="line">package com.android.volley;</div><div class="line"></div><div class="line">import android.annotation.TargetApi;</div><div class="line">import android.net.TrafficStats;</div><div class="line">import android.os.Build;</div><div class="line">import android.os.Process;</div><div class="line">import android.os.SystemClock;</div><div class="line"></div><div class="line">import java.util.concurrent.BlockingQueue;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Provides a thread for performing network dispatch from a queue of requests.</div><div class="line"> * 提供一个线程专门用来从请求队列(NetworkQueue)里面调度网络请求</div><div class="line"> * </div><div class="line"> * Requests added to the specified queue are processed from the network via a</div><div class="line"> * specified &#123;@link Network&#125; interface. Responses are committed to cache, if</div><div class="line"> * eligible, using a specified &#123;@link Cache&#125; interface. Valid responses and</div><div class="line"> * errors are posted back to the caller via a &#123;@link ResponseDelivery&#125;.</div><div class="line"> *</div><div class="line"> * 被加入到RequestQueue中的request会被NetWork的接口进一步加工处理.</div><div class="line"> * 如果从网络返回的response是符合条件的，则会被添加到缓存中去。</div><div class="line"> * 有效的response将通过ResponseDelivery返回给调用者</div><div class="line"> */</div><div class="line">public class NetworkDispatcher extends Thread &#123;</div><div class="line">    /** </div><div class="line">     * The queue of requests to service. </div><div class="line">     * 这个queue就是RequestQueue.java中的mNetworkQueue</div><div class="line">     */</div><div class="line">    private final BlockingQueue&lt;Request&lt;?&gt;&gt; mQueue;</div><div class="line"></div><div class="line">    /** </div><div class="line">     * The network interface for processing requests. </div><div class="line">     * 处理request的接口，其中的方法是performRequest()</div><div class="line">     */</div><div class="line">    private final Network mNetwork;     </div><div class="line"></div><div class="line">    /** </div><div class="line">     * The cache to write to. </div><div class="line">     * 处理缓存的接口</div><div class="line">     */</div><div class="line">    private final Cache mCache;</div><div class="line"></div><div class="line">    /** </div><div class="line">     * For posting responses and errors. </div><div class="line">     * 用来传递response和error的deliver.</div><div class="line">     */</div><div class="line">    private final ResponseDelivery mDelivery;</div><div class="line"></div><div class="line">    /** </div><div class="line">     * Used for telling us to die. 、</div><div class="line">     * 这里使用到了volatile变量</div><div class="line">     * 这个volatile类似于final之类的修饰词</div><div class="line">     * 是用来保证每次mQuit被读取的时候都是最新的</div><div class="line">     * 避免了读取的值和实际变量的值不同的情况</div><div class="line">     * 可以参考这篇博客，讲解的比较详细：</div><div class="line">     * http://www.cnblogs.com/aigongsi/archive/2012/04/01/2429166.html</div><div class="line">     */</div><div class="line">    private volatile boolean mQuit = false;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Creates a new network dispatcher thread.  You must call &#123;@link #start()&#125;</div><div class="line">     * in order to begin processing.</div><div class="line">     * 构造器，用于创建一个新的网络调度线程，必须要调用call来开始处理request</div><div class="line">     * </div><div class="line">     * @param queue Queue of incoming requests for triage</div><div class="line">     * 等待处理的request队列</div><div class="line">     * @param network Network interface to use for performing requests</div><div class="line">     * @param cache Cache interface to use for writing responses to cache</div><div class="line">     * @param delivery Delivery interface to use for posting responses</div><div class="line">     */</div><div class="line">    public NetworkDispatcher(BlockingQueue&lt;Request&lt;?&gt;&gt; queue,</div><div class="line">            Network network, Cache cache,</div><div class="line">            ResponseDelivery delivery) &#123;</div><div class="line">        mQueue = queue;</div><div class="line">        mNetwork = network;</div><div class="line">        mCache = cache;</div><div class="line">        mDelivery = delivery;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Forces this dispatcher to quit immediately.  If any requests are still in</div><div class="line">     * the queue, they are not guaranteed to be processed.</div><div class="line">     * 强制调度器立刻退出，不再调度request。</div><div class="line">     * </div><div class="line">     */</div><div class="line">    public void quit() &#123;</div><div class="line">        mQuit = true;</div><div class="line">        interrupt();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 这里涉及到了TrafficStats类，官方解释如下：</div><div class="line">     * Class that provides network traffic statistics. </div><div class="line">     * 这个类提供网络流量统计的服务。</div><div class="line">     * These statistics include bytes transmitted and received and network packets transmitted and received, </div><div class="line">     * over all interfaces, over the mobile interface, and on a per-UID basis.</div><div class="line">     * 这些被统计的流量包括传输的字节数和收到的字节数以及网络数据包</div><div class="line">     * These statistics may not be available on all platforms. </div><div class="line">     * If the statistics are not supported by this device, UNSUPPORTED will be returned.</div><div class="line">     * 这些数据并不是在所有的平台上都可以用</div><div class="line">     * 如果不可用，则会返回UNSPPORTED</div><div class="line">     * 貌似是每个request都统计一下网络流量= =</div><div class="line">     */</div><div class="line">    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)</div><div class="line">    private void addTrafficStatsTag(Request&lt;?&gt; request) &#123;</div><div class="line">        // Tag the request (if API &gt;= 14)</div><div class="line">        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.ICE_CREAM_SANDWICH) &#123;</div><div class="line">            TrafficStats.setThreadStatsTag(request.getTrafficStatsTag());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 由于NetworkDispatcher继承自Thread，重写了run()方法</div><div class="line">     * 里面的内容都会在另启动一个线程来执行</div><div class="line">     * 在CacheDispatcher中有很多相似的地方</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        /**</div><div class="line">         * 给自己设置了线程的优先级</div><div class="line">         * THREAD_PRIORITY_BACKGROUND的优先级是0x0000000a(也就是10)</div><div class="line">         * 还有其他的很多种优先级，该优先级处于较高的位置</div><div class="line">         */</div><div class="line">        Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</div><div class="line"></div><div class="line">        Request&lt;?&gt; request;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 进入了一个死循环状态</div><div class="line">         * 开始不停的工作</div><div class="line">         */</div><div class="line">        while (true) &#123;</div><div class="line"></div><div class="line">            /**</div><div class="line">             * elapsedRealtime()函数返回的是线程从启动到现在的总时间</div><div class="line">             * 也包括线程睡眠时间在内</div><div class="line">             * 单看这一句看不出什么门道，结合在后面的异常处理时会用到startTimeMs</div><div class="line">             * 这里是记录一个request开始的时刻点，到后面再次调用elapsedRealtime()</div><div class="line">             * 两个变量相减得到了request花费了多长的时间</div><div class="line">             */</div><div class="line">            long startTimeMs = SystemClock.elapsedRealtime();</div><div class="line">            /**</div><div class="line">             * release previous request object to avoid leaking request object when mQueue is drained.</div><div class="line">             * 释放前面的一个Request对象，以免因为Request对象不停的申请而导致内存泄漏</div><div class="line">             */</div><div class="line">            request = null;</div><div class="line"></div><div class="line">            /**</div><div class="line">             * 尝试着从RequestQueue中取出一个Request，对其进行处理</div><div class="line">             * 可能会因为某些原因(可能是队列中没有元素了)会抛出异常</div><div class="line">             * 这个时候就捕捉异常并检验是否要退出了，需要退出则return</div><div class="line">             * 不需要退出则继续下一次循环，看有没有Request可以拿到</div><div class="line">             */</div><div class="line">            try &#123;</div><div class="line">                // Take a request from the queue.</div><div class="line">                request = mQueue.take();</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                // We may have been interrupted because it was time to quit.</div><div class="line">                if (mQuit) &#123;</div><div class="line">                    return;</div><div class="line">                &#125;</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            /**</div><div class="line">             * 到这一步的时候，request应该是指向了一个Request</div><div class="line">             * 下面开始向服务器发送这个Request</div><div class="line">             */</div><div class="line"></div><div class="line">            try &#123;</div><div class="line">                request.addMarker(&quot;network-queue-take&quot;);</div><div class="line"></div><div class="line">                // If the request was cancelled already, do not perform the</div><div class="line">                // network request.</div><div class="line">                if (request.isCanceled()) &#123;</div><div class="line">                    request.finish(&quot;network-discard-cancelled&quot;);</div><div class="line">                    continue;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                addTrafficStatsTag(request);</div><div class="line"></div><div class="line">                /**</div><div class="line">                 * Perform the network request.</div><div class="line">                 * 直接调用mNetwork的接口，发送request并获得NetworkResponse</div><div class="line">                 */</div><div class="line">                NetworkResponse networkResponse = mNetwork.performRequest(request);</div><div class="line">                request.addMarker(&quot;network-http-complete&quot;);</div><div class="line"></div><div class="line">                // If the server returned 304 AND we delivered a response already,</div><div class="line">                // we&apos;re done -- don&apos;t deliver a second identical response.</div><div class="line">                if (networkResponse.notModified &amp;&amp; request.hasHadResponseDelivered()) &#123;</div><div class="line">                    request.finish(&quot;not-modified&quot;);</div><div class="line">                    continue;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                /**</div><div class="line">                 * Parse the response here on the worker thread.</div><div class="line">                 * 在工作线程上面直接解析结果</div><div class="line">                 * 并且封装成一个Response对象</div><div class="line">                 */</div><div class="line">                Response&lt;?&gt; response = request.parseNetworkResponse(networkResponse);</div><div class="line">                request.addMarker(&quot;network-parse-complete&quot;);</div><div class="line"></div><div class="line">                /** Write to cache if applicable.</div><div class="line">                 *  如果符合要求，能写入缓存的话，就写到缓存里面</div><div class="line">                 */</div><div class="line">                // TODO: Only update cache metadata instead of entire record for 304s.</div><div class="line"></div><div class="line">                /**</div><div class="line">                 * 在这里看到作者的TODO了，还能改进的地方就是在出现了返回码是</div><div class="line">                 * 304的情况时，只更新缓存中的元数据(也就是response的主体)</div><div class="line">                 * 而不是整个cache的记录下来,有些重复的数据可以不用理会.</div><div class="line">                 */</div><div class="line">                if (request.shouldCache() &amp;&amp; response.cacheEntry != null) &#123;</div><div class="line">                    mCache.put(request.getCacheKey(), response.cacheEntry);</div><div class="line">                    request.addMarker(&quot;network-cache-written&quot;);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                /**</div><div class="line">                 * 将Request.java中的变量mResponseDelivered置成true</div><div class="line">                 * 标志着这个request的结果已经传回给了caller</div><div class="line">                 */</div><div class="line"></div><div class="line">                request.markDelivered();</div><div class="line"></div><div class="line">                /**</div><div class="line">                 * 通过ResponseDelivery的接口将包装好了的Response返回给调用者</div><div class="line">                 */</div><div class="line">                mDelivery.postResponse(request, response);</div><div class="line"></div><div class="line">            &#125; catch (VolleyError volleyError) &#123;</div><div class="line">                /**</div><div class="line">                 * 设置了request从队列中取出到服务器出现异常反应</div><div class="line">                 * 所花费的时间</div><div class="line">                 */</div><div class="line">                volleyError.setNetworkTimeMs(SystemClock.elapsedRealtime() - startTimeMs);</div><div class="line"></div><div class="line">                /**</div><div class="line">                 * 将网络请求的错误通过ResponseDelivery传递给调用者</div><div class="line">                 * 告诉它这.....不幸的一切</div><div class="line">                 */</div><div class="line">                parseAndDeliverNetworkError(request, volleyError);</div><div class="line"></div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                VolleyLog.e(e, &quot;Unhandled exception %s&quot;, e.toString());</div><div class="line">                VolleyError volleyError = new VolleyError(e);</div><div class="line">                volleyError.setNetworkTimeMs(SystemClock.elapsedRealtime() - startTimeMs);</div><div class="line">                mDelivery.postError(request, volleyError);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void parseAndDeliverNetworkError(Request&lt;?&gt; request, VolleyError error) &#123;</div><div class="line">        error = request.parseNetworkError(error);</div><div class="line">        mDelivery.postError(request, error);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当时看完了CacheDispatcher.java之后，再看NetworkDispatcher.java的时候，就会觉得这两个类非常的相似，run()函数里面的东西有些都差不多，都是进行一个死循环，从阻塞队列里面取出request，针对不同的情况做出不同的处理。</p><p>从Volley.java暴露给外部的api开始，一直到现在，已经慢慢的了解了Volley中有一个RequestQueue对象，所有的request都在里面排着队等待被处理，RequestQueue里面还有一个CacheDispatcher和几个NetworkDispatcher,分别负责着不同种类的request。接下来要介绍的就是Volley中<code>Network.java</code>接口以及其默认实现类<code>BasicNetwork.java</code>,还有涉及缓存读写的接口<code>Cache.java</code>以及其默认实现类<code>DiskBasedCache.java</code>。</p></div>]]></content>
      
      
      
        <tags>
            
            <tag> volley </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Volley框架解析(二)Volley以及RequestQueue解析</title>
      <link href="/2017/02/28/Volley%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90-%E4%BA%8C-Volley%E4%BB%A5%E5%8F%8ARequestQueue%E8%A7%A3%E6%9E%90/"/>
      <url>/2017/02/28/Volley%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90-%E4%BA%8C-Volley%E4%BB%A5%E5%8F%8ARequestQueue%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="Volley框架解析-二-—–Volley及RequestQueue解析"><a href="#Volley框架解析-二-—–Volley及RequestQueue解析" class="headerlink" title="Volley框架解析(二)—–Volley及RequestQueue解析"></a>Volley框架解析(二)—–Volley及RequestQueue解析</h2><h3 id="题外话-可直接无视跳过"><a href="#题外话-可直接无视跳过" class="headerlink" title="题外话(可直接无视跳过"></a><a href="#u9898_u5916_u8BDD_28_u53EF_u76F4_u63A5_u65E0_u89C6_u8DF3_u8FC7" title="题外话(可直接无视跳过"></a>题外话(可直接无视跳过</h3><p>是第一次比较完整的去阅读一个框架的源码，刚开始看的时候可以说是除了认识几个基本的<code>public, interface, final</code>等关键词之外，其他的一律不通orz，而且还不知道从哪里下手。后来磨蹭了好久还是慢慢的静下心来，对照着Java文档和Android文档查阅，刚开始都是陌生的，慢慢的在源码旁边打上注释，多看两遍就会get了。</p><p>有些地方在一个.java文件里面是无法理解用处的，这样的先直接跳过不要纠结，看到对应用的地方就会恍然大悟了。还总结出了一个小技巧就是从框架暴露给外面的接口开始阅读，因为框架里面是一层一层往上的，底层是为了上层服务的，所以从接口开始阅读能很好的向下展开。</p><p>前面一篇对Volley做了一个初步的介绍以及从整体上的一个解析，只是简单的描述了Request在Volley中是如何被处理的。从这篇博客开始将从最顶层一步一步的向下挖掘每一行代码，从最开始调用的地方<code>RequestQueue mQueue = Volley.newRequestQueue(mContext)</code>开始。</p><a id="more"></a><hr><h3 id="1-Volley-java"><a href="#1-Volley-java" class="headerlink" title="1. Volley.java"></a><a href="#1-_Volley-java" title="1\. Volley.java"></a>1. Volley.java</h3><p>Volley.java是Volley整个框架对外暴露的接口，里面有四个重载的同名静态函数，方便直接使用。下面结合源代码来分析，主要是代码里面的注释。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">   package com.android.volley.toolbox;</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.content.pm.PackageInfo;</div><div class="line">import android.content.pm.PackageManager.NameNotFoundException;</div><div class="line">import android.net.http.AndroidHttpClient;</div><div class="line">import android.os.Build;</div><div class="line"></div><div class="line">import com.android.volley.Network;</div><div class="line">import com.android.volley.RequestQueue;</div><div class="line"></div><div class="line">import java.io.File;</div><div class="line"></div><div class="line">public class Volley &#123;</div><div class="line"></div><div class="line">    /** Default on-disk cache directory. */</div><div class="line">    private static final String DEFAULT_CACHE_DIR = &quot;volley&quot;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Creates a default instance of the worker pool and calls &#123;@link RequestQueue#start()&#125; on it.</div><div class="line">     * You may set a maximum size of the disk cache in bytes.</div><div class="line">     * 创建一个默认的线程池，并将其启动</div><div class="line">     * 还能通过构造函数来设置缓存的最大容量，默认的是5*1024*1024个字节</div><div class="line">     *</div><div class="line">     * @param context A &#123;@link Context&#125; to use for creating the cache dir.</div><div class="line">     * 用于创建缓存目录的context</div><div class="line">     * @param stack An &#123;@link HttpStack&#125; to use for the network, or null for default.</div><div class="line">     * HttpStack可以通过外面自定义之后传入，也可以不管直接用默认的</div><div class="line">     * @param maxDiskCacheBytes the maximum size of the disk cache, in bytes. Use -1 for default size.</div><div class="line">     * 最大缓存的字节数</div><div class="line">     * @return A started &#123;@link RequestQueue&#125; instance.</div><div class="line">     */</div><div class="line">    public static RequestQueue newRequestQueue(Context context, HttpStack stack, int maxDiskCacheBytes) &#123;</div><div class="line"></div><div class="line">    //通过context，创建用于缓存文件的目录</div><div class="line">        File cacheDir = new File(context.getCacheDir(), DEFAULT_CACHE_DIR);</div><div class="line"></div><div class="line">        String userAgent = &quot;volley/0&quot;;</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            String packageName = context.getPackageName();</div><div class="line"></div><div class="line">            /**</div><div class="line">             * 关于PackageInfo，官方文档的解释如下：</div><div class="line">             * Overall information about the contents of a package.</div><div class="line">             * This corresponds to all of the information collected from AndroidManifest.xml.</div><div class="line">             * 该类作为Package信息的基类，还有很多子类例如：ApplicationInfo、 ComponentInfo等。</div><div class="line">             * 这些类包含了一些关于安装包的信息，icon,label等</div><div class="line">             */</div><div class="line">            PackageInfo info = context.getPackageManager().getPackageInfo(packageName, 0);</div><div class="line">            //获取到了Package的版本号</div><div class="line">            userAgent = packageName + &quot;/&quot; + info.versionCode;</div><div class="line"></div><div class="line">        &#125; catch (NameNotFoundException e) &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * HttpStack是一个用于网络请求的接口</div><div class="line">         * 如果传入的stack为空，则根据当前系统的版本号，来选择不同的实现了HttpStack(Volley自己的一个接口)的类对象</div><div class="line">         * 高于android2.3就用HurlStack(实现了HttpStack接口，基于HttpsURLConnection)</div><div class="line">         * 低于android2.3就用HttpClientStack(实现了HttpStack接口，基于HttpClient)</div><div class="line">         */</div><div class="line">        if (stack == null) &#123;</div><div class="line">            if (Build.VERSION.SDK_INT &gt;= 9) &#123;</div><div class="line">                stack = new HurlStack();</div><div class="line">            &#125; else &#123;</div><div class="line">                // Prior to Gingerbread, HttpUrlConnection was unreliable.</div><div class="line">                // See: http://android-developers.blogspot.com/2011/09/androids-http-clients.html</div><div class="line">                stack = new HttpClientStack(AndroidHttpClient.newInstance(userAgent));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 创建了一个用于发送特定请求的Network类对象</div><div class="line">         * 该接口中有一个与HttpStack接口中同名的方法(performRequest)</div><div class="line">         * 但是参数的内容不同， 返回的类型也有所区别</div><div class="line">         * Network的返回类型是自定义的一个NetworkResponse类</div><div class="line">         * 而HttpStack返回的是HttpResponse</div><div class="line">         * (HttpResponse是java.apache.http中的一个类，里面包含了服务器返回的一些数据)</div><div class="line">         * </div><div class="line">         * 将stack传入到了已经实现了Network接口的一个BasicNetwork类中</div><div class="line">         * 在后面发送Request请求的时候会调用Network.performRequest()</div><div class="line">         * 然后在Network.performRequest()函数中会继续调用HttpStack.performRequest()</div><div class="line">         * 真正的网络请求发出是在HttpStack.performRequest()中进行的</div><div class="line">         */</div><div class="line"></div><div class="line">        Network network = new BasicNetwork(stack);</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 创建一个RequestQueue引用</div><div class="line">         * RequestQueue是volley实现的一个请求调度队列</div><div class="line">         * 用来分发处理request</div><div class="line">         * 后面会分析RequestQueue.java</div><div class="line">         */</div><div class="line">        RequestQueue queue;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 根据是否设置了最大缓存字节数</div><div class="line">         * 来用不同的构造器生成RequestQueue对象</div><div class="line">         * 其中第一个构造参数为一个实现了Cache.java接口的默认缓存读写类DiskBasedCache.java</div><div class="line">         * 现在只需要知道它是用来专门处理缓存的就可以了，后面也会对源码做出分析</div><div class="line">         * 第二个参数是接口Network.java类的引用，在上面两排不远处可以看到BasicNetwork.java</div><div class="line">         * 它是用来实现网络请求的一个类。</div><div class="line">         */</div></pre></td></tr></table></figure><p>简单的说，Volley.java的用处就只有一个，创建并启动一个RequestQueue对象，可以有四个构造器供我们选择，可以通过继承其接口衍生出自己的一套网络请求部分的实现(继承HttpStack接口),还可以定义缓存大小的限制。对于框架的使用者来说自由度还是很大的，不是固定死只能通过默认实现来使用Volley,提供接口能使框架的灵活性大大提升，在自己写代码的过程中也要注意这个问题。</p><hr><p>###2. RequestQueue.java<br>RequestQueue可以说是Volley中最核心的部分了，所有的request都要从这边进来，等待工作线程的调度，调度完成之后从里面的ResponseDelivery返回给caller。下面是RequestQueue.java的所有代码以及每行代码的用途，读了几遍才弄清楚了这个东西的作用，之前都迷糊的不行orz。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">   package com.android.volley;</div><div class="line"></div><div class="line">import android.os.Handler;</div><div class="line">import android.os.Looper;</div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.HashMap;</div><div class="line">import java.util.HashSet;</div><div class="line">import java.util.LinkedList;</div><div class="line">import java.util.List;</div><div class="line">import java.util.Map;</div><div class="line">import java.util.Queue;</div><div class="line">import java.util.Set;</div><div class="line">import java.util.concurrent.PriorityBlockingQueue;</div><div class="line">import java.util.concurrent.atomic.AtomicInteger;</div><div class="line"></div><div class="line">/**</div><div class="line"> * A request dispatch queue with a thread pool of dispatchers.</div><div class="line"> * </div><div class="line"> *</div><div class="line"> * Calling &#123;@link #add(Request)&#125; will enqueue the given Request for dispatch,</div><div class="line"> * resolving from either cache or network on a worker thread, and then delivering</div><div class="line"> * a parsed response on the main thread.</div><div class="line"> * 调用mQueue.add(Request)函数将一个request放入请求调度队列中排队，将在工作线程中，</div><div class="line"> * 从网络或者缓存两个方面对request进行分类并处理，将response返回给主线程中。</div><div class="line"> */</div><div class="line">public class RequestQueue &#123;</div><div class="line"></div><div class="line">    /** </div><div class="line">     * Callback interface for completed requests. </div><div class="line">     * request完成之后的回掉接口</div><div class="line">     * 其中的T用到了java的泛型，是Request调用者所期待返回的数据类型</div><div class="line">     * 例如String或者是Integer</div><div class="line">     */</div><div class="line">    public static interface RequestFinishedListener &#123;</div><div class="line">        /**</div><div class="line">         * Called when a request has finished processing. </div><div class="line">         * 当一个Request被处理完成时来调用</div><div class="line">         * = =其实从方法的名字来看也能看出来</div><div class="line">         */</div><div class="line">        public void onRequestFinished(Request request);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Used for generating monotonically-increasing sequence numbers for requests. </div><div class="line">     * 用来为request生成单调递增的有序数字，刚才是不知道这里是干什么用的= =</div><div class="line">     * 在这里纠结了一小段时间就继续看了下去，直到在add()函数里面看到了这个的用处</div><div class="line">     * 在request被add()进来的时候会给每个request发一个类似于排队的序号一样的数字，就是用这个类来实现的</div><div class="line">     * </div><div class="line">     * 官方的解释是：An int value that may be updated atomically. </div><div class="line">     * An AtomicInteger is used in applications such as atomically incremented counters, and cannot be used as a replacement for an Integer.</div><div class="line">     * However, this class does extend Number to allow uniform access by tools and utilities that deal with numerically-based classes.</div><div class="line">     * 这个类是在需要自动递增计数器的应用中使用的，但是不能作为一个Integer的替代品。</div><div class="line">     * 但是这个类确实是继承自Number类的，其允许处理数字的一些工具来统一访问= =。。</div><div class="line">     */</div><div class="line">    private AtomicInteger mSequenceGenerator = new AtomicInteger();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Staging area for requests that already have a duplicate request in flight.</div><div class="line">     * 用HashMap来形成一个筹备区域，这个筹备区域是为重复的request准备的。</div><div class="line">     * 每个对应的cacheKey都有一个Queue来存储，因为相同的请求有时不止一个。</div><div class="line">     * 这些重复的request已经有一个在被处理了，其他的不用重复处理，在这个HashMap里面等着拿结果就可以了</div><div class="line">     * </div><div class="line">     *     containsKey(cacheKey) indicates that there is a request in flight for the given cache</div><div class="line">     *          key.</div><div class="line">     *         用containsKey(String cacheKey)可以判定一个已经发送出去的请求是否有重复的请求。</div><div class="line">     *     </div><div class="line">     *     get(cacheKey) returns waiting requests for the given cache key. The in flight request</div><div class="line">     *          is not contained in that list. Is null if no requests are staged.</div><div class="line">     *         get()方法会返回一个queue，这个queue有可能是空的，也有可能里面存放着具有相同cacheKey的一系列request</div><div class="line">     * </div><div class="line">     */</div><div class="line">    private final Map&gt;&gt; mWaitingRequests =</div><div class="line">            new HashMap&gt;&gt;();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * The set of all requests currently being processed by this RequestQueue. A Request</div><div class="line">     * will be in this set if it is waiting in any queue or currently being processed by</div><div class="line">     * any dispatcher.</div><div class="line">     *</div><div class="line">     * 一个容纳着所有request的HashSet。</div><div class="line">     * 如果一个request正在被调度或者正处于等待状态，该request就在这个集合之中。</div><div class="line">     * 这么说的话，RequestQueue里面主要存储request的集合就是这个了。</div><div class="line">     * 在外面调用add(Request request)的时候，也就是加入到了这个HashSet之中。</div><div class="line">     */</div><div class="line">    private final Set&gt; mCurrentRequests = new HashSet&gt;();</div><div class="line"></div><div class="line">    /** </div><div class="line">     * The cache triage queue. </div><div class="line">     * 运用到了优先队列</div><div class="line">     * 也就是里面的每个元素都会有一个优先级，优先级高的比优先级低的要先调度。</div><div class="line">     * 这个队列里面存放着需要访问缓存的一些Request，等待着调度器(dispatcher)的处理</div><div class="line">     * 后面慢慢的会介绍到dispatcher</div><div class="line">     */</div><div class="line">    private final PriorityBlockingQueue&gt; mCacheQueue =</div><div class="line">        new PriorityBlockingQueue&gt;();</div><div class="line"></div><div class="line">    /** </div><div class="line">     * The queue of requests that are actually going out to the network.</div><div class="line">     * 网络请求队列</div><div class="line">     * 要通过网络在服务器上请求数据的request</div><div class="line">     * 还包括一些缓存出了点小问题的request也会被加入到这里</div><div class="line">     * 在后面的代码中能够看到</div><div class="line">     */</div><div class="line">    private final PriorityBlockingQueue&gt; mNetworkQueue =</div><div class="line">        new PriorityBlockingQueue&gt;();</div><div class="line"></div><div class="line">    /** </div><div class="line">     * Number of network request dispatcher threads to start. </div><div class="line">     * 网络请求调度线程池中线程的默认数量。</div><div class="line">     */</div><div class="line">    private static final int DEFAULT_NETWORK_THREAD_POOL_SIZE = 4;</div><div class="line"></div><div class="line">    /** </div><div class="line">     * Cache interface for retrieving and storing responses. </div><div class="line">     * 缓存的接口，用来从缓存中取出response或者存储response到缓存中。</div><div class="line">     */</div><div class="line">    private final Cache mCache;</div><div class="line"></div><div class="line">    /** </div><div class="line">     * Network interface for performing requests. </div><div class="line">     * 网络接口，用来进行网络请求。</div><div class="line">     */</div><div class="line">    private final Network mNetwork;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Response delivery mechanism. </div><div class="line">     * 响应交付机制</div><div class="line">     * 请求最后的结果(Response.java实例)通过mDelivery中的方法传回</div><div class="line">     * 这个过程需要在工作线程中才能看到，也就是在介绍dispatcher里面能看到</div><div class="line">     */</div><div class="line">    private final ResponseDelivery mDelivery;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * The network dispatchers. </div><div class="line">     * 网络调度线程池</div><div class="line">     * 因为是涉及到网络的一个框架，工作的效率不能低</div><div class="line">     * 多开几个网络调度器线程来一起工作</div><div class="line">     */</div><div class="line">    private NetworkDispatcher[] mDispatchers;</div><div class="line"></div><div class="line">    /** </div><div class="line">     * The cache dispatcher. </div><div class="line">     * 缓存调度线程(和上面的差不多吧= =，但是不是线程池了)</div><div class="line">     * 处理了涉及到缓存的request</div><div class="line">     */</div><div class="line">    private CacheDispatcher mCacheDispatcher;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 这个貌似是和listener差不多的用处</div><div class="line">     * 每个request结束之后，就会通知所有已经注册过的listener(所谓注册无非就是实现了RequestFinishedListener.java这个接口</div><div class="line">     * 然后再将自己传入，加入到这个ArrayList里面来)</div><div class="line">     * 在&#123;@link #finish()&#125;里面会用到这个ArrayList</div><div class="line">     */</div><div class="line">    private List mFinishedListeners =</div><div class="line">            new ArrayList();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Creates the worker pool. Processing will not begin until &#123;@link #start()&#125; is called.</div><div class="line">     * 创建工作线程，在start()调用之后开始不停的工作</div><div class="line">     *</div><div class="line">     * @param cache A Cache to use for persisting responses to disk</div><div class="line">     * 涉及到内存访问的接口</div><div class="line">     * @param network A Network interface for performing HTTP requests</div><div class="line">     * 用来进行HTTP请求的网络接口</div><div class="line">     * @param threadPoolSize Number of network dispatcher threads to create</div><div class="line">     * 网络请求线程池，里面放着很多个线程，可以同时处理多个需要网络访问的request</div><div class="line">     * @param delivery A ResponseDelivery interface for posting responses and errors</div><div class="line">     * 一个用来传递resposne和error的接口</div><div class="line">     */</div><div class="line">    public RequestQueue(Cache cache, Network network, int threadPoolSize,</div><div class="line">            ResponseDelivery delivery) &#123;</div><div class="line">        mCache = cache;</div><div class="line">        mNetwork = network;</div><div class="line">        mDispatchers = new NetworkDispatcher[threadPoolSize];</div><div class="line">        mDelivery = delivery;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Creates the worker pool. Processing will not begin until &#123;@link #start()&#125; is called.</div><div class="line">     *</div><div class="line">     * @param cache A Cache to use for persisting responses to disk</div><div class="line">     * @param network A Network interface for performing HTTP requests</div><div class="line">     * @param threadPoolSize Number of network dispatcher threads to create</div><div class="line">     */</div><div class="line">    public RequestQueue(Cache cache, Network network, int threadPoolSize) &#123;</div><div class="line">        this(cache, network, threadPoolSize,</div><div class="line">                new ExecutorDelivery(new Handler(Looper.getMainLooper())));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Creates the worker pool. Processing will not begin until &#123;@link #start()&#125; is called.</div><div class="line">     *</div><div class="line">     * @param cache A Cache to use for persisting responses to disk</div><div class="line">     * @param network A Network interface for performing HTTP requests</div><div class="line">     */</div><div class="line">    public RequestQueue(Cache cache, Network network) &#123;</div><div class="line">        this(cache, network, DEFAULT_NETWORK_THREAD_POOL_SIZE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Starts the dispatchers in this queue.</div><div class="line">     * 先将所有的调度线程都停止</div><div class="line">     * 再重新创建并启动</div><div class="line">     * 将mNetworkQueue和mCacheQueue传入到dispatcher中</div><div class="line">     * 方便从queue中取出request来进行处理</div><div class="line">     * 将mDelivery接口传入，方便将请求结果返回</div><div class="line">     * </div><div class="line">     * cacheDispatcher创建一个就够了，networkDispatcher创建了多个</div><div class="line">     * network花费时间比较长，需要开多个线程来工作</div><div class="line">     */</div><div class="line">    public void start() &#123;</div><div class="line">        stop();  // Make sure any currently running dispatchers are stopped.</div><div class="line">        // Create the cache dispatcher and start it.</div><div class="line">        mCacheDispatcher = new CacheDispatcher(mCacheQueue, mNetworkQueue, mCache, mDelivery);</div><div class="line">        mCacheDispatcher.start();</div><div class="line"></div><div class="line">        // Create network dispatchers (and corresponding threads) up to the pool size.</div><div class="line">        for (int i = 0; i &lt; mDispatchers.length; i++) &#123;</div><div class="line">            NetworkDispatcher networkDispatcher = new NetworkDispatcher(mNetworkQueue, mNetwork,</div><div class="line">                    mCache, mDelivery);</div><div class="line">            mDispatchers[i] = networkDispatcher;</div><div class="line">            networkDispatcher.start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Stops the cache and network dispatchers.</div><div class="line">     * 将所有正在工作状态的dispatcher挨个退出</div><div class="line">     */</div><div class="line">    public void stop() &#123;</div><div class="line">        if (mCacheDispatcher != null) &#123;</div><div class="line">            mCacheDispatcher.quit();</div><div class="line">        &#125;</div><div class="line">        for (int i = 0; i &lt; mDispatchers.length; i++) &#123;</div><div class="line">            if (mDispatchers[i] != null) &#123;</div><div class="line">                mDispatchers[i].quit();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Gets a sequence number.</div><div class="line">     *</div><div class="line">     * incrementAndGet() : Atomically increments by one the current value.</div><div class="line">     * 自动向上涨一个单位然后返回当前值</div><div class="line">     * 在后面的&#123;@link RequestQueue#add(Request)&#125;函数中能看到这个的作用</div><div class="line">     * 用到了在前面提到过的AtomicInteger类</div><div class="line">     */</div><div class="line">    public int getSequenceNumber() &#123;</div><div class="line">        return mSequenceGenerator.incrementAndGet();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Gets the &#123;@link Cache&#125; instance being used.</div><div class="line">     * 返回当前正在使用的cache引用</div><div class="line">     */</div><div class="line">    public Cache getCache() &#123;</div><div class="line">        return mCache;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * A simple predicate or filter interface for Requests, for use by</div><div class="line">     * &#123;@link RequestQueue#cancelAll(RequestFilter)&#125;.</div><div class="line">     * 一个request的过滤器</div><div class="line">     * 上面说是给cancelAll用的，应该是设置一个RequestFilter之后</div><div class="line">     * 将一类的request全都取消掉，至于具体的规则就需要重写里面的函数</div><div class="line">     * 定义规则了</div><div class="line">     */</div><div class="line">    public interface RequestFilter &#123;</div><div class="line">        public boolean apply(Request request);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Cancels all requests in this queue for which the given filter applies.</div><div class="line">     * 从外面传入一个RequestFilter</div><div class="line">     * 按照传入的规则取消所有符合规则的request</div><div class="line">     * @param filter The filtering function to use</div><div class="line">     */</div><div class="line">    public void cancelAll(RequestFilter filter) &#123;</div><div class="line">        synchronized (mCurrentRequests) &#123;</div><div class="line">            for (Request request : mCurrentRequests) &#123;</div><div class="line">                if (filter.apply(request)) &#123;</div><div class="line">                    request.cancel();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Cancels all requests in this queue with the given tag. Tag must be non-null</div><div class="line">     * 依据request上面的tag来取消</div><div class="line">     * and equality is by identity.</div><div class="line">     */</div><div class="line">    public void cancelAll(final Object tag) &#123;</div><div class="line">        if (tag == null) &#123;</div><div class="line">            throw new IllegalArgumentException(&quot;Cannot cancelAll with a null tag&quot;);</div><div class="line">        &#125;</div><div class="line">        cancelAll(new RequestFilter() &#123;</div><div class="line">            @Override</div><div class="line">            public boolean apply(Request request) &#123;</div><div class="line">                return request.getTag() == tag;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Adds a Request to the dispatch queue.</div><div class="line">     * 将新的request加入到总的等待队列中去</div><div class="line">     * 一个request被处理之前都要待的地方</div><div class="line">     * mCurrentRequests里面存放着所有的request </div><div class="line">     *</div><div class="line">     * @param request The request to service</div><div class="line">     * 被传入的request，等待被处理</div><div class="line">     * @return The passed-in request</div><div class="line">     * 将加入的request返回回去</div><div class="line">     */</div><div class="line">    public  Request add(Request request) &#123;</div><div class="line">        // Tag the request as belonging to this queue and add it to the set of current requests.</div><div class="line">        request.setRequestQueue(this);</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 在向mCurrentRequest中添加request的时候</div><div class="line">         * 锁住不允许其他的线程进行访问操作</div><div class="line">         * 对于synchronized:可用来给对象和方法或者代码块加锁，</div><div class="line">         * 当它锁定一个方法或者一个代码块的时候，同一时刻最多只有一个线程执行这段代码。</div><div class="line">         * 当两个并发线程访问同一个对象object中的这个加锁同步代码块时，一个时间内只能有一个线程得到执行。</div><div class="line">         * 另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。</div><div class="line">         * </div><div class="line">         */</div><div class="line">        synchronized (mCurrentRequests) &#123;</div><div class="line">            mCurrentRequests.add(request);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * Process requests in the order they are added.</div><div class="line">         * 在加入到mCurrentQueue中排队的时候</div><div class="line">         * 就像我们排队一样会给我们一个对应的号码牌</div><div class="line">         * 只是这里用了getSequenceNumber()函数来自动的发放号码牌</div><div class="line">         */</div><div class="line">        request.setSequence(getSequenceNumber());</div><div class="line">        request.addMarker(&quot;add-to-queue&quot;);</div><div class="line"></div><div class="line">        /** </div><div class="line">         * If the request is uncacheable, skip the cache queue and go straight to the network.</div><div class="line">         * 检查这个request是否是不可缓存的</div><div class="line">         * 也就是这个request所返回的response是否需要缓存下来</div><div class="line">         */</div><div class="line">        if (!request.shouldCache()) &#123;</div><div class="line"></div><div class="line">            /**</div><div class="line">             * 如果不需要缓存的话</div><div class="line">             * 直接将这个request加入到网络队列中去</div><div class="line">             * 并且返回该request</div><div class="line">             */</div><div class="line">            mNetworkQueue.add(request);</div><div class="line">            return request;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * Insert request into stage if there&apos;s already a request with the same cache key in flight.</div><div class="line">         * = =尼玛我这是什么记性，看见这个mWaittingRequests居然不认识了</div><div class="line">         * 向前翻到变量声明的地方，清清楚楚的写着专门存放重复请求的地方</div><div class="line">         * 根据需要缓存的request生成的特殊标记cacheKey</div><div class="line">         * 当然不涉及到缓存的request在上面几行代码被过滤处理了</div><div class="line">         */</div><div class="line">        synchronized (mWaitingRequests) &#123;</div><div class="line"></div><div class="line">            /**</div><div class="line">             * 先获取到这个request的cacheKey</div><div class="line">             * 看看有没有和它相同的request已经处于天上飞的状态了</div><div class="line">             * (我觉得这里的in flight应该说的是已经发送过了的)</div><div class="line">             * 在后面会说明</div><div class="line">             */</div><div class="line">            String cacheKey = request.getCacheKey();</div><div class="line"></div><div class="line">            if (mWaitingRequests.containsKey(cacheKey)) &#123;</div><div class="line"></div><div class="line">                /**</div><div class="line">                 * There is already a request in flight. Queue up.</div><div class="line">                 * 如果在等待的队列里面存在着cacheKey对应的一个Queue</div><div class="line">                 * 则说明在这个request之前，已经有相同的request发送出去过了</div><div class="line">                 * 那么现在需要做的就是将这个request加入到cacheKey对应的Queue存起来</div><div class="line">                 * 如果对应的Queue是null,就自己创建一个新的，再把request放入</div><div class="line">                 * </div><div class="line">                 * 这个request就不再会被放入到mCacheQueue中去了</div><div class="line">                 * 就是坐等数据的意思= =</div><div class="line">                 */</div><div class="line">                Queue&gt; stagedRequests = mWaitingRequests.get(cacheKey);</div><div class="line">                if (stagedRequests == null) &#123;</div><div class="line">                    stagedRequests = new LinkedList&gt;();</div><div class="line">                &#125;</div><div class="line">                stagedRequests.add(request);</div><div class="line">                mWaitingRequests.put(cacheKey, stagedRequests);</div><div class="line">                if (VolleyLog.DEBUG) &#123;</div><div class="line">                    VolleyLog.v(&quot;Request for cacheKey=%s is in flight, putting on hold.&quot;, cacheKey);</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                /**</div><div class="line">                 * Insert &apos;null&apos; queue for this cacheKey, indicating there is now a request in flight.</div><div class="line">                 * 如果这个涉及到cache的request在它之前根本就没有和他相同的request</div><div class="line">                 * 直接以这个cacheKey为key，放一个null进去</div><div class="line">                 * 表示这是第一个么= =</div><div class="line">                 * 搞不懂为什么要这个样子设计，为什么不直接新建一个Queue进去呢</div><div class="line">                 */</div><div class="line">                mWaitingRequests.put(cacheKey, null);</div><div class="line">                mCacheQueue.add(request);</div><div class="line">            &#125;</div><div class="line">            return request;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Called from &#123;@link Request#finish(String)&#125;, indicating that processing of the given request</div><div class="line">     * has finished.</div><div class="line">     * 从Request中的finish()方法调用开始，预示着给出的request已经结束</div><div class="line">     * Releases waiting requests for request.getCacheKey() if</div><div class="line">     *      request.shouldCache().</div><div class="line">     * 将处于mWaittingQueue中具有相同cacheKey的一组request全部释放</div><div class="line">     * 也就是把上面那些坐等数据的request全部取出来，response发送回去</div><div class="line">     */</div><div class="line">     void finish(Request request) &#123;</div><div class="line">        // Remove from the set of requests currently being processed.</div><div class="line">        /**</div><div class="line">         * 将mCurrentRequests锁住</div><div class="line">         * 一个时间段内只有一个线程可以访问该对象</div><div class="line">         * 将已经结束的request从队列中移除</div><div class="line">         */</div><div class="line">        synchronized (mCurrentRequests) &#123;</div><div class="line">            mCurrentRequests.remove(request);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 通知所有注册过的监听器</div><div class="line">         * 告诉它们，request已经finish了</div><div class="line">         */</div><div class="line">        synchronized (mFinishedListeners) &#123;</div><div class="line">          for (RequestFinishedListener listener : mFinishedListeners) &#123;</div><div class="line">            listener.onRequestFinished(request);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 如果该request涉及到需要缓存</div><div class="line">         * 则将mWaitingRequests中具有相同cacheKey的request</div><div class="line">         * 全部取出放入到缓存队列中等待CacheDispatcher的调度</div><div class="line">         */</div><div class="line">        if (request.shouldCache()) &#123;</div><div class="line">            synchronized (mWaitingRequests) &#123;</div><div class="line">                String cacheKey = request.getCacheKey();</div><div class="line">                Queue&gt; waitingRequests = mWaitingRequests.remove(cacheKey);</div><div class="line">                if (waitingRequests != null) &#123;</div><div class="line">                    if (VolleyLog.DEBUG) &#123;</div><div class="line">                        VolleyLog.v(&quot;Releasing %d waiting requests for cacheKey=%s.&quot;,</div><div class="line">                                waitingRequests.size(), cacheKey);</div><div class="line">                    &#125;</div><div class="line">                    // Process all queued up requests. They won&apos;t be considered as in flight, but</div><div class="line">                    // that&apos;s not a problem as the cache has been primed by &apos;request&apos;.</div><div class="line">                    mCacheQueue.addAll(waitingRequests);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 下面两个方法就是所谓注册监听器和取消注册的函数</div><div class="line">     */</div><div class="line">    public   void addRequestFinishedListener(RequestFinishedListener listener) &#123;</div><div class="line">      synchronized (mFinishedListeners) &#123;</div><div class="line">        mFinishedListeners.add(listener);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Remove a RequestFinishedListener. Has no effect if listener was not previously added.</div><div class="line">     */</div><div class="line">    public   void removeRequestFinishedListener(RequestFinishedListener listener) &#123;</div><div class="line">      synchronized (mFinishedListeners) &#123;</div><div class="line">        mFinishedListeners.remove(listener);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面介绍了Volley.java和RequestQueue.java两大类，Volley是对外的入口，而RequestQueue是Volley框架中最核心的部分了。如果注释上面有写错了或者有疑问的地方，还请各位直接指出在下一篇博客中将继续向下深入，结合源代码分析什么是Dispatcher。</p>]]></content>
      
      
      
        <tags>
            
            <tag> volley </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Volley框架解析(一)整体介绍</title>
      <link href="/2017/02/26/Volley%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90-%E4%B8%80-%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D/"/>
      <url>/2017/02/26/Volley%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90-%E4%B8%80-%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="Volley框架解析-一-整体介绍"><a href="#Volley框架解析-一-整体介绍" class="headerlink" title="Volley框架解析(一)整体介绍"></a>Volley框架解析(一)整体介绍</h2><p>感谢各位菊苣，<a href="https://github.com/grumoon" title="grumoon" target="_blank" rel="noopener">grumoon</a>,<a href="https://github.com/huxian99" title="huxian99" target="_blank" rel="noopener">huxian99</a>,<a href="https://github.com/trinea" title="trinea" target="_blank" rel="noopener">trinea</a>,<a href="http://blog.csdn.net/guolin_blog" title="郭霖juju" target="_blank" rel="noopener">郭霖juju</a>的图片素材，以及详细的分析。</p><p>其他菊苣关于Volley解析的链接如下：</p><p><a href="http://www.codekk.com/open-source-project-analysis/detail/Android/grumoon/Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="noopener">codeKK—Volley源码解析</a></p><p><a href="http://blog.csdn.net/guolin_blog/article/details/17482095/" title="郭霖juju" target="_blank" rel="noopener">郭霖juju—Android Volley完全解析(一)，初识Volley的基本用法</a></p><a id="more"></a><hr><h3 id="题外话-可直接跳过orz"><a href="#题外话-可直接跳过orz" class="headerlink" title="题外话(可直接跳过orz"></a><a href="#u9898_u5916_u8BDD_28_u53EF_u76F4_u63A5_u8DF3_u8FC7orz" title="题外话(可直接跳过orz"></a>题外话(可直接跳过orz</h3><p>在Android路上的第一个涉及到网络的项目中，就用到了Volley，当时也就照着网上的方法用了用，用到后面发现满足不了需求之后，尝试着去自定义了一些request，自己去结合Volley来处理服务器返回的cookie。第一个项目已经过去时间比较长了，突然想到想深入的了解下Volley,于是就开始了Volley源码之旅…..本人比较笨，需要比其他人花更多的时间来消化，没办法orz。看了比较长的一段时间后，把自己边看边写的笔记拿出来和大家分享。</p><h3 id="1-Volley简介"><a href="#1-Volley简介" class="headerlink" title="1. Volley简介"></a><a href="#1-_Volley_u7B80_u4ECB" title="1\. Volley简介"></a>1. Volley简介</h3><h4 id="1-1-Volley是什么"><a href="#1-1-Volley是什么" class="headerlink" title="1.1 Volley是什么"></a><a href="#1-1_Volley_u662F_u4EC0_u4E48" title="1.1 Volley是什么"></a>1.1 Volley是什么</h4><p>Volley是Google推出的Android异步网络请求框架和图片加载的框架。适合数据量小的,通信频繁的各种请求,官方已经封装好了各种API,而且还提供了很灵活的自定义请求接口,不仅使用起来方便,可扩展性也很强.<br><img src="https://raw.githubusercontent.com/android-cn/android-open-project-analysis/master/tool-lib/network/volley/image/volley.png" alt="volley"></p><p>可以通过下面的几种途径获取到volley的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git clone https://android.googlesource.com/platform/frameworks/volley  </div><div class="line"></div><div class="line">jar包下载地址： http://www.kwstu.com/ResourcesView/kwstu_201441183330928</div></pre></td></tr></table></figure><h4 id="1-2-整体框架"><a href="#1-2-整体框架" class="headerlink" title="1.2 整体框架"></a><a href="#1-2__u6574_u4F53_u6846_u67B6" title="1.2 整体框架"></a>1.2 整体框架</h4><p>这是从上面提到的菊苣那里拿来的一张图，十分感谢Orz,这张图大致的分析出了Volley中Request从开始到结束需要经历的一个流程，在后面会详细的分析request每一步的动向，这里先简单的做个介绍。<br><img src="https://raw.githubusercontent.com/android-cn/android-open-project-analysis/master/tool-lib/network/volley/image/design.png" alt="design"></p><p><strong>最开始用到Volley发送请求的时候需要通过如下的几行代码(注意给应用添加网络访问的权限)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//先新建一个请求队列(RequestQueue)</div><div class="line">RequestQueue mQueue = Volley.newRequestQueue(context); </div><div class="line"></div><div class="line">//新建一个request</div><div class="line">StringRequest stringRequest = new StringRequest(&quot;http://www.xxxxxxx.com&quot;,</div><div class="line">                    new Response.Listener&lt;String&gt;() &#123;</div><div class="line">                        @Override</div><div class="line">                        public void onResponse(String response) &#123;</div><div class="line">                            Log.d(&quot;TAG&quot;, response);</div><div class="line">                        &#125;</div><div class="line">                    &#125;, new Response.ErrorListener() &#123;</div><div class="line">                        @Override</div><div class="line">                        public void onErrorResponse(VolleyError error) &#123;</div><div class="line">                            Log.e(&quot;TAG&quot;, error.getMessage(), error);</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line"></div><div class="line">//将request加入到队列(RequestQueue)当中</div><div class="line">mQueue.add(stringRequest);</div></pre></td></tr></table></figure><p>做完上面的这些工作,如果不出问题，等着request返回结果就可以了。结合上面的图片，mQueue(<strong>RequestQueue</strong>)被创建之后，会启动新的工作线程(<strong>dispatcher</strong>)开始工作，mQueue里面有专门用来存放request的容器，只要没被stop,这些工作线程会不停的从容器中取出request进行处理,工作线程大致分为两类：</p><ol><li>处理有缓存存在的request的dispatcher。该工作线程会涉及到从之前存储的有效缓存(<strong>cache</strong>)中读取数据并返回给调用者。</li><li><p>处理网络请求的request的dispatcher。该工作线程会涉及到从网络(<strong>network</strong>)获取有效的数据，并返回合适数据给调用者，并会根据request的设置来决定是否将请求结果缓存到本地。</p><p>在工作线程得到了请求响应结果response之后，会将response交给<strong>ResponseDelivery</strong>来处理并通过回调传递给调用者。</p><p>通过上面的介绍，应该能大致的了解volley中，一个request创建并加入到RequestQueue之后大致的一个走向。</p></li></ol><h4 id="1-3-基础类的简介"><a href="#1-3-基础类的简介" class="headerlink" title="1.3 基础类的简介"></a><a href="#1-3__u57FA_u7840_u7C7B_u7684_u7B80_u4ECB" title="1.3 基础类的简介"></a>1.3 基础类的简介</h4><p>在Volley中一共有43个类(不知道当前阅读的是否为最新版本的，不过核心类差不了很远）,主要介绍一下核心类以及其在Volley中起的作用，后面会对核心类的每行代码进行展开分析。</p><p><strong>Volley.java:</strong> 从上面的用法<code>Volley.newRequestQueue</code>就能看出，Volley类是对外的接口，里面仅有4个重载了的<code>newRequestQueue()</code>函数，用来以各种不同的方式创建并启动一个RequestQueue。</p><p><strong>RequestQueue.java:</strong> 外界通过Volley中的接口来创建其实例，RequestQueue的作用就是存放所有add进来的Request(所有的Request不仅会存放在<code>mCurrentRequests</code>里面，其原型是一个HashSet。而且Request还会被分类存放在<code>mCacheQueue</code>和<code>mNetworkQueue</code>中，分类的标准是是否涉及到网络数据的获取),并且里面会有两类调度器<code>mDispatchers</code>和<code>mCacheDispatcher</code>来负责处理Request。前者用来处理涉及到网络的Request，后者用来处理直接从缓存中获取数据的Request。它俩获得了数据之后都会交给<code>mDelivery</code>(ResponseDelivery.java的实例)来传递回caller。</p><p><strong>Request.java:</strong> 请求类的基类，所有请求类都从该类继承。里面包含了请求方法(POST,GET等)，用户可自定义符合需求的Request，自由度很大。</p><p><strong>NetworkDispatcher.java:</strong> 处理网络请求的调度器，继承自<code>Thread</code>类，其中包含了用于存储涉及网络请求的<code>mQueue</code>，以及用于网络请求的接口类<code>mNetwork</code>(Network.java实例)。在被停止之前进行死循环，调度器会不停的从<code>mQueue</code>中取出request来处理，将结果通过<code>mCache</code>(Cache.java实例)写入本地缓存中，通过<code>mDelivery</code>(ResponseDelivery.java实例)将结果回传给caller。</p><p><strong>CacheDispatcher.java:</strong> 处理缓存请求的调度器，继承自<code>Thread</code>类，包含了用于存储涉及缓存请求的队列<code>mCacheQueue</code>，和上面的网络调度器工作原理类似。只是从缓存中取出数据再通过<code>mDelivery</code>返回给caller。</p><p><strong>ResponseDelivery.java:</strong> 一个用于将Response传递给调用者的回调接口，包含了两类回调方法，<code>postResponse(Request&lt;?&gt; request, Response&lt;?&gt; response, Runnable runnable)</code>和<code>postError(Request&lt;?&gt; request, VolleyError error)</code>。</p><p><strong>Network.java:</strong> 用于网络请求调用的接口，包含一个方法<code>performRequest()</code>。</p><p><strong>BasicNetwork.java:</strong> 继承了Network类，是Volley中默认使用的网络请求处理工具类。在该类里面会处理Request发送前的一系列工作，以及发送工作和发送后返回NetworkResponse的解析工作。里面真正实现网络请求的发送工作是利用了其中的<code>mHttpStack</code>(HttpStack.java实例)。</p><p><strong>HttpStack.java:</strong> 网络请求接口类，包含一个方法<code>performRequest(Request&lt;?&gt; request, Map&lt;String, String&gt; additionalHeaders)</code>。该方法和BasicNetwork类中实现的方法<code>performRequest(Request&lt;?&gt; request)</code>不同。前者在后者的方法中被调用，来实现真正的网络请求。</p><p><strong>HurlStack.java:</strong> 实现了HttpStack接口，在android版本在2.3之上的系统中，通过HttpURLConnection类实现网络请求。</p><p><strong>HttpClientStack.java:</strong> 实现了HttpStack接口，在android版本在2.3之下的系统中，通过HttpClient类实现网络请求。</p><p><strong>Cache.java:</strong> 读写缓存类的接口类，抽象出了一系列有关缓存读写的方法。</p><p><strong>DiskBasedCache.java:</strong> 继承并实现了Cache中的一系列方法，是Volley中默认使用的缓存读写工具类。</p><p><strong>Response.java:</strong> Volley自定义的bean类，Request通过上面实现了HttpStack接口的两种实现方法发出之后，会返回相应的<code>NetworkResponse</code>类实例，这个类是<code>org.apache.http</code>包里面的类，<code>NetworkResponse</code>实例返回后，解析出有用的信息，并组成Response实例。</p><p>上面简单的介绍了Volley中的核心类，再盗用一张图orz，再次感谢上面的菊苣们。<img src="https://raw.githubusercontent.com/android-cn/android-open-project-analysis/master/tool-lib/network/volley/image/Volley-run-flow-chart.png" alt="design"></p><p>上图清晰的画出了，请求从加入到队列，怎么被分步骤处理，分缓存和网络两条路径，先查询是否存在请求对应的缓存，如存在有效缓存则直接取出缓存数据返回给调用者，如不存在有效缓存则从网络获取数据，写入缓存并返回将结果返回给调用者。</p><p>对Volley整体上的简单介绍就先到这里了，后面会将阅读源码时候的笔记整理之后再和大家分享。</p>]]></content>
      
      
      
        <tags>
            
            <tag> volley </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github+Hexo搭建个人博客</title>
      <link href="/2017/02/23/Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2017/02/23/Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu上结合Github用Hexo搭建博客"><a href="#Ubuntu上结合Github用Hexo搭建博客" class="headerlink" title="Ubuntu上结合Github用Hexo搭建博客"></a>Ubuntu上结合Github用Hexo搭建博客</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a><a href="#u7B80_u4ECB" title="简介"></a>简介</h3><p>在搭建博客的过程中会涉及到下面这些东西：</p><ol><li>Hexo</li><li>Git</li><li>Github Pages</li><li>Npm</li><li>Nodejs</li></ol><p><strong><a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">Hexo</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">一款基于Node.js的简单、快速、强大的静态博客框架</div></pre></td></tr></table></figure><a id="more"></a><p><strong>Hexo搭建博客和github有什么关系</strong></p><p>那Hexo就是一个博客框架，关Github什么事情呢，这还被你说对了，还真不怎么和github相关，用hexo弄一个博客出来很简单。当然你也可以选择用wordpress来结合hexo，只是这里选择用github pages服务，那又说到了一个东西:<strong>github pages</strong>。</p><p><strong><a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages</a></strong></p><p>上面是网址，可以自己进去看看，简单的说就是github提供的一种用来展示托管在自己github仓库上的静态网页。github pages也有自己的一套框架，只用github pages也可以搭建自己的博客。</p><p><strong><a href="https://www.npmjs.com/" target="_blank" rel="noopener">Npm</a></strong></p><p>一个NodeJs包管理和分发工具，全称为Node Package Manager。和Ruby的gem，Python的pypi类似。通过npm能快速的部署hexo框架，毕竟hexo基于nodejs。</p><p><strong><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></strong></p><p>Node是一个Javascript运行环境(runtime)。实际上它是对Google V8引擎进行了封装。V8引 擎执行Javascript的速度非常快，性能非常好。Node对一些特殊用例进行了优化，提供了替代的API，使得V8在非浏览器环境下运行得更好。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a><a href="#u5B89_u88C5" title="安装"></a>安装</h3><h4 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1. 安装Node.js"></a><a href="#1-__u5B89_u88C5Node-js" title="1\. 安装Node.js"></a>1. 安装Node.js</h4><p>在Ubuntu下面部署很容易的= =,在终端输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install --yes nodejs</div></pre></td></tr></table></figure><p>Nodejs的部署工作就完成了。其他的Linux发行版可以参照下面的教程<a href="https://github.com/nodejs/node-v0.x-archive/wiki/Installing-Node.js-via-package-manager" target="_blank" rel="noopener">Installing Node.js via package manager</a></p><p>也可以在Node的官网上直接<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">下载</a>安装。</p><p>安装好之后，在终端输入nodejs即可进入到nodejs的交互模式中。</p><p><strong>Note</strong><br>需要注意一个问题就是，在hexo中的nodejs文件在运行时使用的是<code>node xxx/js</code>这样的形式，而在Ubuntu下面直接运行<code>node xxx.js</code>会失败，报错为<code>/usr/bin/env: node: No such file or directory</code>，网上有些说是和node的版本有关，实际上是因为NodeJs在Ubuntu上默认安装之后，需要<code>nodejs xxx.js</code>这样用，解决方法为创建如下软链接，保证可以运行<code>node xxx.js</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -s /usr/bin/nodejs /usr/bin/node</div></pre></td></tr></table></figure><h4 id="2-安装npm"><a href="#2-安装npm" class="headerlink" title="2. 安装npm"></a><a href="#2-__u5B89_u88C5npm" title="2\. 安装npm"></a>2. 安装npm</h4><p>在终端输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install npm</div></pre></td></tr></table></figure><h4 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a><a href="#3-__u5B89_u88C5hexo" title="3\. 安装hexo"></a>3. 安装hexo</h4><p>终端输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div></pre></td></tr></table></figure><p>在这里可能会报错，由于没有root权限导致无法安装hexo，<code>sudo su</code>root一下再安装一次就好了。</p><p>到这里就完成了对Hexo的初步安装了，直接在终端输入<code>hexo</code>会出现相关的信息。</p><h4 id="4-安装git"><a href="#4-安装git" class="headerlink" title="4. 安装git"></a><a href="#4-__u5B89_u88C5git" title="4\. 安装git"></a>4. 安装git</h4><p>首先安装git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install git</div></pre></td></tr></table></figure><p>设置用户信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;Xiaojuanmao&quot;//用户名</div><div class="line">$ git config --global user.email  &quot;daque@hustunique.com&quot;//填写自己的邮箱</div></pre></td></tr></table></figure><p>检查SSH keys</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cd ~/. ssh</div></pre></td></tr></table></figure><p>如果提示No such file or directory 说明你是第一次使用git。按照如下步骤处理SSH Keys，如果存在SSH Keys，则直接跳过下面分割线内的部分。</p><hr><p><strong>配置SSH Keys</strong></p><ul><li><p>生成新的SSH Keys</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;</div></pre></td></tr></table></figure><p>会出现下面的提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file in which to save the key</div><div class="line">(/Users/your_user_directory/.ssh/id_rsa):</div></pre></td></tr></table></figure><p>直接回车，存储在默认的目录下面。系统会提示输入密码，密码的作用是在向仓库提交代码的时候用到，可以防止其他人向自己的仓库提交代码。输入密码后，相关的会生成.ssh文件。</p></li><li><p>添加新的SSH Keys到GitHub</p><p>通过下面的命令进入目录，该目录下存放着刚才生成的密钥文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cd ~/. ssh</div></pre></td></tr></table></figure><p>登陆github系统。点击右上角的 Account Settings—-&gt;SSH Public keys —-&gt; add another public keys。打开刚才目录下面的<code>id_rsa.pub</code>文件，将文件内容复制到key文本框中就可以了。</p></li><li><p>测试SSH<br>可以输入下面的命令，测试SSH是否设置成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure><p>如果出现下面的信息，则说明设置成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi XXX! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure><p><strong>Note</strong><br>也可能会报出错误：<code>Agent admitted failure to sign using the key.Permission denied (publickey).</code>这是由于没有将新建的ssh密钥加入，下面的命令可以解决：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-add   ~/.ssh/id_rsa</div></pre></td></tr></table></figure></li></ul><hr><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a><a href="#u4F7F_u7528" title="使用"></a>使用</h3><h4 id="1-使用github创建博客仓库"><a href="#1-使用github创建博客仓库" class="headerlink" title="1. 使用github创建博客仓库"></a><a href="#1-__u4F7F_u7528github_u521B_u5EFA_u535A_u5BA2_u4ED3_u5E93" title="1\. 使用github创建博客仓库"></a>1. 使用github创建博客仓库</h4><p>在github上创建一个仓库，<strong>仓库的名字和用户名必须对应</strong>，如我的帐户名为<code>Xiaojuanmao</code>,则创建的仓库名称为<code>Xiaojuanmao.github.io</code>。这样存放在github上的远程仓库就准备好了，下面来用hexo来初始化本地的仓库内容。</p><h4 id="2-Hexo初始化"><a href="#2-Hexo初始化" class="headerlink" title="2. Hexo初始化"></a><a href="#2-_Hexo_u521D_u59CB_u5316" title="2\. Hexo初始化"></a>2. Hexo初始化</h4><p>在主文件夹下创建一个hexo文件夹，进入文件夹，在终端输入如下的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure><p>会给出这样的反馈：<code>INFO Copying data to ~/hexo INFO You are almost done! Don&#39;t forget to run &#39;npm install&#39; before you start blogging with Hexo!</code><br>接着按照上面的提示，输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure><p>会自动在目录下面安装node_modules。接着在命令行中启动本地的服务器，可以用来预览个人博客的样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure><p>反馈信息会提示已经在挂在了本地的服务器：<code>INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code></p><p>在浏览器中打开<code>http://0.0.0.0&quot;4000/</code>可以看到网页的整个框架已经生成了。有个默认的主题，如果觉得这个主题不好看，hexo还有好多主题可供更换。</p><h4 id="3-添加文章"><a href="#3-添加文章" class="headerlink" title="3. 添加文章"></a><a href="#3-__u6DFB_u52A0_u6587_u7AE0" title="3\. 添加文章"></a>3. 添加文章</h4><p>打开命令行，进入到hexo的目录下，利用如下的命令，可以新建一个.md格式的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;My New Post&quot;</div><div class="line">反馈信息：INFO  Created: ~/hexo/source/_posts/My-New-Post.md</div></pre></td></tr></table></figure><p>刷新刚才的<code>localhost:4000</code>，就能看到一篇新的博客出现了，用起来还是炒鸡方便的。创建之后再去编辑这个.md文件，写自己想写的内容就可以了。</p><h4 id="4-生成静态网页"><a href="#4-生成静态网页" class="headerlink" title="4. 生成静态网页"></a><a href="#4-__u751F_u6210_u9759_u6001_u7F51_u9875" title="4\. 生成静态网页"></a>4. 生成静态网页</h4><p>下面的命令生成静态的网页，在将本地的内容部署到github上面去之前，一定要先执行这个步骤。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">   或者 hexo g</div></pre></td></tr></table></figure><p>执行完之后，会在./public的目录下生成一系列的.html,.css文件。</p><h4 id="5-部署到Github"><a href="#5-部署到Github" class="headerlink" title="5. 部署到Github"></a><a href="#5-__u90E8_u7F72_u5230Github" title="5\. 部署到Github"></a>5. 部署到Github</h4><p>在和github完成对接之前，需要去配置hexo自己的配置文件<code>_config.yml</code>。关于这个文件里面的一些内容，需要进行一些修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># Hexo Configuration</div><div class="line">## Docs: http://hexo.io/docs/configuration.html</div><div class="line">## Source: https://github.com/hexojs/hexo/</div><div class="line"></div><div class="line"># Site</div><div class="line">title: Xiaojuanmao&apos;s Blog # 网站的标题</div><div class="line">subtitle: Life began in 1990 # 网站的副标题</div><div class="line">description: Coding Life # 显示在网页最下面的描述，类似于tag</div><div class="line">author: Xiaoxiaoda</div><div class="line">email: daque@hustunique.com</div><div class="line">language: zh_CN</div><div class="line">timezone:</div><div class="line"></div><div class="line"># Deployment</div><div class="line">## Docs: http://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git #这里不要写github了，hexo3.0之后用git代替了github</div><div class="line">  repository: git@github.com:Xiaojuanmao/Xiaojuanmao.github.io.git # 填写自己的git仓库地址，之前创建好了的</div><div class="line">  branch: master</div></pre></td></tr></table></figure><p>更改完配置文件之后保存，通过下面的命令部署到github上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo generate 或者 hexo g  #生成静态网页</div><div class="line">hexo deploy 或者 hexo d #部署到github</div><div class="line">上面两个命令可以和并为 hexo d -g</div></pre></td></tr></table></figure><p><strong>Note</strong><br>部署的过程中可能会出现如下的问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ERROR Deployer not found: github</div></pre></td></tr></table></figure><p>遇到这个不要慌，是hexo升级到3.0之后用git代替了github，所以需要再输入下面的命令，安装git的deployer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure><p>安装之后就可以将静态的网页部署到github的远程仓库上面。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
